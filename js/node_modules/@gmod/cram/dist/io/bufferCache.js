"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs3/regenerator"));

var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/for-each"));

var _promise = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/promise"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/createClass"));

var LRU = require('quick-lru');

var BufferCache =
/*#__PURE__*/
function () {
  function BufferCache(_ref) {
    var fetch = _ref.fetch,
        _ref$size = _ref.size,
        size = _ref$size === void 0 ? 10000000 : _ref$size,
        _ref$chunkSize = _ref.chunkSize,
        chunkSize = _ref$chunkSize === void 0 ? 32768 : _ref$chunkSize;
    (0, _classCallCheck2.default)(this, BufferCache);
    if (!fetch) throw new Error('fetch function required');
    this.fetch = fetch;
    this.chunkSize = chunkSize;
    this.lruCache = new LRU({
      maxSize: Math.floor(size / chunkSize)
    });
  }

  (0, _createClass2.default)(BufferCache, [{
    key: "get",
    value: function () {
      var _get = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee(outputBuffer, offset, length, position) {
        var _this = this;

        var firstChunk, lastChunk, fetches, _loop, chunk, chunks, chunksOffset;

        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(outputBuffer.length < offset + length)) {
                  _context.next = 2;
                  break;
                }

                throw new Error('output buffer not big enough for request');

              case 2:
                // calculate the list of chunks involved in this fetch
                firstChunk = Math.floor(position / this.chunkSize);
                lastChunk = Math.floor((position + length) / this.chunkSize); // fetch them all as necessary

                fetches = new Array(lastChunk - firstChunk + 1);

                _loop = function _loop(chunk) {
                  fetches[chunk - firstChunk] = _this._getChunk(chunk).then(function (data) {
                    return {
                      data: data,
                      chunkNumber: chunk
                    };
                  });
                };

                for (chunk = firstChunk; chunk <= lastChunk; chunk += 1) {
                  _loop(chunk);
                } // stitch together the response buffer using them


                _context.next = 9;
                return _promise.default.all(fetches);

              case 9:
                chunks = _context.sent;
                chunksOffset = position - chunks[0].chunkNumber * this.chunkSize;
                (0, _forEach.default)(chunks).call(chunks, function (_ref2) {
                  var data = _ref2.data,
                      chunkNumber = _ref2.chunkNumber;
                  var chunkPositionStart = chunkNumber * _this.chunkSize;
                  var copyStart = 0;
                  var copyEnd = _this.chunkSize;
                  var copyOffset = offset + (chunkNumber - firstChunk) * _this.chunkSize - chunksOffset;

                  if (chunkNumber === firstChunk) {
                    copyOffset = offset;
                    copyStart = chunksOffset;
                  }

                  if (chunkNumber === lastChunk) {
                    copyEnd = position + length - chunkPositionStart;
                  }

                  data.copy(outputBuffer, copyOffset, copyStart, copyEnd);
                });

              case 12:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function get(_x, _x2, _x3, _x4) {
        return _get.apply(this, arguments);
      }

      return get;
    }()
  }, {
    key: "_getChunk",
    value: function _getChunk(chunkNumber) {
      var cachedPromise = this.lruCache.get(chunkNumber);
      if (cachedPromise) return cachedPromise;
      var freshPromise = this.fetch(chunkNumber * this.chunkSize, this.chunkSize);
      this.lruCache.set(chunkNumber, freshPromise);
      return freshPromise;
    }
  }]);
  return BufferCache;
}();

module.exports = BufferCache;