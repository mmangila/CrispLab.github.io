"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs3/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/createClass"));

var _require = require('es6-promisify'),
    promisify = _require.promisify; // don't load fs native module if running in webpacked code


var fs = typeof __webpack_require__ !== 'function' ? require('fs') : null; // eslint-disable-line camelcase

var fsOpen = fs && promisify(fs.open);
var fsRead = fs && promisify(fs.read);
var fsFStat = fs && promisify(fs.fstat);
var fsReadFile = fs && promisify(fs.readFile);

var LocalFile =
/*#__PURE__*/
function () {
  function LocalFile(source) {
    (0, _classCallCheck2.default)(this, LocalFile);
    this.position = 0;
    this.filename = source;
    this.fd = fsOpen(this.filename, 'r');
  }

  (0, _createClass2.default)(LocalFile, [{
    key: "read",
    value: function () {
      var _read = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee(buffer) {
        var offset,
            length,
            position,
            readPosition,
            _args = arguments;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                offset = _args.length > 1 && _args[1] !== undefined ? _args[1] : 0;
                length = _args.length > 2 ? _args[2] : undefined;
                position = _args.length > 3 ? _args[3] : undefined;
                readPosition = position;

                if (readPosition === null) {
                  readPosition = this.position;
                  this.position += length;
                }

                _context.t0 = fsRead;
                _context.next = 8;
                return this.fd;

              case 8:
                _context.t1 = _context.sent;
                _context.t2 = buffer;
                _context.t3 = offset;
                _context.t4 = length;
                _context.t5 = position;
                return _context.abrupt("return", (0, _context.t0)(_context.t1, _context.t2, _context.t3, _context.t4, _context.t5));

              case 14:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function read(_x) {
        return _read.apply(this, arguments);
      }

      return read;
    }()
  }, {
    key: "readFile",
    value: function () {
      var _readFile = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee2() {
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.t0 = fsReadFile;
                _context2.next = 3;
                return this.fd;

              case 3:
                _context2.t1 = _context2.sent;
                return _context2.abrupt("return", (0, _context2.t0)(_context2.t1));

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function readFile() {
        return _readFile.apply(this, arguments);
      }

      return readFile;
    }()
  }, {
    key: "stat",
    value: function () {
      var _stat = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee3() {
        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (this._stat) {
                  _context3.next = 8;
                  break;
                }

                _context3.t0 = fsFStat;
                _context3.next = 4;
                return this.fd;

              case 4:
                _context3.t1 = _context3.sent;
                _context3.next = 7;
                return (0, _context3.t0)(_context3.t1);

              case 7:
                this._stat = _context3.sent;

              case 8:
                return _context3.abrupt("return", this._stat);

              case 9:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function stat() {
        return _stat.apply(this, arguments);
      }

      return stat;
    }()
  }]);
  return LocalFile;
}();

module.exports = LocalFile;