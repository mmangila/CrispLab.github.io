"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs3/regenerator"));

var _parseInt2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/parse-int"));

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/createClass"));

var fetch = require('cross-fetch');

var BufferCache = require('./bufferCache');

var RemoteFile =
/*#__PURE__*/
function () {
  function RemoteFile(source) {
    var _this = this;

    (0, _classCallCheck2.default)(this, RemoteFile);
    this.position = 0;
    this.url = source;
    this.cache = new BufferCache({
      fetch: function fetch(start, length) {
        return _this._fetch(start, length);
      }
    });
  }

  (0, _createClass2.default)(RemoteFile, [{
    key: "_fetch",
    value: function () {
      var _fetch2 = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee(position, length) {
        var _context2;

        var headers, _context, response, nodeBuffer, sizeMatch;

        return _regenerator.default.wrap(function _callee$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                headers = {};

                if (length < Infinity) {
                  headers.range = (0, _concat.default)(_context = "bytes=".concat(position, "-")).call(_context, position + length);
                } else if (length === Infinity && position !== 0) {
                  headers.range = "bytes=".concat(position, "-");
                }

                _context3.next = 4;
                return fetch(this.url, {
                  method: 'GET',
                  headers: headers,
                  redirect: 'follow',
                  mode: 'cors'
                });

              case 4:
                response = _context3.sent;

                if (!(response.status === 200 && position === 0 || response.status === 206)) {
                  _context3.next = 14;
                  break;
                }

                _context3.t0 = Buffer;
                _context3.next = 9;
                return response.arrayBuffer();

              case 9:
                _context3.t1 = _context3.sent;
                nodeBuffer = _context3.t0.from.call(_context3.t0, _context3.t1);
                // try to parse out the size of the remote file
                sizeMatch = /\/(\d+)$/.exec(response.headers.get('content-range'));
                if (sizeMatch[1]) this._stat = {
                  size: (0, _parseInt2.default)(sizeMatch[1], 10)
                };
                return _context3.abrupt("return", nodeBuffer);

              case 14:
                throw new Error((0, _concat.default)(_context2 = "HTTP ".concat(response.status, " fetching ")).call(_context2, this.url));

              case 15:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee, this);
      }));

      function _fetch(_x, _x2) {
        return _fetch2.apply(this, arguments);
      }

      return _fetch;
    }()
  }, {
    key: "read",
    value: function read(buffer) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var length = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;
      var position = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var readPosition = position;

      if (readPosition === null) {
        readPosition = this.position;
        this.position += length;
      }

      return this.cache.get(buffer, offset, length, position);
    }
  }, {
    key: "readFile",
    value: function () {
      var _readFile = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee2() {
        var response;
        return _regenerator.default.wrap(function _callee2$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return fetch(this.url, {
                  method: 'GET',
                  redirect: 'follow',
                  mode: 'cors'
                });

              case 2:
                response = _context4.sent;
                _context4.t0 = Buffer;
                _context4.next = 6;
                return response.arrayBuffer();

              case 6:
                _context4.t1 = _context4.sent;
                return _context4.abrupt("return", _context4.t0.from.call(_context4.t0, _context4.t1));

              case 8:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee2, this);
      }));

      function readFile() {
        return _readFile.apply(this, arguments);
      }

      return readFile;
    }()
  }, {
    key: "stat",
    value: function () {
      var _stat = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee3() {
        var buf;
        return _regenerator.default.wrap(function _callee3$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                if (this._stat) {
                  _context5.next = 6;
                  break;
                }

                buf = Buffer.allocUnsafe(10);
                _context5.next = 4;
                return this.read(buf, 0, 10, 0);

              case 4:
                if (this._stat) {
                  _context5.next = 6;
                  break;
                }

                throw new Error("unable to determine size of file at ".concat(this.url));

              case 6:
                return _context5.abrupt("return", this._stat);

              case 7:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee3, this);
      }));

      function stat() {
        return _stat.apply(this, arguments);
      }

      return stat;
    }()
  }]);
  return RemoteFile;
}();

module.exports = RemoteFile;