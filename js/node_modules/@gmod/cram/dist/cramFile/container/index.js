"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/for-each"));

var _assign = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/assign"));

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs3/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/createClass"));

var _context7;

var _require = require('../../errors'),
    CramMalformedError = _require.CramMalformedError;

var _require2 = require('../util'),
    itf8Size = _require2.itf8Size,
    parseItem = _require2.parseItem,
    tinyMemoize = _require2.tinyMemoize;

var CramSlice = require('../slice');

var CramContainerCompressionScheme = require('./compressionScheme');

var CramContainer =
/*#__PURE__*/
function () {
  function CramContainer(cramFile, position) {
    (0, _classCallCheck2.default)(this, CramContainer);
    // cram file this container comes from
    this.file = cramFile; // position of this container in the file

    this.filePosition = position; // console.log(`container: ${this.filePosition}`)
  } // memoize


  (0, _createClass2.default)(CramContainer, [{
    key: "getHeader",
    value: function getHeader() {
      return this._readContainerHeader(this.filePosition);
    } // memoize

  }, {
    key: "getCompressionHeaderBlock",
    value: function () {
      var _getCompressionHeaderBlock = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee() {
        var containerHeader, sectionParsers, block, content;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.getHeader();

              case 2:
                containerHeader = _context.sent;

                if (containerHeader.numRecords) {
                  _context.next = 5;
                  break;
                }

                return _context.abrupt("return", null);

              case 5:
                _context.next = 7;
                return this.file.getSectionParsers();

              case 7:
                sectionParsers = _context.sent;
                _context.next = 10;
                return this.getFirstBlock();

              case 10:
                block = _context.sent;

                if (!(block.contentType !== 'COMPRESSION_HEADER')) {
                  _context.next = 13;
                  break;
                }

                throw new CramMalformedError("invalid content type ".concat(block.contentType, " in what is supposed to be the compression header block"));

              case 13:
                content = parseItem(block.content, sectionParsers.cramCompressionHeader.parser, 0, block.contentPosition);
                block.content = content;
                return _context.abrupt("return", block);

              case 16:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getCompressionHeaderBlock() {
        return _getCompressionHeaderBlock.apply(this, arguments);
      }

      return getCompressionHeaderBlock;
    }()
  }, {
    key: "getFirstBlock",
    value: function () {
      var _getFirstBlock = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee2() {
        var containerHeader;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.getHeader();

              case 2:
                containerHeader = _context2.sent;
                return _context2.abrupt("return", this.file.readBlock(containerHeader._endPosition));

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getFirstBlock() {
        return _getFirstBlock.apply(this, arguments);
      }

      return getFirstBlock;
    }() // parses the compression header data into a CramContainerCompressionScheme object
    // memoize

  }, {
    key: "getCompressionScheme",
    value: function () {
      var _getCompressionScheme = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee3() {
        var header;
        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.getCompressionHeaderBlock();

              case 2:
                header = _context3.sent;

                if (header) {
                  _context3.next = 5;
                  break;
                }

                return _context3.abrupt("return", undefined);

              case 5:
                return _context3.abrupt("return", new CramContainerCompressionScheme(header.content));

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function getCompressionScheme() {
        return _getCompressionScheme.apply(this, arguments);
      }

      return getCompressionScheme;
    }()
  }, {
    key: "getSlice",
    value: function getSlice(slicePosition, sliceSize) {
      // note: slicePosition is relative to the end of the container header
      // TODO: perhaps we should cache slices?
      return new CramSlice(this, slicePosition, sliceSize);
    }
  }, {
    key: "_readContainerHeader",
    value: function () {
      var _readContainerHeader2 = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee4(position) {
        var sectionParsers, cramContainerHeader1, cramContainerHeader2, _ref, fileSize, bytes1, header1, numLandmarksSize, _context4, _context5, bytes2, header2, completeHeader;

        return _regenerator.default.wrap(function _callee4$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this.file.getSectionParsers();

              case 2:
                sectionParsers = _context6.sent;
                cramContainerHeader1 = sectionParsers.cramContainerHeader1, cramContainerHeader2 = sectionParsers.cramContainerHeader2;
                _context6.next = 6;
                return this.file.stat();

              case 6:
                _ref = _context6.sent;
                fileSize = _ref.size;

                if (!(position >= fileSize)) {
                  _context6.next = 10;
                  break;
                }

                return _context6.abrupt("return", undefined);

              case 10:
                // parse the container header. do it in 2 pieces because you cannot tell
                // how much to buffer until you read numLandmarks
                bytes1 = Buffer.allocUnsafe(cramContainerHeader1.maxLength);
                _context6.next = 13;
                return this.file.read(bytes1, 0, cramContainerHeader1.maxLength, position);

              case 13:
                header1 = parseItem(bytes1, cramContainerHeader1.parser);
                numLandmarksSize = itf8Size(header1.numLandmarks);

                if (!(position + header1.length >= fileSize)) {
                  _context6.next = 18;
                  break;
                }

                console.warn((0, _concat.default)(_context4 = (0, _concat.default)(_context5 = "".concat(this.file, ": container header at ")).call(_context5, position, " indicates that the container has length ")).call(_context4, header1.length, ", which extends beyond the length of the file. Skipping this container."));
                return _context6.abrupt("return", undefined);

              case 18:
                bytes2 = Buffer.allocUnsafe(cramContainerHeader2.maxLength(header1.numLandmarks));
                _context6.next = 21;
                return this.file.read(bytes2, 0, cramContainerHeader2.maxLength(header1.numLandmarks), position + header1._size - numLandmarksSize);

              case 21:
                header2 = parseItem(bytes2, cramContainerHeader2.parser);

                if (!(this.file.validateChecksums && header2.crc32 !== undefined)) {
                  _context6.next = 25;
                  break;
                }

                _context6.next = 25;
                return this.file.checkCrc32(position, header1._size + header2._size - numLandmarksSize - 4, header2.crc32, "container header beginning at position ".concat(position));

              case 25:
                completeHeader = (0, _assign.default)(header1, header2, {
                  _size: header1._size + header2._size - numLandmarksSize,
                  _endPosition: header1._size + header2._size - numLandmarksSize + position
                });
                return _context6.abrupt("return", completeHeader);

              case 27:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee4, this);
      }));

      function _readContainerHeader(_x) {
        return _readContainerHeader2.apply(this, arguments);
      }

      return _readContainerHeader;
    }()
  }]);
  return CramContainer;
}();

(0, _forEach.default)(_context7 = 'getHeader getCompressionHeaderBlock getCompressionScheme'.split(' ')).call(_context7, function (method) {
  return tinyMemoize(CramContainer, method);
});
module.exports = CramContainer;