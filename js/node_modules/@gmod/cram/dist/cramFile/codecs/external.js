"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/inherits"));

var _require = require('../../errors'),
    CramUnimplementedError = _require.CramUnimplementedError,
    CramMalformedError = _require.CramMalformedError,
    CramBufferOverrunError = _require.CramBufferOverrunError;

var CramCodec = require('./_base');

var _require2 = require('../util'),
    parseItf8 = _require2.parseItf8;

var ExternalCodec =
/*#__PURE__*/
function (_CramCodec) {
  (0, _inherits2.default)(ExternalCodec, _CramCodec);

  function ExternalCodec() {
    var _this;

    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var dataType = arguments.length > 1 ? arguments[1] : undefined;
    (0, _classCallCheck2.default)(this, ExternalCodec);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ExternalCodec).call(this, parameters, dataType));

    if (_this.dataType === 'int') {
      _this._decodeData = _this._decodeInt;
    } else if (_this.dataType === 'byte') {
      _this._decodeData = _this._decodeByte;
    } else {
      throw new CramUnimplementedError("".concat(_this.dataType, " decoding not yet implemented by EXTERNAL codec"));
    }

    return _this;
  }

  (0, _createClass2.default)(ExternalCodec, [{
    key: "decode",
    value: function decode(slice, coreDataBlock, blocksByContentId, cursors) {
      var blockContentId = this.parameters.blockContentId;
      var contentBlock = blocksByContentId[blockContentId];
      if (!contentBlock) throw new CramMalformedError("no block found with content ID ".concat(blockContentId));
      var cursor = cursors.externalBlocks.getCursor(blockContentId);
      return this._decodeData(contentBlock, cursor);
    }
  }, {
    key: "_decodeInt",
    value: function _decodeInt(contentBlock, cursor) {
      var _parseItf = parseItf8(contentBlock.content, cursor.bytePosition),
          _parseItf2 = (0, _slicedToArray2.default)(_parseItf, 2),
          result = _parseItf2[0],
          bytesRead = _parseItf2[1];

      cursor.bytePosition += bytesRead;
      return result;
    }
  }, {
    key: "_decodeByte",
    value: function _decodeByte(contentBlock, cursor) {
      if (cursor.bytePosition >= contentBlock.content.length) throw new CramBufferOverrunError('attempted to read beyond end of block. this file seems truncated.');
      var result = contentBlock.content[cursor.bytePosition];
      cursor.bytePosition += 1;
      return result;
    }
  }]);
  return ExternalCodec;
}(CramCodec);

module.exports = ExternalCodec;