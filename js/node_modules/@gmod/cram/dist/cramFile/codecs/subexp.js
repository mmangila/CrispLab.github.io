"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/inherits"));

var _require = require('../../errors'),
    CramUnimplementedError = _require.CramUnimplementedError;

var CramCodec = require('./_base');

var SubexpCodec =
/*#__PURE__*/
function (_CramCodec) {
  (0, _inherits2.default)(SubexpCodec, _CramCodec);

  function SubexpCodec() {
    var _this;

    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var dataType = arguments.length > 1 ? arguments[1] : undefined;
    (0, _classCallCheck2.default)(this, SubexpCodec);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(SubexpCodec).call(this, parameters, dataType));

    if (_this.dataType !== 'int') {
      throw new CramUnimplementedError("".concat(_this.dataType, " decoding not yet implemented by SUBEXP codec"));
    }

    return _this;
  }

  (0, _createClass2.default)(SubexpCodec, [{
    key: "decode",
    value: function decode(slice, coreDataBlock, blocksByContentId, cursors) {
      var numLeadingOnes = 0;

      while (this._getBits(coreDataBlock.content, cursors.coreBlock, 1)) {
        numLeadingOnes += 1;
      }

      var b;
      var n;

      if (numLeadingOnes === 0) {
        b = this.parameters.K;
        n = this._getBits(coreDataBlock.content, cursors.coreBlock, b);
      } else {
        b = numLeadingOnes + this.parameters.K - 1;
        n = 1 << b | this._getBits(coreDataBlock.content, cursors.coreBlock, b);
      }

      return n - this.parameters.offset;
    }
  }]);
  return SubexpCodec;
}(CramCodec);

module.exports = SubexpCodec;