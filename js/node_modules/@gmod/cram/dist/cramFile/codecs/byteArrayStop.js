"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _slice = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/slice"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/inherits"));

var _require = require('../../errors'),
    CramBufferOverrunError = _require.CramBufferOverrunError,
    CramMalformedError = _require.CramMalformedError;

var CramCodec = require('./_base');

var ByteArrayStopCodec =
/*#__PURE__*/
function (_CramCodec) {
  (0, _inherits2.default)(ByteArrayStopCodec, _CramCodec);

  function ByteArrayStopCodec() {
    var _this;

    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var dataType = arguments.length > 1 ? arguments[1] : undefined;
    (0, _classCallCheck2.default)(this, ByteArrayStopCodec);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ByteArrayStopCodec).call(this, parameters, dataType));

    if (dataType === 'byteArray') {
      _this._decode = _this._decodeByteArray;
    } else {
      throw new TypeError("byteArrayStop codec does not support data type ".concat(dataType));
    }

    return _this;
  }

  (0, _createClass2.default)(ByteArrayStopCodec, [{
    key: "decode",
    value: function decode(slice, coreDataBlock, blocksByContentId, cursors) {
      var blockContentId = this.parameters.blockContentId;
      var contentBlock = blocksByContentId[blockContentId];
      if (!contentBlock) throw new CramMalformedError("no block found with content ID ".concat(blockContentId));
      var cursor = cursors.externalBlocks.getCursor(blockContentId);
      return this._decode(contentBlock, cursor);
    }
  }, {
    key: "_decodeByteArray",
    value: function _decodeByteArray(contentBlock, cursor) {
      var dataBuffer = contentBlock.content;
      var stopByte = this.parameters.stopByte; // scan to the next stop byte

      var startPosition = cursor.bytePosition;
      var stopPosition = cursor.bytePosition;

      while (dataBuffer[stopPosition] !== stopByte && stopPosition < dataBuffer.length) {
        if (stopPosition === dataBuffer.length) {
          throw new CramBufferOverrunError("byteArrayStop reading beyond length of data buffer?");
        }

        stopPosition += 1;
      }

      cursor.bytePosition = stopPosition + 1;
      var data = (0, _slice.default)(dataBuffer).call(dataBuffer, startPosition, stopPosition);
      return data;
    }
  }]);
  return ByteArrayStopCodec;
}(CramCodec);

module.exports = ByteArrayStopCodec;