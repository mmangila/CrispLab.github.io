"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));var fs =
// eslint-disable-next-line camelcase
typeof __webpack_require__ !== 'function' ? require('fs-extra') : undefined;

// LocalFile is pretty much just an implementation of the node 10+ fs.promises filehandle,
// we can switch to that when the API is stable
var LocalFile = /*#__PURE__*/function () {
  function LocalFile(path) {(0, _classCallCheck2.default)(this, LocalFile);
    this.fdPromise = fs.open(path, 'r');
    this.path = path;
  }(0, _createClass2.default)(LocalFile, [{ key: "read", value: function () {var _read = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(

      buf, offset, length, position) {var fd, ret;return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:_context.next = 2;return (
                  this.fdPromise);case 2:fd = _context.sent;_context.next = 5;return (
                  fs.read(fd, buf, offset, length, position));case 5:ret = _context.sent;return _context.abrupt("return",
                ret);case 7:case "end":return _context.stop();}}}, _callee, this);}));function read(_x, _x2, _x3, _x4) {return _read.apply(this, arguments);}return read;}() }, { key: "stat", value: function () {var _stat = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {var fd;return _regenerator.default.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:_context2.next = 2;return (



                  this.fdPromise);case 2:fd = _context2.sent;return _context2.abrupt("return",
                fs.fstat(fd));case 4:case "end":return _context2.stop();}}}, _callee2, this);}));function stat() {return _stat.apply(this, arguments);}return stat;}() }]);return LocalFile;}();



module.exports = LocalFile;