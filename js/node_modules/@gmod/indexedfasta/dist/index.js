"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseSmallFasta = parseSmallFasta;
Object.defineProperty(exports, "BgzipIndexedFasta", {
  enumerable: true,
  get: function get() {
    return _bgzipIndexedFasta.default;
  }
});
Object.defineProperty(exports, "IndexedFasta", {
  enumerable: true,
  get: function get() {
    return _indexedFasta.default;
  }
});
exports.FetchableSmallFasta = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _toArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toArray"));

var _localFile = _interopRequireDefault(require("./localFile"));

var _bgzipIndexedFasta = _interopRequireDefault(require("./bgzipIndexedFasta"));

var _indexedFasta = _interopRequireDefault(require("./indexedFasta"));

function parseSmallFasta(text) {
  return text.split('>').filter(function (t) {
    return /\S/.test(t);
  }).map(function (entryText) {
    var _entryText$split = entryText.split('\n'),
        _entryText$split2 = (0, _toArray2.default)(_entryText$split),
        defLine = _entryText$split2[0],
        seqLines = _entryText$split2.slice(1);

    var _defLine$split = defLine.split(' '),
        _defLine$split2 = (0, _toArray2.default)(_defLine$split),
        id = _defLine$split2[0],
        description = _defLine$split2.slice(1);

    var sequence = seqLines.join('').replace(/\s/g, '');
    return {
      id: id,
      description: description.join(' '),
      sequence: sequence
    };
  });
} // memoized


var FetchableSmallFasta = /*#__PURE__*/function () {
  function FetchableSmallFasta(_ref) {
    var fasta = _ref.fasta,
        path = _ref.path;
    (0, _classCallCheck2.default)(this, FetchableSmallFasta);

    if (fasta) {
      this.fasta = fasta;
    } else if (path) {
      this.fasta = new _localFile.default(path);
    }

    this.data = this.fasta.readFile().then(function (buffer) {
      var text = buffer.toString('utf8');
      return parseSmallFasta(text);
    });
  }

  (0, _createClass2.default)(FetchableSmallFasta, [{
    key: "fetch",
    value: function () {
      var _fetch = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(id, start, end) {
        var data, entry, length;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.data;

              case 2:
                data = _context.sent;
                entry = data.find(function (iter) {
                  return iter.id === id;
                });
                length = end - start;

                if (entry) {
                  _context.next = 7;
                  break;
                }

                throw new Error("no sequence with id ".concat(id, " exists"));

              case 7:
                return _context.abrupt("return", entry.sequence.substr(start, length));

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function fetch(_x, _x2, _x3) {
        return _fetch.apply(this, arguments);
      }

      return fetch;
    }()
  }, {
    key: "getSequenceNames",
    value: function () {
      var _getSequenceNames = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
        var data;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.data;

              case 2:
                data = _context2.sent;
                return _context2.abrupt("return", data.map(function (entry) {
                  return entry.id;
                }));

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getSequenceNames() {
        return _getSequenceNames.apply(this, arguments);
      }

      return getSequenceNames;
    }()
  }]);
  return FetchableSmallFasta;
}();

exports.FetchableSmallFasta = FetchableSmallFasta;