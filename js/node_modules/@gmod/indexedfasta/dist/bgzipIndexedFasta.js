"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _bgzfFilehandle = require("@gmod/bgzf-filehandle");

var _indexedFasta = _interopRequireDefault(require("./indexedFasta"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var BgzipIndexedFasta = /*#__PURE__*/function (_IndexedFasta) {
  (0, _inherits2.default)(BgzipIndexedFasta, _IndexedFasta);

  var _super = _createSuper(BgzipIndexedFasta);

  function BgzipIndexedFasta(_ref) {
    var _this;

    var fasta = _ref.fasta,
        path = _ref.path,
        fai = _ref.fai,
        faiPath = _ref.faiPath,
        gzi = _ref.gzi,
        gziPath = _ref.gziPath,
        chunkSizeLimit = _ref.chunkSizeLimit;
    (0, _classCallCheck2.default)(this, BgzipIndexedFasta);
    _this = _super.call(this, {
      fasta: fasta,
      path: path,
      fai: fai,
      faiPath: faiPath,
      chunkSizeLimit: chunkSizeLimit
    });

    if (fasta && gzi) {
      _this.fasta = new _bgzfFilehandle.BgzfFilehandle({
        filehandle: fasta,
        gziFilehandle: gzi
      });
    } else if (path && gziPath) {
      _this.fasta = new _bgzfFilehandle.BgzfFilehandle({
        path: path,
        gziPath: gziPath
      });
    }

    return _this;
  }

  return BgzipIndexedFasta;
}(_indexedFasta.default);

module.exports = BgzipIndexedFasta;