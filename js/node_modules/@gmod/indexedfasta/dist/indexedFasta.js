"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _localFile = _interopRequireDefault(require("./localFile"));

function _faiOffset(idx, pos) {
  return idx.offset + idx.lineBytes * Math.floor(pos / idx.lineLength) + pos % idx.lineLength;
}

var IndexedFasta = /*#__PURE__*/function () {
  function IndexedFasta(_ref) {
    var fasta = _ref.fasta,
        fai = _ref.fai,
        path = _ref.path,
        faiPath = _ref.faiPath,
        _ref$chunkSizeLimit = _ref.chunkSizeLimit,
        chunkSizeLimit = _ref$chunkSizeLimit === void 0 ? 1000000 : _ref$chunkSizeLimit;
    (0, _classCallCheck2.default)(this, IndexedFasta);

    if (fasta) {
      this.fasta = fasta;
    } else if (path) {
      this.fasta = new _localFile.default(path);
    }

    if (fai) {
      this.fai = fai;
    } else if (faiPath) {
      this.fai = new _localFile.default(faiPath);
    } else if (path) {
      this.fai = new _localFile.default("".concat(path, ".fai"));
    }

    this.chunkSizeLimit = chunkSizeLimit;
  }

  (0, _createClass2.default)(IndexedFasta, [{
    key: "_getIndexes",
    value: function () {
      var _getIndexes2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (this.indexes) {
                  _context.next = 4;
                  break;
                }

                _context.next = 3;
                return this._readFAI();

              case 3:
                this.indexes = _context.sent;

              case 4:
                return _context.abrupt("return", this.indexes);

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function _getIndexes() {
        return _getIndexes2.apply(this, arguments);
      }

      return _getIndexes;
    }()
  }, {
    key: "_readFAI",
    value: function () {
      var _readFAI2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
        var indexByName, indexById, text, idCounter, currSeq;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                indexByName = {};
                indexById = {};
                _context2.next = 4;
                return this.fai.readFile();

              case 4:
                text = _context2.sent;

                if (text && text.length) {
                  _context2.next = 7;
                  break;
                }

                throw new Error('No data read from FASTA index (FAI) file');

              case 7:
                idCounter = 0;
                text.toString('utf8').split(/\r?\n/).filter(function (line) {
                  return /\S/.test(line);
                }).forEach(function (line) {
                  var row = line.split('\t');
                  if (row[0] === '') return;

                  if (!currSeq || currSeq.name !== row[0]) {
                    currSeq = {
                      name: row[0],
                      id: idCounter
                    };
                    idCounter += 1;
                  }

                  var entry = {
                    id: currSeq.id,
                    name: row[0],
                    length: +row[1],
                    start: 0,
                    end: +row[1],
                    offset: +row[2],
                    lineLength: +row[3],
                    lineBytes: +row[4]
                  };
                  indexByName[entry.name] = entry;
                  indexById[entry.id] = entry;
                });
                return _context2.abrupt("return", {
                  name: indexByName,
                  id: indexById
                });

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function _readFAI() {
        return _readFAI2.apply(this, arguments);
      }

      return _readFAI;
    }()
    /**
     * @returns {array[string]} array of string sequence
     * names that are present in the index, in which the
     * array index indicates the sequence ID, and the value
     * is the sequence name
     */

  }, {
    key: "getSequenceNames",
    value: function () {
      var _getSequenceNames = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {
        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.t0 = Object;
                _context3.next = 3;
                return this._getIndexes();

              case 3:
                _context3.t1 = _context3.sent.name;
                return _context3.abrupt("return", _context3.t0.keys.call(_context3.t0, _context3.t1));

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function getSequenceNames() {
        return _getSequenceNames.apply(this, arguments);
      }

      return getSequenceNames;
    }()
    /**
     * @returns {array[string]} array of string sequence
     * names that are present in the index, in which the
     * array index indicates the sequence ID, and the value
     * is the sequence name
     */

  }, {
    key: "getSequenceSizes",
    value: function () {
      var _getSequenceSizes = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4() {
        var returnObject, idx, vals, i;
        return _regenerator.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                returnObject = {};
                _context4.next = 3;
                return this._getIndexes();

              case 3:
                idx = _context4.sent;
                vals = Object.values(idx.id);

                for (i = 0; i < vals.length; i += 1) {
                  returnObject[vals[i].name] = vals[i].length;
                }

                return _context4.abrupt("return", returnObject);

              case 7:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function getSequenceSizes() {
        return _getSequenceSizes.apply(this, arguments);
      }

      return getSequenceSizes;
    }()
    /**
     * @returns {array[string]} array of string sequence
     * names that are present in the index, in which the
     * array index indicates the sequence ID, and the value
     * is the sequence name
     */

  }, {
    key: "getSequenceSize",
    value: function () {
      var _getSequenceSize = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5(seqName) {
        var idx;
        return _regenerator.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this._getIndexes();

              case 2:
                idx = _context5.sent;
                return _context5.abrupt("return", (idx.name[seqName] || {}).length);

              case 4:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function getSequenceSize(_x) {
        return _getSequenceSize.apply(this, arguments);
      }

      return getSequenceSize;
    }()
    /**
     *
     * @param {string} name
     * @returns {Promise[boolean]} true if the file contains the given reference sequence name
     */

  }, {
    key: "hasReferenceSequence",
    value: function () {
      var _hasReferenceSequence = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6(name) {
        return _regenerator.default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this._getIndexes();

              case 2:
                _context6.t0 = name;
                return _context6.abrupt("return", !!_context6.sent.name[_context6.t0]);

              case 4:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function hasReferenceSequence(_x2) {
        return _hasReferenceSequence.apply(this, arguments);
      }

      return hasReferenceSequence;
    }()
    /**
     *
     * @param {number} seqId
     * @param {number} min
     * @param {number} max
     */

  }, {
    key: "getResiduesById",
    value: function () {
      var _getResiduesById = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7(seqId, min, max) {
        var indexEntry;
        return _regenerator.default.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return this._getIndexes();

              case 2:
                _context7.t0 = seqId;
                indexEntry = _context7.sent.id[_context7.t0];

                if (indexEntry) {
                  _context7.next = 6;
                  break;
                }

                return _context7.abrupt("return", undefined);

              case 6:
                return _context7.abrupt("return", this._fetchFromIndexEntry(indexEntry, min, max));

              case 7:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function getResiduesById(_x3, _x4, _x5) {
        return _getResiduesById.apply(this, arguments);
      }

      return getResiduesById;
    }()
    /**
     * @param {string} seqName
     * @param {number} min
     * @param {number} max
     */

  }, {
    key: "getResiduesByName",
    value: function () {
      var _getResiduesByName = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee8(seqName, min, max) {
        var indexEntry;
        return _regenerator.default.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return this._getIndexes();

              case 2:
                _context8.t0 = seqName;
                indexEntry = _context8.sent.name[_context8.t0];

                if (indexEntry) {
                  _context8.next = 6;
                  break;
                }

                return _context8.abrupt("return", undefined);

              case 6:
                return _context8.abrupt("return", this._fetchFromIndexEntry(indexEntry, min, max));

              case 7:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function getResiduesByName(_x6, _x7, _x8) {
        return _getResiduesByName.apply(this, arguments);
      }

      return getResiduesByName;
    }()
  }, {
    key: "getSequence",
    value: function () {
      var _getSequence = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee9() {
        var _args9 = arguments;
        return _regenerator.default.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                return _context9.abrupt("return", this.getResiduesByName.apply(this, _args9));

              case 1:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function getSequence() {
        return _getSequence.apply(this, arguments);
      }

      return getSequence;
    }()
  }, {
    key: "_fetchFromIndexEntry",
    value: function () {
      var _fetchFromIndexEntry2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee10(indexEntry) {
        var min,
            max,
            end,
            position,
            readlen,
            residues,
            _args10 = arguments;
        return _regenerator.default.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                min = _args10.length > 1 && _args10[1] !== undefined ? _args10[1] : 0;
                max = _args10.length > 2 ? _args10[2] : undefined;
                end = max;

                if (!(min < 0)) {
                  _context10.next = 5;
                  break;
                }

                throw new TypeError('regionStart cannot be less than 0');

              case 5:
                if (end === undefined || end > indexEntry.length) {
                  end = indexEntry.length;
                }

                if (!(min >= end)) {
                  _context10.next = 8;
                  break;
                }

                return _context10.abrupt("return", '');

              case 8:
                position = _faiOffset(indexEntry, min);
                readlen = _faiOffset(indexEntry, end) - position;

                if (!(readlen > this.chunkSizeLimit)) {
                  _context10.next = 12;
                  break;
                }

                throw new Error("data size of ".concat(readlen.toLocaleString(), " bytes exceeded chunk size limit of ").concat(this.chunkSizeLimit.toLocaleString(), " bytes"));

              case 12:
                residues = Buffer.allocUnsafe(readlen);
                _context10.next = 15;
                return this.fasta.read(residues, 0, readlen, position);

              case 15:
                residues = residues.toString('utf8').replace(/\s+/g, '');
                return _context10.abrupt("return", residues);

              case 17:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function _fetchFromIndexEntry(_x9) {
        return _fetchFromIndexEntry2.apply(this, arguments);
      }

      return _fetchFromIndexEntry;
    }()
  }]);
  return IndexedFasta;
}();

module.exports = IndexedFasta;