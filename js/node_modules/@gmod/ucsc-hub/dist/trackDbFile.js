"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));function _createSuper(Derived) {return function () {var Super = (0, _getPrototypeOf2.default)(Derived),result;if (_isNativeReflectConstruct()) {var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return (0, _possibleConstructorReturn2.default)(this, result);};}function _isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));return true;} catch (e) {return false;}}var RaFile = require('./raFile');

/**
lass representing a genomes.txt file.
extends RaFile
param {(string|string[])} [trackDbFile=[]] - A trackDb.txt file as a string
throws {Error} Throws if "track" is not the first key in each track or if a
track is missing required keys
var
TrackDbFile = /*#__PURE__*/function (_RaFile) {(0, _inherits2.default)(TrackDbFile, _RaFile);var _super = _createSuper(TrackDbFile);
  function TrackDbFile(trackDbFile) {var _this;(0, _classCallCheck2.default)(this, TrackDbFile);
    _this = _super.call(this, trackDbFile, { checkIndent: false });
    if (_this.nameKey !== 'track')
    throw new Error("trackDb has \"".concat(
    _this.nameKey, "\" instead of \"track\" as the first line in each track"));

    _this.forEach(function (track, trackName) {
      var trackKeys = Array.from(track.keys());
      var missingKeys = [];
      var requiredKeys = ['track', 'shortLabel'];
      requiredKeys.forEach(function (key) {
        if (!trackKeys.includes(key)) missingKeys.push(key);
      });
      if (missingKeys.length > 0)
      throw new Error("Track ".concat(
      trackName, " is missing required key(s): ").concat(missingKeys.join(
      ', ')));


      var parentTrackKeys = [
      'superTrack',
      'compositeTrack',
      'container',
      'view'];

      if (!trackKeys.some(function (key) {return parentTrackKeys.includes(key);})) {
        if (!trackKeys.includes('bigDataUrl'))
        throw new Error("Track ".concat(
        trackName, " is missing required key \"bigDataUrl\""));

        if (!trackKeys.includes('type')) {
          var settings = _this.settings(trackName);
          var settingsKeys = Array.from(settings.keys());
          if (!settingsKeys.includes('type'))
          throw new Error("Neither track ".concat(
          trackName, " nor any of its parent tracks have the required key \"type\""));

        }
      }
      var indent = '';
      var currentTrackName = trackName;
      do {
        currentTrackName = _this.get(currentTrackName).get('parent');
        if (currentTrackName) {
          ;var _currentTrackName$spl = currentTrackName.split(' ');var _currentTrackName$spl2 = (0, _slicedToArray2.default)(_currentTrackName$spl, 1);currentTrackName = _currentTrackName$spl2[0];
          indent += '    ';
        }
      } while (currentTrackName);
      var currentTrack = _this.get(trackName);
      currentTrack.indent = indent;
      _this.set(trackName, currentTrack);
    });return _this;
  }

  /**
     * Gets all track entries including those of parent tracks, with closer
     * entries overriding more distant ones
     * @param {string} trackName The name of a track
     * @throws {Error} Throws if track name does not exist in the trackDb
     */(0, _createClass2.default)(TrackDbFile, [{ key: "settings", value: function settings(
    trackName) {var _this2 = this;
      if (!this.has(trackName))
      throw new Error("Track ".concat(trackName, " does not exist"));
      var parentTracks = [trackName];
      var currentTrackName = trackName;
      do {
        currentTrackName = this.get(currentTrackName).get('parent');
        if (currentTrackName) parentTracks.push(currentTrackName);
      } while (currentTrackName);
      var settings = new Map();
      parentTracks.reverse();
      parentTracks.forEach(function (parentTrack) {
        _this2.get(parentTrack).forEach(function (value, key) {
          settings.set(key, value);
        });
      });
      return settings;
    } }]);return TrackDbFile;}(RaFile);


module.exports = TrackDbFile;