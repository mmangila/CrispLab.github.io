"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.filterUndef = filterUndef;
exports.BigBed = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _binaryParser = require("@gmod/binary-parser");

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _abortablePromiseCache = _interopRequireDefault(require("abortable-promise-cache"));

var _quickLru = _interopRequireDefault(require("quick-lru"));

var _bbi = require("./bbi");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function filterUndef(ts) {
  return ts.filter(function (t) {
    return !!t;
  });
}

var BigBed = /*#__PURE__*/function (_BBI) {
  (0, _inherits2.default)(BigBed, _BBI);

  var _super = _createSuper(BigBed);

  function BigBed(opts) {
    var _this;

    (0, _classCallCheck2.default)(this, BigBed);
    _this = _super.call(this, opts);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "readIndicesCache", new _abortablePromiseCache.default({
      cache: new _quickLru.default({
        maxSize: 1
      }),
      fill: function () {
        var _fill = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(args, signal) {
          return _regenerator.default.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  return _context.abrupt("return", _this._readIndices(_objectSpread(_objectSpread({}, args), {}, {
                    signal: signal
                  })));

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        function fill(_x, _x2) {
          return _fill.apply(this, arguments);
        }

        return fill;
      }()
    }));
    return _this;
  }

  (0, _createClass2.default)(BigBed, [{
    key: "readIndices",
    value: function readIndices() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var options = 'aborted' in opts ? {
        signal: opts
      } : opts;
      return this.readIndicesCache.get(JSON.stringify(options), options, options.signal);
    }
    /*
     * retrieve unzoomed view for any scale
     * @param scale - unused
     * @param abortSignal - an optional AbortSignal to kill operation
     * @return promise for a BlockView
     */

  }, {
    key: "getView",
    value: function () {
      var _getView = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(scale, opts) {
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", this.getUnzoomedView(opts));

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getView(_x3, _x4) {
        return _getView.apply(this, arguments);
      }

      return getView;
    }()
    /*
     * parse the bigbed extraIndex fields
     * @param abortSignal to abort operation
     * @return a Promise for an array of Index data structure since there can be multiple extraIndexes in a bigbed, see bedToBigBed documentation
     */

  }, {
    key: "_readIndices",
    value: function () {
      var _readIndices2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(opts) {
        var _yield$this$getHeader, extHeaderOffset, isBigEndian, _yield$this$bbi$read, data, le, ret, count, offset, blocklen, len, _yield$this$bbi$read2, buffer, extParser, indices, i;

        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.getHeader(opts);

              case 2:
                _yield$this$getHeader = _context3.sent;
                extHeaderOffset = _yield$this$getHeader.extHeaderOffset;
                isBigEndian = _yield$this$getHeader.isBigEndian;
                _context3.next = 7;
                return this.bbi.read(Buffer.alloc(64), 0, 64, extHeaderOffset);

              case 7:
                _yield$this$bbi$read = _context3.sent;
                data = _yield$this$bbi$read.buffer;
                le = isBigEndian ? 'big' : 'little';
                ret = new _binaryParser.Parser().endianess(le).uint16('size').uint16('count').uint64('offset').parse(data).result;
                count = ret.count, offset = ret.offset; // no extra index is defined if count==0

                if (!(count === 0)) {
                  _context3.next = 14;
                  break;
                }

                return _context3.abrupt("return", []);

              case 14:
                blocklen = 20;
                len = blocklen * count;
                _context3.next = 18;
                return this.bbi.read(Buffer.alloc(len), 0, len, offset);

              case 18:
                _yield$this$bbi$read2 = _context3.sent;
                buffer = _yield$this$bbi$read2.buffer;
                extParser = new _binaryParser.Parser().endianess(le).int16('type').int16('fieldcount').uint64('offset').skip(4).int16('field');
                indices = [];

                for (i = 0; i < count; i += 1) {
                  indices.push(extParser.parse(buffer.slice(i * blocklen)).result);
                }

                return _context3.abrupt("return", indices);

              case 24:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function _readIndices(_x5) {
        return _readIndices2.apply(this, arguments);
      }

      return _readIndices;
    }()
    /*
     * perform a search in the bigbed extraIndex to find which blocks in the bigbed data to look for the
     * actual feature data
     *
     * @param name - the name to search for
     * @param opts - a SearchOptions argument with optional signal
     * @return a Promise for an array of bigbed block Loc entries
     */

  }, {
    key: "searchExtraIndexBlocks",
    value: function () {
      var _searchExtraIndexBlocks = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6(name) {
        var _this2 = this;

        var opts,
            _yield$this$getHeader2,
            isBigEndian,
            indices,
            locs,
            _args6 = arguments;

        return _regenerator.default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                opts = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : {};
                _context6.next = 3;
                return this.getHeader(opts);

              case 3:
                _yield$this$getHeader2 = _context6.sent;
                isBigEndian = _yield$this$getHeader2.isBigEndian;
                _context6.next = 7;
                return this.readIndices(opts);

              case 7:
                indices = _context6.sent;

                if (indices.length) {
                  _context6.next = 10;
                  break;
                }

                return _context6.abrupt("return", []);

              case 10:
                locs = indices.map( /*#__PURE__*/function () {
                  var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5(index) {
                    var offset, field, _yield$_this2$bbi$rea, data, p, _p$parse$result, blockSize, keySize, valSize, bpt, bptReadNode, rootNodeOffset;

                    return _regenerator.default.wrap(function _callee5$(_context5) {
                      while (1) {
                        switch (_context5.prev = _context5.next) {
                          case 0:
                            offset = index.offset, field = index.field;
                            _context5.next = 3;
                            return _this2.bbi.read(Buffer.alloc(32), 0, 32, offset, opts);

                          case 3:
                            _yield$_this2$bbi$rea = _context5.sent;
                            data = _yield$_this2$bbi$rea.buffer;
                            p = new _binaryParser.Parser().endianess(isBigEndian ? 'big' : 'little').int32('magic').int32('blockSize').int32('keySize').int32('valSize').uint64('itemCount');
                            _p$parse$result = p.parse(data).result, blockSize = _p$parse$result.blockSize, keySize = _p$parse$result.keySize, valSize = _p$parse$result.valSize;
                            bpt = new _binaryParser.Parser().endianess(isBigEndian ? 'big' : 'little').int8('nodeType').skip(1).int16('cnt').choice({
                              tag: 'nodeType',
                              choices: {
                                0: new _binaryParser.Parser().array('leafkeys', {
                                  length: 'cnt',
                                  type: new _binaryParser.Parser().string('key', {
                                    length: keySize,
                                    stripNull: true
                                  }).uint64('offset')
                                }),
                                1: new _binaryParser.Parser().array('keys', {
                                  length: 'cnt',
                                  type: new _binaryParser.Parser().string('key', {
                                    length: keySize,
                                    stripNull: true
                                  }).uint64('offset').uint32('length').uint32('reserved')
                                })
                              }
                            });

                            bptReadNode = /*#__PURE__*/function () {
                              var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4(nodeOffset) {
                                var len, _yield$_this2$bbi$rea2, buffer, node, lastOffset, i, key, _i;

                                return _regenerator.default.wrap(function _callee4$(_context4) {
                                  while (1) {
                                    switch (_context4.prev = _context4.next) {
                                      case 0:
                                        len = 4 + blockSize * (keySize + valSize);
                                        _context4.next = 3;
                                        return _this2.bbi.read(Buffer.alloc(len), 0, len, nodeOffset, opts);

                                      case 3:
                                        _yield$_this2$bbi$rea2 = _context4.sent;
                                        buffer = _yield$_this2$bbi$rea2.buffer;
                                        node = bpt.parse(buffer).result;

                                        if (!node.leafkeys) {
                                          _context4.next = 17;
                                          break;
                                        }

                                        i = 0;

                                      case 8:
                                        if (!(i < node.leafkeys.length)) {
                                          _context4.next = 16;
                                          break;
                                        }

                                        key = node.leafkeys[i].key;

                                        if (!(name.localeCompare(key) < 0 && lastOffset)) {
                                          _context4.next = 12;
                                          break;
                                        }

                                        return _context4.abrupt("return", bptReadNode(lastOffset));

                                      case 12:
                                        lastOffset = node.leafkeys[i].offset;

                                      case 13:
                                        i += 1;
                                        _context4.next = 8;
                                        break;

                                      case 16:
                                        return _context4.abrupt("return", bptReadNode(lastOffset));

                                      case 17:
                                        _i = 0;

                                      case 18:
                                        if (!(_i < node.keys.length)) {
                                          _context4.next = 24;
                                          break;
                                        }

                                        if (!(node.keys[_i].key === name)) {
                                          _context4.next = 21;
                                          break;
                                        }

                                        return _context4.abrupt("return", _objectSpread(_objectSpread({}, node.keys[_i]), {}, {
                                          field: field
                                        }));

                                      case 21:
                                        _i += 1;
                                        _context4.next = 18;
                                        break;

                                      case 24:
                                        return _context4.abrupt("return", undefined);

                                      case 25:
                                      case "end":
                                        return _context4.stop();
                                    }
                                  }
                                }, _callee4);
                              }));

                              return function bptReadNode(_x8) {
                                return _ref2.apply(this, arguments);
                              };
                            }();

                            rootNodeOffset = 32;
                            return _context5.abrupt("return", bptReadNode(offset + rootNodeOffset));

                          case 11:
                          case "end":
                            return _context5.stop();
                        }
                      }
                    }, _callee5);
                  }));

                  return function (_x7) {
                    return _ref.apply(this, arguments);
                  };
                }());
                _context6.t0 = filterUndef;
                _context6.next = 14;
                return Promise.all(locs);

              case 14:
                _context6.t1 = _context6.sent;
                return _context6.abrupt("return", (0, _context6.t0)(_context6.t1));

              case 16:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function searchExtraIndexBlocks(_x6) {
        return _searchExtraIndexBlocks.apply(this, arguments);
      }

      return searchExtraIndexBlocks;
    }()
    /*
     * retrieve the features from the bigbed data that were found through the lookup of the extraIndex
     * note that there can be multiple extraIndex, see the BigBed specification and the -extraIndex argument to bedToBigBed
     *
     * @param name - the name to search for
     * @param opts - a SearchOptions argument with optional signal
     * @return a Promise for an array of Feature
     */

  }, {
    key: "searchExtraIndex",
    value: function () {
      var _searchExtraIndex = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7(name) {
        var opts,
            blocks,
            view,
            res,
            ret,
            _args7 = arguments;
        return _regenerator.default.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                opts = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {};
                _context7.next = 3;
                return this.searchExtraIndexBlocks(name, opts);

              case 3:
                blocks = _context7.sent;

                if (blocks.length) {
                  _context7.next = 6;
                  break;
                }

                return _context7.abrupt("return", []);

              case 6:
                _context7.next = 8;
                return this.getUnzoomedView(opts);

              case 8:
                view = _context7.sent;
                res = blocks.map(function (block) {
                  return new _rxjs.Observable(function (observer) {
                    view.readFeatures(observer, [block], opts);
                  }).pipe((0, _operators.reduce)(function (acc, curr) {
                    return acc.concat(curr);
                  }), (0, _operators.map)(function (x) {
                    for (var i = 0; i < x.length; i += 1) {
                      x[i].field = block.field; // eslint-disable-line
                    }

                    return x;
                  }));
                });
                _context7.next = 12;
                return _rxjs.merge.apply(void 0, (0, _toConsumableArray2.default)(res)).toPromise();

              case 12:
                ret = _context7.sent;
                return _context7.abrupt("return", ret.filter(function (f) {
                  return f.rest.split('\t')[f.field - 3] === name;
                }));

              case 14:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function searchExtraIndex(_x9) {
        return _searchExtraIndex.apply(this, arguments);
      }

      return searchExtraIndex;
    }()
  }]);
  return BigBed;
}(_bbi.BBI);

exports.BigBed = BigBed;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,