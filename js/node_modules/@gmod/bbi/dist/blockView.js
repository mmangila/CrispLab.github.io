"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlockView = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _binaryParser = require("@gmod/binary-parser");

var _abortablePromiseCache = _interopRequireDefault(require("abortable-promise-cache"));

var _zlib = _interopRequireDefault(require("zlib"));

var _quickLru = _interopRequireDefault(require("quick-lru"));

var _range = _interopRequireDefault(require("./range"));

var _util = require("./util");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var BIG_WIG_TYPE_GRAPH = 1;
var BIG_WIG_TYPE_VSTEP = 2;
var BIG_WIG_TYPE_FSTEP = 3;

function getParsers(isBigEndian) {
  var _choices;

  var le = isBigEndian ? 'big' : 'little';
  var summaryParser = new _binaryParser.Parser().endianess(le).uint32('chromId').uint32('start').uint32('end').uint32('validCnt').float('minScore').float('maxScore').float('sumData').float('sumSqData');
  var leafParser = new _binaryParser.Parser().endianess(le).uint8('isLeaf').skip(1).uint16('cnt').choice({
    tag: 'isLeaf',
    choices: {
      1: new _binaryParser.Parser().array('blocksToFetch', {
        length: 'cnt',
        type: new _binaryParser.Parser().uint32('startChrom').uint32('startBase').uint32('endChrom').uint32('endBase').uint64('blockOffset').uint64('blockSize')
      }),
      0: new _binaryParser.Parser().array('recurOffsets', {
        length: 'cnt',
        type: new _binaryParser.Parser().uint32('startChrom').uint32('startBase').uint32('endChrom').uint32('endBase').uint64('blockOffset')
      })
    }
  });
  var bigBedParser = new _binaryParser.Parser().endianess(le).uint32('chromId').int32('start').int32('end').string('rest', {
    zeroTerminated: true
  });
  var bigWigParser = new _binaryParser.Parser().endianess(le).skip(4).int32('blockStart').skip(4).uint32('itemStep').uint32('itemSpan').uint8('blockType').skip(1).uint16('itemCount').choice({
    tag: 'blockType',
    choices: (_choices = {}, (0, _defineProperty2.default)(_choices, BIG_WIG_TYPE_FSTEP, new _binaryParser.Parser().array('items', {
      length: 'itemCount',
      type: new _binaryParser.Parser().float('score')
    })), (0, _defineProperty2.default)(_choices, BIG_WIG_TYPE_VSTEP, new _binaryParser.Parser().array('items', {
      length: 'itemCount',
      type: new _binaryParser.Parser().int32('start').float('score')
    })), (0, _defineProperty2.default)(_choices, BIG_WIG_TYPE_GRAPH, new _binaryParser.Parser().array('items', {
      length: 'itemCount',
      type: new _binaryParser.Parser().int32('start').int32('end').float('score')
    })), _choices)
  });
  return {
    bigWigParser: bigWigParser,
    bigBedParser: bigBedParser,
    summaryParser: summaryParser,
    leafParser: leafParser
  };
}
/**
 * View into a subset of the data in a BigWig file.
 *
 * Adapted by Robert Buels and Colin Diesh from bigwig.js in the Dalliance Genome
 * Explorer by Thomas Down.
 * @constructs
 */


var BlockView = /*#__PURE__*/function () {
  function BlockView(bbi, refsByName, cirTreeOffset, cirTreeLength, isBigEndian, isCompressed, blockType) {
    var _this = this;

    (0, _classCallCheck2.default)(this, BlockView);
    (0, _defineProperty2.default)(this, "cirTreeOffset", void 0);
    (0, _defineProperty2.default)(this, "cirTreeLength", void 0);
    (0, _defineProperty2.default)(this, "bbi", void 0);
    (0, _defineProperty2.default)(this, "isCompressed", void 0);
    (0, _defineProperty2.default)(this, "isBigEndian", void 0);
    (0, _defineProperty2.default)(this, "refsByName", void 0);
    (0, _defineProperty2.default)(this, "blockType", void 0);
    (0, _defineProperty2.default)(this, "cirTreePromise", void 0);
    (0, _defineProperty2.default)(this, "featureCache", new _abortablePromiseCache.default({
      cache: new _quickLru.default({
        maxSize: 1000
      }),
      fill: function () {
        var _fill = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(requestData, signal) {
          var length, offset, _yield$_this$bbi$read, buffer;

          return _regenerator.default.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  length = requestData.length, offset = requestData.offset;
                  _context.next = 3;
                  return _this.bbi.read(Buffer.alloc(length), 0, length, offset, {
                    signal: signal
                  });

                case 3:
                  _yield$_this$bbi$read = _context.sent;
                  buffer = _yield$_this$bbi$read.buffer;
                  return _context.abrupt("return", buffer);

                case 6:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        function fill(_x, _x2) {
          return _fill.apply(this, arguments);
        }

        return fill;
      }()
    }));
    (0, _defineProperty2.default)(this, "leafParser", void 0);
    (0, _defineProperty2.default)(this, "bigWigParser", void 0);
    (0, _defineProperty2.default)(this, "bigBedParser", void 0);
    (0, _defineProperty2.default)(this, "summaryParser", void 0);
    if (!(cirTreeOffset >= 0)) throw new Error('invalid cirTreeOffset!');
    if (!(cirTreeLength > 0)) throw new Error('invalid cirTreeLength!');
    this.cirTreeOffset = cirTreeOffset;
    this.cirTreeLength = cirTreeLength;
    this.isCompressed = isCompressed;
    this.refsByName = refsByName;
    this.isBigEndian = isBigEndian;
    this.bbi = bbi;
    this.blockType = blockType;
    Object.assign(this, getParsers(isBigEndian));
  }

  (0, _createClass2.default)(BlockView, [{
    key: "readWigData",
    value: function () {
      var _readWigData = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(chrName, start, end, observer, opts) {
        var _this2 = this;

        var refsByName, bbi, cirTreeOffset, isBigEndian, signal, chrId, request, _yield$this$cirTreePr, buffer, cirBlockSize, blocksToFetch, outstanding, cirFobRecur2, filterFeats, cirFobStartFetch, cirFobRecur;

        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.prev = 0;
                refsByName = this.refsByName, bbi = this.bbi, cirTreeOffset = this.cirTreeOffset, isBigEndian = this.isBigEndian;
                signal = opts.signal;
                chrId = refsByName[chrName];

                if (chrId === undefined) {
                  observer.complete();
                }

                request = {
                  chrId: chrId,
                  start: start,
                  end: end
                };

                if (!this.cirTreePromise) {
                  this.cirTreePromise = bbi.read(Buffer.alloc(48), 0, 48, cirTreeOffset, {
                    signal: signal
                  });
                }

                _context3.next = 9;
                return this.cirTreePromise;

              case 9:
                _yield$this$cirTreePr = _context3.sent;
                buffer = _yield$this$cirTreePr.buffer;
                cirBlockSize = isBigEndian ? buffer.readUInt32BE(4) : buffer.readUInt32LE(4);
                blocksToFetch = [];
                outstanding = 0; //eslint-disable-next-line prefer-const

                filterFeats = function filterFeats(b) {
                  return (b.startChrom < chrId || b.startChrom === chrId && b.startBase <= end) && (b.endChrom > chrId || b.endChrom === chrId && b.endBase >= start);
                };

                cirFobStartFetch = /*#__PURE__*/function () {
                  var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(off, fr, level) {
                    var length, offset, resultBuffer, i;
                    return _regenerator.default.wrap(function _callee2$(_context2) {
                      while (1) {
                        switch (_context2.prev = _context2.next) {
                          case 0:
                            _context2.prev = 0;
                            length = fr.max() - fr.min();
                            offset = fr.min();
                            _context2.next = 5;
                            return _this2.featureCache.get("".concat(length, "_").concat(offset), {
                              length: length,
                              offset: offset
                            }, signal);

                          case 5:
                            resultBuffer = _context2.sent;

                            for (i = 0; i < off.length; i += 1) {
                              if (fr.contains(off[i])) {
                                cirFobRecur2(resultBuffer, off[i] - offset, level, observer, opts);
                                outstanding -= 1;

                                if (outstanding === 0) {
                                  _this2.readFeatures(observer, blocksToFetch, _objectSpread(_objectSpread({}, opts), {}, {
                                    request: request
                                  }));
                                }
                              }
                            }

                            _context2.next = 12;
                            break;

                          case 9:
                            _context2.prev = 9;
                            _context2.t0 = _context2["catch"](0);
                            observer.error(_context2.t0);

                          case 12:
                          case "end":
                            return _context2.stop();
                        }
                      }
                    }, _callee2, null, [[0, 9]]);
                  }));

                  return function cirFobStartFetch(_x8, _x9, _x10) {
                    return _ref.apply(this, arguments);
                  };
                }();

                cirFobRecur = function cirFobRecur(offset, level) {
                  try {
                    outstanding += offset.length;
                    var maxCirBlockSpan = 4 + cirBlockSize * 32; // Upper bound on size, based on a completely full leaf node.

                    var spans = new _range.default(offset[0], offset[0] + maxCirBlockSpan);

                    for (var i = 1; i < offset.length; i += 1) {
                      var blockSpan = new _range.default(offset[i], offset[i] + maxCirBlockSpan);
                      spans = spans.union(blockSpan);
                    }

                    spans.getRanges().map(function (fr) {
                      return cirFobStartFetch(offset, fr, level);
                    });
                  } catch (e) {
                    observer.error(e);
                  }
                };

                cirFobRecur2 = function cirFobRecur2(cirBlockData, offset, level) {
                  try {
                    var data = cirBlockData.slice(offset);

                    var p = _this2.leafParser.parse(data).result;

                    if (p.blocksToFetch) {
                      blocksToFetch = blocksToFetch.concat(p.blocksToFetch.filter(filterFeats).map(function (l) {
                        return {
                          offset: l.blockOffset,
                          length: l.blockSize
                        };
                      }));
                    }

                    if (p.recurOffsets) {
                      var recurOffsets = p.recurOffsets.filter(filterFeats).map(function (l) {
                        return l.blockOffset;
                      });

                      if (recurOffsets.length > 0) {
                        cirFobRecur(recurOffsets, level + 1);
                      }
                    }
                  } catch (e) {
                    observer.error(e);
                  }
                };

                return _context3.abrupt("return", cirFobRecur([cirTreeOffset + 48], 1));

              case 21:
                _context3.prev = 21;
                _context3.t0 = _context3["catch"](0);
                observer.error(_context3.t0);

              case 24:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this, [[0, 21]]);
      }));

      function readWigData(_x3, _x4, _x5, _x6, _x7) {
        return _readWigData.apply(this, arguments);
      }

      return readWigData;
    }()
  }, {
    key: "parseSummaryBlock",
    value: function parseSummaryBlock(data, startOffset, request) {
      var features = [];
      var currOffset = startOffset;

      while (currOffset < data.byteLength) {
        var res = this.summaryParser.parse(data.slice(currOffset));
        features.push(res.result);
        currOffset += res.offset;
      }

      var items = features;
      if (request) items = items.filter(function (elt) {
        return elt.chromId === request.chrId;
      });
      items = items.map(function (elt) {
        return {
          start: elt.start,
          end: elt.end,
          maxScore: elt.maxScore,
          minScore: elt.minScore,
          score: elt.sumData / (elt.validCnt || 1),
          summary: true
        };
      });
      return request ? items.filter(function (f) {
        return BlockView.coordFilter(f, request);
      }) : items;
    }
  }, {
    key: "parseBigBedBlock",
    value: function parseBigBedBlock(data, startOffset, offset, request) {
      var items = [];
      var currOffset = startOffset;

      while (currOffset < data.byteLength) {
        var res = this.bigBedParser.parse(data.slice(currOffset));
        res.result.uniqueId = "bb-".concat(offset + currOffset);
        items.push(res.result);
        currOffset += res.offset;
      }

      return request ? items.filter(function (f) {
        return BlockView.coordFilter(f, request);
      }) : items;
    }
  }, {
    key: "parseBigWigBlock",
    value: function parseBigWigBlock(bytes, startOffset, request) {
      var data = bytes.slice(startOffset);
      var results = this.bigWigParser.parse(data).result;
      var items = results.items,
          itemSpan = results.itemSpan,
          itemStep = results.itemStep,
          blockStart = results.blockStart,
          blockType = results.blockType;

      if (blockType === BIG_WIG_TYPE_FSTEP) {
        for (var i = 0; i < items.length; i++) {
          items[i].start = blockStart + i * itemStep;
          items[i].end = blockStart + i * itemStep + itemSpan;
        }
      } else if (blockType === BIG_WIG_TYPE_VSTEP) {
        for (var _i = 0; _i < items.length; _i++) {
          items[_i].end = items[_i].start + itemSpan;
        }
      }

      return request ? items.filter(function (f) {
        return BlockView.coordFilter(f, request);
      }) : items;
    }
  }, {
    key: "readFeatures",
    value: function () {
      var _readFeatures = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5(observer, blocks) {
        var _this3 = this;

        var opts,
            blockType,
            isCompressed,
            signal,
            request,
            blockGroupsToFetch,
            _args5 = arguments;
        return _regenerator.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                opts = _args5.length > 2 && _args5[2] !== undefined ? _args5[2] : {};
                _context5.prev = 1;
                blockType = this.blockType, isCompressed = this.isCompressed;
                signal = opts.signal, request = opts.request;
                blockGroupsToFetch = (0, _util.groupBlocks)(blocks);
                (0, _util.checkAbortSignal)(signal);
                _context5.next = 8;
                return Promise.all(blockGroupsToFetch.map( /*#__PURE__*/function () {
                  var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4(blockGroup) {
                    var length, offset, data;
                    return _regenerator.default.wrap(function _callee4$(_context4) {
                      while (1) {
                        switch (_context4.prev = _context4.next) {
                          case 0:
                            (0, _util.checkAbortSignal)(signal);
                            length = blockGroup.length, offset = blockGroup.offset;
                            _context4.next = 4;
                            return _this3.featureCache.get("".concat(length, "_").concat(offset), blockGroup, signal);

                          case 4:
                            data = _context4.sent;
                            blockGroup.blocks.forEach(function (block) {
                              (0, _util.checkAbortSignal)(signal);
                              var blockOffset = block.offset - blockGroup.offset;
                              var resultData = data;

                              if (isCompressed) {
                                resultData = _zlib.default.inflateSync(data.slice(blockOffset));
                                blockOffset = 0;
                              }

                              (0, _util.checkAbortSignal)(signal);

                              switch (blockType) {
                                case 'summary':
                                  observer.next(_this3.parseSummaryBlock(resultData, blockOffset, request));
                                  break;

                                case 'bigwig':
                                  observer.next(_this3.parseBigWigBlock(resultData, blockOffset, request));
                                  break;

                                case 'bigbed':
                                  observer.next( // eslint-disable-next-line no-bitwise
                                  _this3.parseBigBedBlock(resultData, blockOffset, block.offset * (1 << 8), request));
                                  break;

                                default:
                                  console.warn("Don't know what to do with ".concat(blockType));
                              }
                            });

                          case 6:
                          case "end":
                            return _context4.stop();
                        }
                      }
                    }, _callee4);
                  }));

                  return function (_x13) {
                    return _ref2.apply(this, arguments);
                  };
                }()));

              case 8:
                observer.complete();
                _context5.next = 14;
                break;

              case 11:
                _context5.prev = 11;
                _context5.t0 = _context5["catch"](1);
                observer.error(_context5.t0);

              case 14:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this, [[1, 11]]);
      }));

      function readFeatures(_x11, _x12) {
        return _readFeatures.apply(this, arguments);
      }

      return readFeatures;
    }()
  }], [{
    key: "coordFilter",
    value: function coordFilter(f, range) {
      return f.start < range.end && f.end >= range.start;
    }
  }]);
  return BlockView;
}();

exports.BlockView = BlockView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,