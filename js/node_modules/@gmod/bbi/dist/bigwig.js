"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BigWig = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _blockView = require("./blockView");

var _bbi = require("./bbi");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var BigWig = /*#__PURE__*/function (_BBI) {
  (0, _inherits2.default)(BigWig, _BBI);

  var _super = _createSuper(BigWig);

  function BigWig() {
    (0, _classCallCheck2.default)(this, BigWig);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(BigWig, [{
    key: "getView",

    /**
     * Retrieves a BlockView of a specific zoomLevel
     *
     * @param refName - The chromosome name
     * @param start - The start of a region
     * @param end - The end of a region
     * @param opts - An object containing basesPerSpan (e.g. pixels per basepair) or scale used to infer the zoomLevel to use
     */
    value: function () {
      var _getView = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(scale, opts) {
        var _yield$this$getHeader, zoomLevels, refsByName, fileSize, isBigEndian, uncompressBufSize, basesPerPx, maxLevel, i, zh, indexLength;

        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.getHeader(opts);

              case 2:
                _yield$this$getHeader = _context.sent;
                zoomLevels = _yield$this$getHeader.zoomLevels;
                refsByName = _yield$this$getHeader.refsByName;
                fileSize = _yield$this$getHeader.fileSize;
                isBigEndian = _yield$this$getHeader.isBigEndian;
                uncompressBufSize = _yield$this$getHeader.uncompressBufSize;
                basesPerPx = 1 / scale;
                maxLevel = zoomLevels.length;

                if (!fileSize) {
                  // if we don't know the file size, we can't fetch the highest zoom level :-(
                  maxLevel -= 1;
                }

                i = maxLevel;

              case 12:
                if (!(i >= 0)) {
                  _context.next = 20;
                  break;
                }

                zh = zoomLevels[i];

                if (!(zh && zh.reductionLevel <= 2 * basesPerPx)) {
                  _context.next = 17;
                  break;
                }

                indexLength = i < zoomLevels.length - 1 ? zoomLevels[i + 1].dataOffset - zh.indexOffset : fileSize - 4 - zh.indexOffset;
                return _context.abrupt("return", new _blockView.BlockView(this.bbi, refsByName, zh.indexOffset, indexLength, isBigEndian, uncompressBufSize > 0, 'summary'));

              case 17:
                i -= 1;
                _context.next = 12;
                break;

              case 20:
                return _context.abrupt("return", this.getUnzoomedView(opts));

              case 21:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getView(_x, _x2) {
        return _getView.apply(this, arguments);
      }

      return getView;
    }()
  }]);
  return BigWig;
}(_bbi.BBI);

exports.BigWig = BigWig;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9iaWd3aWcudHMiXSwibmFtZXMiOlsiQmlnV2lnIiwic2NhbGUiLCJvcHRzIiwiZ2V0SGVhZGVyIiwiem9vbUxldmVscyIsInJlZnNCeU5hbWUiLCJmaWxlU2l6ZSIsImlzQmlnRW5kaWFuIiwidW5jb21wcmVzc0J1ZlNpemUiLCJiYXNlc1BlclB4IiwibWF4TGV2ZWwiLCJsZW5ndGgiLCJpIiwiemgiLCJyZWR1Y3Rpb25MZXZlbCIsImluZGV4TGVuZ3RoIiwiZGF0YU9mZnNldCIsImluZGV4T2Zmc2V0IiwiQmxvY2tWaWV3IiwiYmJpIiwiZ2V0VW56b29tZWRWaWV3IiwiQkJJIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOzs7Ozs7SUFFYUEsTTs7Ozs7Ozs7Ozs7OztBQUNYOzs7Ozs7Ozs7OEdBUXdCQyxLLEVBQWVDLEk7Ozs7Ozs7O3VCQU8zQixLQUFLQyxTQUFMLENBQWVELElBQWYsQzs7OztBQUxSRSxnQkFBQUEsVSx5QkFBQUEsVTtBQUNBQyxnQkFBQUEsVSx5QkFBQUEsVTtBQUNBQyxnQkFBQUEsUSx5QkFBQUEsUTtBQUNBQyxnQkFBQUEsVyx5QkFBQUEsVztBQUNBQyxnQkFBQUEsaUIseUJBQUFBLGlCO0FBRUlDLGdCQUFBQSxVLEdBQWEsSUFBSVIsSztBQUNuQlMsZ0JBQUFBLFEsR0FBV04sVUFBVSxDQUFDTyxNOztBQUMxQixvQkFBSSxDQUFDTCxRQUFMLEVBQWU7QUFDYjtBQUNBSSxrQkFBQUEsUUFBUSxJQUFJLENBQVo7QUFDRDs7QUFFUUUsZ0JBQUFBLEMsR0FBSUYsUTs7O3NCQUFVRSxDQUFDLElBQUksQzs7Ozs7QUFDcEJDLGdCQUFBQSxFLEdBQUtULFVBQVUsQ0FBQ1EsQ0FBRCxDOztzQkFDakJDLEVBQUUsSUFBSUEsRUFBRSxDQUFDQyxjQUFILElBQXFCLElBQUlMLFU7Ozs7O0FBQzNCTSxnQkFBQUEsVyxHQUNKSCxDQUFDLEdBQUdSLFVBQVUsQ0FBQ08sTUFBWCxHQUFvQixDQUF4QixHQUNJUCxVQUFVLENBQUNRLENBQUMsR0FBRyxDQUFMLENBQVYsQ0FBa0JJLFVBQWxCLEdBQStCSCxFQUFFLENBQUNJLFdBRHRDLEdBRUlYLFFBQVEsR0FBRyxDQUFYLEdBQWVPLEVBQUUsQ0FBQ0ksVztpREFDakIsSUFBSUMsb0JBQUosQ0FDTCxLQUFLQyxHQURBLEVBRUxkLFVBRkssRUFHTFEsRUFBRSxDQUFDSSxXQUhFLEVBSUxGLFdBSkssRUFLTFIsV0FMSyxFQU1MQyxpQkFBaUIsR0FBRyxDQU5mLEVBT0wsU0FQSyxDOzs7QUFQb0JJLGdCQUFBQSxDQUFDLElBQUksQzs7Ozs7aURBa0I3QixLQUFLUSxlQUFMLENBQXFCbEIsSUFBckIsQzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBMUNpQm1CLFEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCbG9ja1ZpZXcgfSBmcm9tICcuL2Jsb2NrVmlldydcbmltcG9ydCB7IEJCSSwgUmVxdWVzdE9wdGlvbnMgfSBmcm9tICcuL2JiaSdcblxuZXhwb3J0IGNsYXNzIEJpZ1dpZyBleHRlbmRzIEJCSSB7XG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgYSBCbG9ja1ZpZXcgb2YgYSBzcGVjaWZpYyB6b29tTGV2ZWxcbiAgICpcbiAgICogQHBhcmFtIHJlZk5hbWUgLSBUaGUgY2hyb21vc29tZSBuYW1lXG4gICAqIEBwYXJhbSBzdGFydCAtIFRoZSBzdGFydCBvZiBhIHJlZ2lvblxuICAgKiBAcGFyYW0gZW5kIC0gVGhlIGVuZCBvZiBhIHJlZ2lvblxuICAgKiBAcGFyYW0gb3B0cyAtIEFuIG9iamVjdCBjb250YWluaW5nIGJhc2VzUGVyU3BhbiAoZS5nLiBwaXhlbHMgcGVyIGJhc2VwYWlyKSBvciBzY2FsZSB1c2VkIHRvIGluZmVyIHRoZSB6b29tTGV2ZWwgdG8gdXNlXG4gICAqL1xuICBwcm90ZWN0ZWQgYXN5bmMgZ2V0VmlldyhzY2FsZTogbnVtYmVyLCBvcHRzOiBSZXF1ZXN0T3B0aW9ucyk6IFByb21pc2U8QmxvY2tWaWV3PiB7XG4gICAgY29uc3Qge1xuICAgICAgem9vbUxldmVscyxcbiAgICAgIHJlZnNCeU5hbWUsXG4gICAgICBmaWxlU2l6ZSxcbiAgICAgIGlzQmlnRW5kaWFuLFxuICAgICAgdW5jb21wcmVzc0J1ZlNpemUsXG4gICAgfSA9IGF3YWl0IHRoaXMuZ2V0SGVhZGVyKG9wdHMpXG4gICAgY29uc3QgYmFzZXNQZXJQeCA9IDEgLyBzY2FsZVxuICAgIGxldCBtYXhMZXZlbCA9IHpvb21MZXZlbHMubGVuZ3RoXG4gICAgaWYgKCFmaWxlU2l6ZSkge1xuICAgICAgLy8gaWYgd2UgZG9uJ3Qga25vdyB0aGUgZmlsZSBzaXplLCB3ZSBjYW4ndCBmZXRjaCB0aGUgaGlnaGVzdCB6b29tIGxldmVsIDotKFxuICAgICAgbWF4TGV2ZWwgLT0gMVxuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSBtYXhMZXZlbDsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgIGNvbnN0IHpoID0gem9vbUxldmVsc1tpXVxuICAgICAgaWYgKHpoICYmIHpoLnJlZHVjdGlvbkxldmVsIDw9IDIgKiBiYXNlc1BlclB4KSB7XG4gICAgICAgIGNvbnN0IGluZGV4TGVuZ3RoID1cbiAgICAgICAgICBpIDwgem9vbUxldmVscy5sZW5ndGggLSAxXG4gICAgICAgICAgICA/IHpvb21MZXZlbHNbaSArIDFdLmRhdGFPZmZzZXQgLSB6aC5pbmRleE9mZnNldFxuICAgICAgICAgICAgOiBmaWxlU2l6ZSAtIDQgLSB6aC5pbmRleE9mZnNldFxuICAgICAgICByZXR1cm4gbmV3IEJsb2NrVmlldyhcbiAgICAgICAgICB0aGlzLmJiaSxcbiAgICAgICAgICByZWZzQnlOYW1lLFxuICAgICAgICAgIHpoLmluZGV4T2Zmc2V0LFxuICAgICAgICAgIGluZGV4TGVuZ3RoLFxuICAgICAgICAgIGlzQmlnRW5kaWFuLFxuICAgICAgICAgIHVuY29tcHJlc3NCdWZTaXplID4gMCxcbiAgICAgICAgICAnc3VtbWFyeScsXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZ2V0VW56b29tZWRWaWV3KG9wdHMpXG4gIH1cbn1cbiJdfQ==