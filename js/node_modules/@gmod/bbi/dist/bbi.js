"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BBI = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _binaryParser = require("@gmod/binary-parser");

var _genericFilehandle = require("generic-filehandle");

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _abortablePromiseCache = _interopRequireDefault(require("abortable-promise-cache"));

var _quickLru = _interopRequireDefault(require("quick-lru"));

var _blockView = require("./blockView");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var BIG_WIG_MAGIC = -2003829722;
var BIG_BED_MAGIC = -2021002517;

/* get the compiled parsers for different sections of the bigwig file
 *
 * @param isBE - is big endian, typically false
 * @return an object with compiled parsers
 */
function getParsers(isBE) {
  var le = isBE ? 'big' : 'little';
  var headerParser = new _binaryParser.Parser().endianess(le).int32('magic').uint16('version').uint16('numZoomLevels').uint64('chromTreeOffset').uint64('unzoomedDataOffset').uint64('unzoomedIndexOffset').uint16('fieldCount').uint16('definedFieldCount').uint64('asOffset') // autoSql offset, used in bigbed
  .uint64('totalSummaryOffset').uint32('uncompressBufSize').uint64('extHeaderOffset') // name index offset, used in bigbed
  .array('zoomLevels', {
    length: 'numZoomLevels',
    type: new _binaryParser.Parser().uint32('reductionLevel').uint32('reserved').uint64('dataOffset').uint64('indexOffset')
  });
  var totalSummaryParser = new _binaryParser.Parser().endianess(le).uint64('basesCovered').double('scoreMin').double('scoreMax').double('scoreSum').double('scoreSumSquares');
  var chromTreeParser = new _binaryParser.Parser().endianess(le).uint32('magic').uint32('blockSize').uint32('keySize').uint32('valSize').uint64('itemCount');
  var isLeafNode = new _binaryParser.Parser().endianess(le).uint8('isLeafNode').skip(1).uint16('cnt');
  return {
    chromTreeParser: chromTreeParser,
    totalSummaryParser: totalSummaryParser,
    headerParser: headerParser,
    isLeafNode: isLeafNode
  };
}

var BBI = /*#__PURE__*/function () {
  (0, _createClass2.default)(BBI, [{
    key: "getHeader",

    /* fetch and parse header information from a bigwig or bigbed file
     * @param abortSignal - abort the operation, can be null
     * @return a Header object
     */
    value: function getHeader() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var options = 'aborted' in opts ? {
        signal: opts
      } : opts;
      return this.headerCache.get(JSON.stringify(options), options, options.signal);
    }
    /*
     * @param filehandle - a filehandle from generic-filehandle or implementing something similar to the node10 fs.promises API
     * @param path - a Local file path as a string
     * @param url - a URL string
     * @param renameRefSeqs - an optional method to rename the internal reference sequences using a mapping function
     */

  }]);

  function BBI() {
    var _this = this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck2.default)(this, BBI);
    (0, _defineProperty2.default)(this, "bbi", void 0);
    (0, _defineProperty2.default)(this, "headerCache", new _abortablePromiseCache.default({
      cache: new _quickLru.default({
        maxSize: 1
      }),
      fill: function () {
        var _fill = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(params, signal) {
          return _regenerator.default.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  return _context.abrupt("return", _this._getHeader(_objectSpread(_objectSpread({}, params), {}, {
                    signal: signal
                  })));

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        function fill(_x, _x2) {
          return _fill.apply(this, arguments);
        }

        return fill;
      }()
    }));
    (0, _defineProperty2.default)(this, "renameRefSeqs", void 0);
    var filehandle = options.filehandle,
        renameRefSeqs = options.renameRefSeqs,
        path = options.path,
        url = options.url;

    this.renameRefSeqs = renameRefSeqs || function (s) {
      return s;
    };

    if (filehandle) {
      this.bbi = filehandle;
    } else if (url) {
      this.bbi = new _genericFilehandle.RemoteFile(url);
    } else if (path) {
      this.bbi = new _genericFilehandle.LocalFile(path);
    } else {
      throw new Error('no file given');
    }
  }

  (0, _createClass2.default)(BBI, [{
    key: "_getHeader",
    value: function () {
      var _getHeader2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(opts) {
        var header, chroms;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this._getMainHeader(opts);

              case 2:
                header = _context2.sent;
                _context2.next = 5;
                return this._readChromTree(header, opts);

              case 5:
                chroms = _context2.sent;
                return _context2.abrupt("return", _objectSpread(_objectSpread({}, header), chroms));

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function _getHeader(_x3) {
        return _getHeader2.apply(this, arguments);
      }

      return _getHeader;
    }()
  }, {
    key: "_getMainHeader",
    value: function () {
      var _getMainHeader2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(opts) {
        var requestSize,
            _yield$this$bbi$read,
            buffer,
            isBigEndian,
            ret,
            header,
            tail,
            _args3 = arguments;

        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                requestSize = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : 2000;
                _context3.next = 3;
                return this.bbi.read(Buffer.alloc(requestSize), 0, requestSize, 0, opts);

              case 3:
                _yield$this$bbi$read = _context3.sent;
                buffer = _yield$this$bbi$read.buffer;
                isBigEndian = this._isBigEndian(buffer);
                ret = getParsers(isBigEndian);
                header = ret.headerParser.parse(buffer).result;
                header.fileType = header.magic === BIG_BED_MAGIC ? 'bigbed' : 'bigwig';

                if (!(header.asOffset > requestSize || header.totalSummaryOffset > requestSize)) {
                  _context3.next = 11;
                  break;
                }

                return _context3.abrupt("return", this._getMainHeader(opts, requestSize * 2));

              case 11:
                if (header.asOffset) {
                  header.autoSql = buffer.slice(header.asOffset, buffer.indexOf(0, header.asOffset)).toString('utf8');
                }

                if (!(header.totalSummaryOffset > requestSize)) {
                  _context3.next = 14;
                  break;
                }

                return _context3.abrupt("return", this._getMainHeader(opts, requestSize * 2));

              case 14:
                if (header.totalSummaryOffset) {
                  tail = buffer.slice(header.totalSummaryOffset);
                  header.totalSummary = ret.totalSummaryParser.parse(tail).result;
                }

                return _context3.abrupt("return", _objectSpread(_objectSpread({}, header), {}, {
                  isBigEndian: isBigEndian
                }));

              case 16:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function _getMainHeader(_x4) {
        return _getMainHeader2.apply(this, arguments);
      }

      return _getMainHeader;
    }()
  }, {
    key: "_isBigEndian",
    value: function _isBigEndian(buffer) {
      var ret = buffer.readInt32LE(0);

      if (ret === BIG_WIG_MAGIC || ret === BIG_BED_MAGIC) {
        return false;
      }

      ret = buffer.readInt32BE(0);

      if (ret === BIG_WIG_MAGIC || ret === BIG_BED_MAGIC) {
        return true;
      }

      throw new Error('not a BigWig/BigBed file');
    } // todo: add progress if long running

  }, {
    key: "_readChromTree",
    value: function () {
      var _readChromTree2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5(header, opts) {
        var _this2 = this;

        var isBE, le, refsByNumber, refsByName, chromTreeOffset, unzoomedDataOffset, _yield$this$bbi$read2, data, p, keySize, leafNodeParser, nonleafNodeParser, rootNodeOffset, bptReadNode;

        return _regenerator.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                isBE = header.isBigEndian;
                le = isBE ? 'big' : 'little';
                refsByNumber = [];
                refsByName = {};
                chromTreeOffset = header.chromTreeOffset;
                unzoomedDataOffset = header.unzoomedDataOffset;

                while (unzoomedDataOffset % 4 !== 0) {
                  unzoomedDataOffset += 1;
                }

                _context5.next = 9;
                return this.bbi.read(Buffer.alloc(unzoomedDataOffset - chromTreeOffset), 0, unzoomedDataOffset - chromTreeOffset, chromTreeOffset, opts);

              case 9:
                _yield$this$bbi$read2 = _context5.sent;
                data = _yield$this$bbi$read2.buffer;
                p = getParsers(isBE);
                keySize = p.chromTreeParser.parse(data).result.keySize;
                leafNodeParser = new _binaryParser.Parser().endianess(le).string('key', {
                  stripNull: true,
                  length: keySize
                }).uint32('refId').uint32('refSize');
                nonleafNodeParser = new _binaryParser.Parser().endianess(le).skip(keySize).uint64('childOffset');
                rootNodeOffset = 32;

                bptReadNode = /*#__PURE__*/function () {
                  var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4(currentOffset) {
                    var offset, ret, _ret$result, isLeafNode, cnt, n, leafRet, _leafRet$result, _key, refId, refSize, refRec, nextNodes, _n, nonleafRet, childOffset;

                    return _regenerator.default.wrap(function _callee4$(_context4) {
                      while (1) {
                        switch (_context4.prev = _context4.next) {
                          case 0:
                            offset = currentOffset;

                            if (!(offset >= data.length)) {
                              _context4.next = 3;
                              break;
                            }

                            throw new Error('reading beyond end of buffer');

                          case 3:
                            ret = p.isLeafNode.parse(data.slice(offset));
                            _ret$result = ret.result, isLeafNode = _ret$result.isLeafNode, cnt = _ret$result.cnt;
                            offset += ret.offset;

                            if (!isLeafNode) {
                              _context4.next = 10;
                              break;
                            }

                            for (n = 0; n < cnt; n += 1) {
                              leafRet = leafNodeParser.parse(data.slice(offset));
                              offset += leafRet.offset;
                              _leafRet$result = leafRet.result, _key = _leafRet$result.key, refId = _leafRet$result.refId, refSize = _leafRet$result.refSize;
                              refRec = {
                                name: _key,
                                id: refId,
                                length: refSize
                              };
                              refsByName[_this2.renameRefSeqs(_key)] = refId;
                              refsByNumber[refId] = refRec;
                            }

                            _context4.next = 14;
                            break;

                          case 10:
                            // parse index node
                            nextNodes = [];

                            for (_n = 0; _n < cnt; _n += 1) {
                              nonleafRet = nonleafNodeParser.parse(data.slice(offset));
                              childOffset = nonleafRet.result.childOffset;
                              offset += nonleafRet.offset;
                              childOffset -= chromTreeOffset;
                              nextNodes.push(bptReadNode(childOffset));
                            }

                            _context4.next = 14;
                            return Promise.all(nextNodes);

                          case 14:
                          case "end":
                            return _context4.stop();
                        }
                      }
                    }, _callee4);
                  }));

                  return function bptReadNode(_x7) {
                    return _ref.apply(this, arguments);
                  };
                }();

                _context5.next = 19;
                return bptReadNode(rootNodeOffset);

              case 19:
                return _context5.abrupt("return", {
                  refsByName: refsByName,
                  refsByNumber: refsByNumber
                });

              case 20:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function _readChromTree(_x5, _x6) {
        return _readChromTree2.apply(this, arguments);
      }

      return _readChromTree;
    }()
    /*
     * fetches the "unzoomed" view of the bigwig data. this is the default for bigbed
     * @param abortSignal - a signal to optionally abort this operation
     */

  }, {
    key: "getUnzoomedView",
    value: function () {
      var _getUnzoomedView = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6(opts) {
        var _yield$this$getHeader, unzoomedIndexOffset, zoomLevels, refsByName, uncompressBufSize, isBigEndian, fileType, nzl, cirLen;

        return _regenerator.default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this.getHeader(opts);

              case 2:
                _yield$this$getHeader = _context6.sent;
                unzoomedIndexOffset = _yield$this$getHeader.unzoomedIndexOffset;
                zoomLevels = _yield$this$getHeader.zoomLevels;
                refsByName = _yield$this$getHeader.refsByName;
                uncompressBufSize = _yield$this$getHeader.uncompressBufSize;
                isBigEndian = _yield$this$getHeader.isBigEndian;
                fileType = _yield$this$getHeader.fileType;
                nzl = zoomLevels[0];
                cirLen = nzl ? nzl.dataOffset - unzoomedIndexOffset : 4000;
                return _context6.abrupt("return", new _blockView.BlockView(this.bbi, refsByName, unzoomedIndexOffset, cirLen, isBigEndian, uncompressBufSize > 0, fileType));

              case 12:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function getUnzoomedView(_x8) {
        return _getUnzoomedView.apply(this, arguments);
      }

      return getUnzoomedView;
    }()
    /*
     * abstract method - get the view for a given scale
     */

  }, {
    key: "getFeatureStream",

    /**
     * Gets features from a BigWig file
     *
     * @param refName - The chromosome name
     * @param start - The start of a region
     * @param end - The end of a region
     * @param opts - An object containing basesPerSpan (e.g. pixels per basepair) or scale used to infer the zoomLevel to use
     */
    value: function () {
      var _getFeatureStream = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7(refName, start, end) {
        var opts,
            chrName,
            view,
            _args7 = arguments;
        return _regenerator.default.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                opts = _args7.length > 3 && _args7[3] !== undefined ? _args7[3] : {
                  scale: 1
                };
                _context7.next = 3;
                return this.getHeader(opts);

              case 3:
                chrName = this.renameRefSeqs(refName);

                if (!opts.basesPerSpan) {
                  _context7.next = 10;
                  break;
                }

                _context7.next = 7;
                return this.getView(1 / opts.basesPerSpan, opts);

              case 7:
                view = _context7.sent;
                _context7.next = 19;
                break;

              case 10:
                if (!opts.scale) {
                  _context7.next = 16;
                  break;
                }

                _context7.next = 13;
                return this.getView(opts.scale, opts);

              case 13:
                view = _context7.sent;
                _context7.next = 19;
                break;

              case 16:
                _context7.next = 18;
                return this.getView(1, opts);

              case 18:
                view = _context7.sent;

              case 19:
                if (view) {
                  _context7.next = 21;
                  break;
                }

                throw new Error('unable to get block view for data');

              case 21:
                return _context7.abrupt("return", new _rxjs.Observable(function (observer) {
                  view.readWigData(chrName, start, end, observer, opts);
                }));

              case 22:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function getFeatureStream(_x9, _x10, _x11) {
        return _getFeatureStream.apply(this, arguments);
      }

      return getFeatureStream;
    }()
  }, {
    key: "getFeatures",
    value: function () {
      var _getFeatures = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee8(refName, start, end) {
        var opts,
            ob,
            ret,
            _args8 = arguments;
        return _regenerator.default.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                opts = _args8.length > 3 && _args8[3] !== undefined ? _args8[3] : {
                  scale: 1
                };
                _context8.next = 3;
                return this.getFeatureStream(refName, start, end, opts);

              case 3:
                ob = _context8.sent;
                _context8.next = 6;
                return ob.pipe((0, _operators.reduce)(function (acc, curr) {
                  return acc.concat(curr);
                })).toPromise();

              case 6:
                ret = _context8.sent;
                return _context8.abrupt("return", ret || []);

              case 8:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function getFeatures(_x12, _x13, _x14) {
        return _getFeatures.apply(this, arguments);
      }

      return getFeatures;
    }()
  }]);
  return BBI;
}();

exports.BBI = BBI;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,