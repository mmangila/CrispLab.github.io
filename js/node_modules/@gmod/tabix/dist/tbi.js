"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _getIterator2 = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/get-iterator"));

var _isArray = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/array/is-array"));

var _iterator2 = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/symbol/iterator"));

var _symbol = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/symbol"));

var _from = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/array/from"));

var _construct = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/reflect/construct"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/slicedToArray"));

var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs2/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _long = _interopRequireDefault(require("long"));

var _virtualOffset = _interopRequireWildcard(require("./virtualOffset"));

var _chunk = _interopRequireDefault(require("./chunk"));

var _bgzfFilehandle = require("@gmod/bgzf-filehandle");

var _util = require("./util");

var _indexFile = _interopRequireDefault(require("./indexFile"));

function _createForOfIteratorHelper(o) { if (typeof _symbol.default === "undefined" || o[_iterator2.default] == null) { if ((0, _isArray.default)(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = (0, _getIterator2.default)(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return (0, _from.default)(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _createSuper(Derived) { return function () { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = (0, _construct.default)(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_construct.default) return false; if (_construct.default.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call((0, _construct.default)(Date, [], function () {})); return true; } catch (e) { return false; } }

var TBI_MAGIC = 21578324; // TBI\1

var TAD_LIDX_SHIFT = 14;
/**
 * calculate the list of bins that may overlap with region [beg,end) (zero-based half-open)
 * @returns {Array[number]}
 */

function reg2bins(beg, end) {
  beg += 1; // < convert to 1-based closed

  end -= 1;
  return [[0, 0], [1 + (beg >> 26), 1 + (end >> 26)], [9 + (beg >> 23), 9 + (end >> 23)], [73 + (beg >> 20), 73 + (end >> 20)], [585 + (beg >> 17), 585 + (end >> 17)], [4681 + (beg >> 14), 4681 + (end >> 14)]];
}

var TabixIndex = /*#__PURE__*/function (_IndexFile) {
  (0, _inherits2.default)(TabixIndex, _IndexFile);

  var _super = _createSuper(TabixIndex);

  function TabixIndex() {
    (0, _classCallCheck2.default)(this, TabixIndex);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(TabixIndex, [{
    key: "lineCount",
    value: function () {
      var _lineCount = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(refName) {
        var opts,
            indexData,
            refId,
            idx,
            stats,
            _args = arguments;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                opts = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
                _context.next = 3;
                return this.parse(opts);

              case 3:
                indexData = _context.sent;

                if (indexData) {
                  _context.next = 6;
                  break;
                }

                return _context.abrupt("return", -1);

              case 6:
                refId = indexData.refNameToId[refName];
                idx = indexData.indices[refId];

                if (idx) {
                  _context.next = 10;
                  break;
                }

                return _context.abrupt("return", -1);

              case 10:
                stats = indexData.indices[refId].stats;

                if (!stats) {
                  _context.next = 13;
                  break;
                }

                return _context.abrupt("return", stats.lineCount);

              case 13:
                return _context.abrupt("return", -1);

              case 14:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function lineCount(_x) {
        return _lineCount.apply(this, arguments);
      }

      return lineCount;
    }() // memoize
    // fetch and parse the index

  }, {
    key: "_parse",
    value: function () {
      var _parse2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
        var _this = this;

        var opts,
            bytes,
            refCount,
            formatFlags,
            coordinateType,
            formatOpts,
            format,
            columnNumbers,
            metaValue,
            depth,
            maxBinNumber,
            maxRefLength,
            metaChar,
            skipLines,
            nameSectionLength,
            _this$_parseNameBytes,
            refNameToId,
            refIdToName,
            currOffset,
            firstDataLine,
            indices,
            _args2 = arguments;

        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                opts = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};
                _context2.t0 = _bgzfFilehandle.unzip;
                _context2.next = 4;
                return this.filehandle.readFile(opts);

              case 4:
                _context2.t1 = _context2.sent;
                _context2.next = 7;
                return (0, _context2.t0)(_context2.t1);

              case 7:
                bytes = _context2.sent;
                (0, _util.checkAbortSignal)(opts.signal); // check TBI magic numbers

                if (!(bytes.readUInt32LE(0) !== TBI_MAGIC
                /* "TBI\1" */
                )) {
                  _context2.next = 11;
                  break;
                }

                throw new Error('Not a TBI file');

              case 11:
                // number of reference sequences in the index
                refCount = bytes.readInt32LE(4);
                formatFlags = bytes.readInt32LE(8);
                coordinateType = formatFlags & 0x10000 ? 'zero-based-half-open' : '1-based-closed';
                formatOpts = {
                  0: 'generic',
                  1: 'SAM',
                  2: 'VCF'
                };
                format = formatOpts[formatFlags & 0xf];

                if (format) {
                  _context2.next = 18;
                  break;
                }

                throw new Error("invalid Tabix preset format flags ".concat(formatFlags));

              case 18:
                columnNumbers = {
                  ref: bytes.readInt32LE(12),
                  start: bytes.readInt32LE(16),
                  end: bytes.readInt32LE(20)
                };
                metaValue = bytes.readInt32LE(24);
                depth = 5;
                maxBinNumber = ((1 << (depth + 1) * 3) - 1) / 7;
                maxRefLength = Math.pow(2, 14 + depth * 3);
                metaChar = metaValue ? String.fromCharCode(metaValue) : null;
                skipLines = bytes.readInt32LE(28); // read sequence dictionary

                nameSectionLength = bytes.readInt32LE(32);
                _this$_parseNameBytes = this._parseNameBytes(bytes.slice(36, 36 + nameSectionLength)), refNameToId = _this$_parseNameBytes.refNameToId, refIdToName = _this$_parseNameBytes.refIdToName; // read the indexes for each reference sequence

                currOffset = 36 + nameSectionLength;
                indices = new Array(refCount).fill(0).map(function () {
                  // the binning index
                  var binCount = bytes.readInt32LE(currOffset);
                  currOffset += 4;
                  var binIndex = {};
                  var stats;

                  for (var j = 0; j < binCount; j += 1) {
                    var bin = bytes.readUInt32LE(currOffset);
                    currOffset += 4;

                    if (bin > maxBinNumber + 1) {
                      throw new Error('tabix index contains too many bins, please use a CSI index');
                    } else if (bin === maxBinNumber + 1) {
                      var chunkCount = bytes.readInt32LE(currOffset);
                      currOffset += 4;

                      if (chunkCount === 2) {
                        stats = _this.parsePseudoBin(bytes, currOffset);
                      }

                      currOffset += 16 * chunkCount;
                    } else {
                      var _chunkCount = bytes.readInt32LE(currOffset);

                      currOffset += 4;
                      var chunks = new Array(_chunkCount);

                      for (var k = 0; k < _chunkCount; k += 1) {
                        var u = (0, _virtualOffset.fromBytes)(bytes, currOffset);
                        var v = (0, _virtualOffset.fromBytes)(bytes, currOffset + 8);
                        currOffset += 16;
                        firstDataLine = _this._findFirstData(firstDataLine, u);
                        chunks[k] = new _chunk.default(u, v, bin);
                      }

                      binIndex[bin] = chunks;
                    }
                  } // the linear index


                  var linearCount = bytes.readInt32LE(currOffset);
                  currOffset += 4;
                  var linearIndex = new Array(linearCount);

                  for (var _k = 0; _k < linearCount; _k += 1) {
                    linearIndex[_k] = (0, _virtualOffset.fromBytes)(bytes, currOffset);
                    currOffset += 8;
                    firstDataLine = _this._findFirstData(firstDataLine, linearIndex[_k]);
                  }

                  return {
                    binIndex: binIndex,
                    linearIndex: linearIndex,
                    stats: stats
                  };
                });
                return _context2.abrupt("return", {
                  indices: indices,
                  metaChar: metaChar,
                  maxBinNumber: maxBinNumber,
                  maxRefLength: maxRefLength,
                  skipLines: skipLines,
                  firstDataLine: firstDataLine,
                  columnNumbers: columnNumbers,
                  coordinateType: coordinateType,
                  format: format,
                  refIdToName: refIdToName,
                  refNameToId: refNameToId,
                  maxBlockSize: 1 << 16
                });

              case 30:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function _parse() {
        return _parse2.apply(this, arguments);
      }

      return _parse;
    }()
  }, {
    key: "parsePseudoBin",
    value: function parsePseudoBin(bytes, offset) {
      var lineCount = (0, _util.longToNumber)(_long.default.fromBytesLE(bytes.slice(offset + 16, offset + 24), true));
      return {
        lineCount: lineCount
      };
    }
  }, {
    key: "_parseNameBytes",
    value: function _parseNameBytes(namesBytes) {
      var currRefId = 0;
      var currNameStart = 0;
      var refIdToName = [];
      var refNameToId = {};

      for (var i = 0; i < namesBytes.length; i += 1) {
        if (!namesBytes[i]) {
          if (currNameStart < i) {
            var refName = namesBytes.toString('utf8', currNameStart, i);
            refName = this.renameRefSeq(refName);
            refIdToName[currRefId] = refName;
            refNameToId[refName] = currRefId;
          }

          currNameStart = i + 1;
          currRefId += 1;
        }
      }

      return {
        refNameToId: refNameToId,
        refIdToName: refIdToName
      };
    }
  }, {
    key: "blocksForRange",
    value: function () {
      var _blocksForRange = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(refName, min, max) {
        var opts,
            indexData,
            refId,
            ba,
            minOffset,
            overlappingBins,
            chunks,
            _iterator,
            _step,
            _step$value,
            start,
            end,
            bin,
            binChunks,
            c,
            nintv,
            lowest,
            minLin,
            maxLin,
            i,
            vp,
            _args3 = arguments;

        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                opts = _args3.length > 3 && _args3[3] !== undefined ? _args3[3] : {};

                if (min < 0) {
                  min = 0;
                }

                _context3.next = 4;
                return this.parse(opts);

              case 4:
                indexData = _context3.sent;

                if (indexData) {
                  _context3.next = 7;
                  break;
                }

                return _context3.abrupt("return", []);

              case 7:
                refId = indexData.refNameToId[refName];
                ba = indexData.indices[refId];

                if (ba) {
                  _context3.next = 11;
                  break;
                }

                return _context3.abrupt("return", []);

              case 11:
                minOffset = ba.linearIndex.length ? ba.linearIndex[min >> TAD_LIDX_SHIFT >= ba.linearIndex.length ? ba.linearIndex.length - 1 : min >> TAD_LIDX_SHIFT] : new _virtualOffset.default(0, 0);

                if (!minOffset) {
                  console.warn('querying outside of possible tabix range');
                } // const { linearIndex, binIndex } = indexes


                overlappingBins = reg2bins(min, max); // List of bin #s that overlap min, max

                chunks = []; // Find chunks in overlapping bins.  Leaf bins (< 4681) are not pruned

                _iterator = _createForOfIteratorHelper(overlappingBins);

                try {
                  for (_iterator.s(); !(_step = _iterator.n()).done;) {
                    _step$value = (0, _slicedToArray2.default)(_step.value, 2), start = _step$value[0], end = _step$value[1];

                    for (bin = start; bin <= end; bin++) {
                      if (ba.binIndex[bin]) {
                        binChunks = ba.binIndex[bin];

                        for (c = 0; c < binChunks.length; ++c) {
                          chunks.push(new _chunk.default(binChunks[c].minv, binChunks[c].maxv, bin));
                        }
                      }
                    }
                  } // Use the linear index to find minimum file position of chunks that could contain alignments in the region

                } catch (err) {
                  _iterator.e(err);
                } finally {
                  _iterator.f();
                }

                nintv = ba.linearIndex.length;
                lowest = null;
                minLin = Math.min(min >> 14, nintv - 1);
                maxLin = Math.min(max >> 14, nintv - 1);

                for (i = minLin; i <= maxLin; ++i) {
                  vp = ba.linearIndex[i];

                  if (vp) {
                    if (!lowest || vp.compareTo(lowest) < 0) {
                      lowest = vp;
                    }
                  }
                }

                return _context3.abrupt("return", (0, _util.optimizeChunks)(chunks, lowest));

              case 23:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function blocksForRange(_x2, _x3, _x4) {
        return _blocksForRange.apply(this, arguments);
      }

      return blocksForRange;
    }()
  }]);
  return TabixIndex;
}(_indexFile.default);

exports.default = TabixIndex;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,