"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty2 = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty2(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _getIterator2 = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/get-iterator"));

var _isArray = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/array/is-array"));

var _iterator2 = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/symbol/iterator"));

var _symbol = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/symbol"));

var _from = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/array/from"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/define-property"));

var _defineProperties = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/define-properties"));

var _getOwnPropertyDescriptors = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/get-own-property-descriptors"));

var _getOwnPropertyDescriptor = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/get-own-property-descriptor"));

var _getOwnPropertySymbols = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/get-own-property-symbols"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/keys"));

var _construct = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/reflect/construct"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/slicedToArray"));

var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs2/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _defineProperty3 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _long = _interopRequireDefault(require("long"));

var _bgzfFilehandle = require("@gmod/bgzf-filehandle");

var _virtualOffset = _interopRequireWildcard(require("./virtualOffset"));

var _chunk = _interopRequireDefault(require("./chunk"));

var _util = require("./util");

var _indexFile = _interopRequireDefault(require("./indexFile"));

function _createForOfIteratorHelper(o) { if (typeof _symbol.default === "undefined" || o[_iterator2.default] == null) { if ((0, _isArray.default)(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = (0, _getIterator2.default)(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return (0, _from.default)(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = (0, _keys.default)(object); if (_getOwnPropertySymbols.default) { var symbols = (0, _getOwnPropertySymbols.default)(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return (0, _getOwnPropertyDescriptor.default)(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty3.default)(target, key, source[key]); }); } else if (_getOwnPropertyDescriptors.default) { (0, _defineProperties.default)(target, (0, _getOwnPropertyDescriptors.default)(source)); } else { ownKeys(Object(source)).forEach(function (key) { (0, _defineProperty2.default)(target, key, (0, _getOwnPropertyDescriptor.default)(source, key)); }); } } return target; }

function _createSuper(Derived) { return function () { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = (0, _construct.default)(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_construct.default) return false; if (_construct.default.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call((0, _construct.default)(Date, [], function () {})); return true; } catch (e) { return false; } }

var CSI1_MAGIC = 21582659; // CSI\1

var CSI2_MAGIC = 38359875; // CSI\2

function lshift(num, bits) {
  return num * Math.pow(2, bits);
}

function rshift(num, bits) {
  return Math.floor(num / Math.pow(2, bits));
}

var CSI = /*#__PURE__*/function (_IndexFile) {
  (0, _inherits2.default)(CSI, _IndexFile);

  var _super = _createSuper(CSI);

  function CSI(args) {
    var _this;

    (0, _classCallCheck2.default)(this, CSI);
    _this = _super.call(this, args);
    (0, _defineProperty3.default)((0, _assertThisInitialized2.default)(_this), "maxBinNumber", void 0);
    (0, _defineProperty3.default)((0, _assertThisInitialized2.default)(_this), "depth", void 0);
    (0, _defineProperty3.default)((0, _assertThisInitialized2.default)(_this), "minShift", void 0);
    _this.maxBinNumber = 0;
    _this.depth = 0;
    _this.minShift = 0;
    return _this;
  }

  (0, _createClass2.default)(CSI, [{
    key: "lineCount",
    value: function () {
      var _lineCount = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(refName) {
        var opts,
            indexData,
            refId,
            idx,
            stats,
            _args = arguments;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                opts = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
                _context.next = 3;
                return this.parse(opts);

              case 3:
                indexData = _context.sent;

                if (indexData) {
                  _context.next = 6;
                  break;
                }

                return _context.abrupt("return", -1);

              case 6:
                refId = indexData.refNameToId[refName];
                idx = indexData.indices[refId];

                if (idx) {
                  _context.next = 10;
                  break;
                }

                return _context.abrupt("return", -1);

              case 10:
                stats = indexData.indices[refId].stats;

                if (!stats) {
                  _context.next = 13;
                  break;
                }

                return _context.abrupt("return", stats.lineCount);

              case 13:
                return _context.abrupt("return", -1);

              case 14:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function lineCount(_x) {
        return _lineCount.apply(this, arguments);
      }

      return lineCount;
    }()
  }, {
    key: "indexCov",
    value: function () {
      var _indexCov = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                throw new Error('CSI indexes do not support indexcov');

              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function indexCov() {
        return _indexCov.apply(this, arguments);
      }

      return indexCov;
    }()
  }, {
    key: "parseAuxData",
    value: function parseAuxData(bytes, offset, auxLength) {
      if (auxLength < 30) {
        return {
          refIdToName: [],
          refNameToId: {}
        };
      }

      var formatFlags = bytes.readInt32LE(offset);
      var coordinateType = formatFlags & 0x10000 ? 'zero-based-half-open' : '1-based-closed';
      var format = {
        0: 'generic',
        1: 'SAM',
        2: 'VCF'
      }[formatFlags & 0xf];
      if (!format) throw new Error("invalid Tabix preset format flags ".concat(formatFlags));
      var columnNumbers = {
        ref: bytes.readInt32LE(offset + 4),
        start: bytes.readInt32LE(offset + 8),
        end: bytes.readInt32LE(offset + 12)
      };
      var metaValue = bytes.readInt32LE(offset + 16);
      var metaChar = metaValue ? String.fromCharCode(metaValue) : '';
      var skipLines = bytes.readInt32LE(offset + 20);
      var nameSectionLength = bytes.readInt32LE(offset + 24);

      var _this$_parseNameBytes = this._parseNameBytes(bytes.slice(offset + 28, offset + 28 + nameSectionLength)),
          refIdToName = _this$_parseNameBytes.refIdToName,
          refNameToId = _this$_parseNameBytes.refNameToId;

      return {
        refIdToName: refIdToName,
        refNameToId: refNameToId,
        skipLines: skipLines,
        metaChar: metaChar,
        columnNumbers: columnNumbers,
        format: format,
        coordinateType: coordinateType
      };
    }
  }, {
    key: "_parseNameBytes",
    value: function _parseNameBytes(namesBytes) {
      var currRefId = 0;
      var currNameStart = 0;
      var refIdToName = [];
      var refNameToId = {};

      for (var i = 0; i < namesBytes.length; i += 1) {
        if (!namesBytes[i]) {
          if (currNameStart < i) {
            var refName = namesBytes.toString('utf8', currNameStart, i);
            refName = this.renameRefSeq(refName);
            refIdToName[currRefId] = refName;
            refNameToId[refName] = currRefId;
          }

          currNameStart = i + 1;
          currRefId += 1;
        }
      }

      return {
        refNameToId: refNameToId,
        refIdToName: refIdToName
      };
    } // fetch and parse the index

  }, {
    key: "_parse",
    value: function () {
      var _parse2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {
        var _this2 = this;

        var opts,
            bytes,
            csiVersion,
            maxRefLength,
            auxLength,
            aux,
            refCount,
            firstDataLine,
            currOffset,
            indices,
            _args3 = arguments;
        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                opts = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};
                _context3.t0 = _bgzfFilehandle.unzip;
                _context3.next = 4;
                return this.filehandle.readFile(opts);

              case 4:
                _context3.t1 = _context3.sent;
                _context3.next = 7;
                return (0, _context3.t0)(_context3.t1);

              case 7:
                bytes = _context3.sent;

                if (!(bytes.readUInt32LE(0) === CSI1_MAGIC)) {
                  _context3.next = 12;
                  break;
                }

                csiVersion = 1;
                _context3.next = 17;
                break;

              case 12:
                if (!(bytes.readUInt32LE(0) === CSI2_MAGIC)) {
                  _context3.next = 16;
                  break;
                }

                csiVersion = 2;
                _context3.next = 17;
                break;

              case 16:
                throw new Error('Not a CSI file');

              case 17:
                this.minShift = bytes.readInt32LE(4);
                this.depth = bytes.readInt32LE(8);
                this.maxBinNumber = ((1 << (this.depth + 1) * 3) - 1) / 7;
                maxRefLength = Math.pow(2, this.minShift + this.depth * 3);
                auxLength = bytes.readInt32LE(12);
                aux = {
                  refIdToName: [],
                  refNameToId: {}
                };

                if (auxLength) {
                  aux = this.parseAuxData(bytes, 16, auxLength);
                }

                refCount = bytes.readInt32LE(16 + auxLength); // read the indexes for each reference sequence

                currOffset = 16 + auxLength + 4;
                indices = new Array(refCount).fill(0).map(function () {
                  // the binning index
                  var binCount = bytes.readInt32LE(currOffset);
                  currOffset += 4;
                  var binIndex = {};
                  var stats; // < provided by parsing a pseudo-bin, if present

                  for (var j = 0; j < binCount; j += 1) {
                    var bin = bytes.readUInt32LE(currOffset);

                    if (bin > _this2.maxBinNumber) {
                      // this is a fake bin that actually has stats information
                      // about the reference sequence in it
                      stats = _this2.parsePseudoBin(bytes, currOffset + 4);
                      currOffset += 4 + 8 + 4 + 16 + 16;
                    } else {
                      var loffset = (0, _virtualOffset.fromBytes)(bytes, currOffset + 4);
                      firstDataLine = _this2._findFirstData(firstDataLine, loffset);
                      var chunkCount = bytes.readInt32LE(currOffset + 12);
                      currOffset += 16;
                      var chunks = new Array(chunkCount);

                      for (var k = 0; k < chunkCount; k += 1) {
                        var u = (0, _virtualOffset.fromBytes)(bytes, currOffset);
                        var v = (0, _virtualOffset.fromBytes)(bytes, currOffset + 8);
                        currOffset += 16; // this._findFirstData(data, u)

                        chunks[k] = new _chunk.default(u, v, bin);
                      }

                      binIndex[bin] = chunks;
                    }
                  }

                  return {
                    binIndex: binIndex,
                    stats: stats
                  };
                });
                return _context3.abrupt("return", _objectSpread({}, aux, {
                  csi: true,
                  refCount: refCount,
                  maxBlockSize: 1 << 16,
                  firstDataLine: firstDataLine,
                  csiVersion: csiVersion,
                  indices: indices,
                  depth: this.depth,
                  maxBinNumber: this.maxBinNumber,
                  maxRefLength: maxRefLength
                }));

              case 28:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function _parse() {
        return _parse2.apply(this, arguments);
      }

      return _parse;
    }()
  }, {
    key: "parsePseudoBin",
    value: function parsePseudoBin(bytes, offset) {
      var lineCount = (0, _util.longToNumber)(_long.default.fromBytesLE(Array.prototype.slice.call(bytes, offset + 28, offset + 36), true));
      return {
        lineCount: lineCount
      };
    }
  }, {
    key: "blocksForRange",
    value: function () {
      var _blocksForRange = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4(refName, min, max) {
        var opts,
            indexData,
            refId,
            ba,
            overlappingBins,
            chunks,
            _iterator,
            _step,
            _step$value,
            start,
            end,
            bin,
            binChunks,
            c,
            _args4 = arguments;

        return _regenerator.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                opts = _args4.length > 3 && _args4[3] !== undefined ? _args4[3] : {};

                if (min < 0) {
                  min = 0;
                }

                _context4.next = 4;
                return this.parse(opts);

              case 4:
                indexData = _context4.sent;

                if (indexData) {
                  _context4.next = 7;
                  break;
                }

                return _context4.abrupt("return", []);

              case 7:
                refId = indexData.refNameToId[refName];
                ba = indexData.indices[refId];

                if (ba) {
                  _context4.next = 11;
                  break;
                }

                return _context4.abrupt("return", []);

              case 11:
                // const { linearIndex, binIndex } = indexes
                overlappingBins = this.reg2bins(min, max); // List of bin #s that overlap min, max

                chunks = []; // Find chunks in overlapping bins.  Leaf bins (< 4681) are not pruned

                _iterator = _createForOfIteratorHelper(overlappingBins);

                try {
                  for (_iterator.s(); !(_step = _iterator.n()).done;) {
                    _step$value = (0, _slicedToArray2.default)(_step.value, 2), start = _step$value[0], end = _step$value[1];

                    for (bin = start; bin <= end; bin++) {
                      if (ba.binIndex[bin]) {
                        binChunks = ba.binIndex[bin];

                        for (c = 0; c < binChunks.length; ++c) {
                          chunks.push(new _chunk.default(binChunks[c].minv, binChunks[c].maxv, bin));
                        }
                      }
                    }
                  }
                } catch (err) {
                  _iterator.e(err);
                } finally {
                  _iterator.f();
                }

                return _context4.abrupt("return", (0, _util.optimizeChunks)(chunks, new _virtualOffset.default(0, 0)));

              case 16:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function blocksForRange(_x2, _x3, _x4) {
        return _blocksForRange.apply(this, arguments);
      }

      return blocksForRange;
    }()
    /**
     * calculate the list of bins that may overlap with region [beg,end) (zero-based half-open)
     * @returns {Array[number]}
     */

  }, {
    key: "reg2bins",
    value: function reg2bins(beg, end) {
      beg -= 1; // < convert to 1-based closed

      if (beg < 1) beg = 1;
      if (end > Math.pow(2, 50)) end = Math.pow(2, 34); // 17 GiB ought to be enough for anybody

      end -= 1;
      var l = 0;
      var t = 0;
      var s = this.minShift + this.depth * 3;
      var bins = [];

      for (; l <= this.depth; s -= 3, t += lshift(1, l * 3), l += 1) {
        var b = t + rshift(beg, s);
        var e = t + rshift(end, s);
        if (e - b + bins.length > this.maxBinNumber) throw new Error("query ".concat(beg, "-").concat(end, " is too large for current binning scheme (shift ").concat(this.minShift, ", depth ").concat(this.depth, "), try a smaller query or a coarser index binning scheme"));
        bins.push([b, e]);
      }

      return bins;
    }
  }]);
  return CSI;
}(_indexFile.default);

exports.default = CSI;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,