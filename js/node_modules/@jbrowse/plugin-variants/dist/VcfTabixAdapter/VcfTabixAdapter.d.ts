import { BaseFeatureDataAdapter, BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter';
import { NoAssemblyRegion, Region } from '@jbrowse/core/util/types';
import { Feature } from '@jbrowse/core/util/simpleFeature';
import { TabixIndexedFile } from '@gmod/tabix';
import { GenericFilehandle } from 'generic-filehandle';
import VcfParser from '@gmod/vcf';
export default class extends BaseFeatureDataAdapter {
    protected configured?: Promise<{
        vcf: TabixIndexedFile;
        parser: typeof VcfParser;
        filehandle: GenericFilehandle;
    }>;
    protected configure(): Promise<{
        vcf: TabixIndexedFile;
        parser: any;
        filehandle: GenericFilehandle;
    }>;
    getRefNames(opts?: BaseOptions): Promise<any>;
    getHeader(): Promise<string>;
    getMetadata(): Promise<any>;
    getFeatures(query: NoAssemblyRegion, opts?: BaseOptions): import("rxjs").Observable<Feature>;
    /**
     * Checks if the data source has data for the given reference sequence,
     * and then gets the features in the region if it does
     *
     * Currently this just calls getFeatureInRegion for each region. Adapters that
     * are frequently called on multiple regions simultaneously may want to
     * implement a more efficient custom version of this method.
     *
     * Also includes a bit of extra logging to warn when fetching a large portion
     * of a VCF
     * @param regions - Regions
     * @param opts - Feature adapter options
     * @returns Observable of Feature objects in the regions
     */
    getFeaturesInMultipleRegions(regions: Region[], opts?: BaseOptions): import("rxjs").Observable<Feature>;
    /**
     * get the approximate number of bytes queried from the file for the given
     * query regions
     * @param regions - list of query regions
     */
    private bytesForRegions;
    freeResources(): void;
}
