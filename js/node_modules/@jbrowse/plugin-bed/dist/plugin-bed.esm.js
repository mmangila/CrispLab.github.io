import AdapterType from '@jbrowse/core/pluggableElementTypes/AdapterType';
import Plugin from '@jbrowse/core/Plugin';
import { ConfigurationSchema, readConfObject } from '@jbrowse/core/configuration';
import { types } from 'mobx-state-tree';
import { BigBed } from '@gmod/bbi';
import BED from '@gmod/bed';
import { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter';
import { openLocation } from '@jbrowse/core/util/io';
import { ObservableCreate } from '@jbrowse/core/util/rxjs';
import SimpleFeature from '@jbrowse/core/util/simpleFeature';
import { mergeAll, map } from 'rxjs/operators';
import { TabixIndexedFile } from '@gmod/tabix';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

var bigBedAdapterConfigSchema = /*#__PURE__*/ConfigurationSchema('BigBedAdapter', {
  bigBedLocation: {
    type: 'fileLocation',
    defaultValue: {
      uri: '/path/to/my.bb'
    }
  }
}, {
  explicitlyTyped: true
});

var bedTabixAdapterConfigSchema = /*#__PURE__*/ConfigurationSchema('BedTabixAdapter', {
  bedGzLocation: {
    type: 'fileLocation',
    defaultValue: {
      uri: '/path/to/my.bed.gz'
    }
  },
  index: /*#__PURE__*/ConfigurationSchema('TabixIndex', {
    indexType: {
      model: /*#__PURE__*/types.enumeration('IndexType', ['TBI', 'CSI']),
      type: 'stringEnum',
      defaultValue: 'TBI'
    },
    location: {
      type: 'fileLocation',
      defaultValue: {
        uri: '/path/to/my.bed.gz.tbi'
      }
    }
  }),
  columnNames: {
    type: 'stringArray',
    description: 'List of column names',
    defaultValue: []
  },
  scoreColumn: {
    type: 'string',
    description: 'The column to use as a "score" attribute',
    defaultValue: ''
  },
  autoSql: {
    type: 'string',
    description: 'The autoSql definition for the data fields in the file',
    defaultValue: ''
  }
}, {
  explicitlyTyped: true
});

var BedPlugin = /*#__PURE__*/function (_Plugin) {
  _inherits(BedPlugin, _Plugin);

  var _super = /*#__PURE__*/_createSuper(BedPlugin);

  function BedPlugin() {
    var _this;

    _classCallCheck(this, BedPlugin);

    _this = _super.apply(this, arguments);
    _this.name = 'BedPlugin';
    return _this;
  }

  _createClass(BedPlugin, [{
    key: "install",
    value: function install(pluginManager) {
      pluginManager.addAdapterType(function () {
        return new AdapterType({
          name: 'BigBedAdapter',
          configSchema: bigBedAdapterConfigSchema,
          getAdapterClass: function getAdapterClass() {
            return Promise.resolve().then(function () { return BigBedAdapter$1; }).then(function (r) {
              return r["default"];
            });
          }
        });
      });
      pluginManager.addAdapterType(function () {
        return new AdapterType({
          name: 'BedTabixAdapter',
          configSchema: bedTabixAdapterConfigSchema,
          getAdapterClass: function getAdapterClass() {
            return Promise.resolve().then(function () { return BedTabixAdapter$1; }).then(function (r) {
              return r["default"];
            });
          }
        });
      });
    }
  }]);

  return BedPlugin;
}(Plugin);

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime_1 = /*#__PURE__*/createCommonjsModule(function (module) {
  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  var runtime = function (exports) {

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined$1; // More compressible than void 0.

    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    function define(obj, key, value) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
      return obj[key];
    }

    try {
      // IE 8 has a broken Object.defineProperty that only works on DOM objects.
      define({}, "");
    } catch (err) {
      define = function define(obj, key, value) {
        return obj[key] = value;
      };
    }

    function wrap(innerFn, outerFn, self, tryLocsList) {
      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
      // .throw, and .return methods.

      generator._invoke = makeInvokeMethod(innerFn, self, context);
      return generator;
    }

    exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.

    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.

    var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.

    function Generator() {}

    function GeneratorFunction() {}

    function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.


    var IteratorPrototype = {};

    IteratorPrototype[iteratorSymbol] = function () {
      return this;
    };

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      // This environment has a native %IteratorPrototype%; use it instead
      // of the polyfill.
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.

    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        define(prototype, method, function (arg) {
          return this._invoke(method, arg);
        });
      });
    }

    exports.isGeneratorFunction = function (genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
      // do is to check its .name property.
      (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };

    exports.mark = function (genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
        define(genFun, toStringTagSymbol, "GeneratorFunction");
      }

      genFun.prototype = Object.create(Gp);
      return genFun;
    }; // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.


    exports.awrap = function (arg) {
      return {
        __await: arg
      };
    };

    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);

        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;

          if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
            return PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return PromiseImpl.resolve(value).then(function (unwrapped) {
            // When a yielded Promise is resolved, its final value becomes
            // the .value of the Promise<{value,done}> result for the
            // current iteration.
            result.value = unwrapped;
            resolve(result);
          }, function (error) {
            // If a rejected Promise was yielded, throw the rejection back
            // into the async generator function so it can be handled there.
            return invoke("throw", error, resolve, reject);
          });
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise = // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
        // invocations of the iterator.
        callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      } // Define the unified helper method that is used to implement .next,
      // .throw, and .return (see defineIteratorMethods).


      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);

    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
      return this;
    };

    exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.

    exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      if (PromiseImpl === void 0) PromiseImpl = Promise;
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
      return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;
      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          } // Be forgiving, per 25.3.3.3.3 of the spec:
          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            // Setting context._sent for legacy support of Babel's
            // function.sent implementation.
            context.sent = context._sent = context.arg;
          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);
          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;
          var record = tryCatch(innerFn, self, context);

          if (record.type === "normal") {
            // If an exception is thrown from innerFn, we leave state ===
            // GenStateExecuting and loop back for another invocation.
            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };
          } else if (record.type === "throw") {
            state = GenStateCompleted; // Dispatch the exception by looping back around to the
            // context.dispatchException(context.arg) call above.

            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    } // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.


    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];

      if (method === undefined$1) {
        // A .throw or .return when the delegate iterator has no .throw
        // method always terminates the yield* loop.
        context.delegate = null;

        if (context.method === "throw") {
          // Note: ["return"] must be used for ES3 parsing compatibility.
          if (delegate.iterator["return"]) {
            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            context.method = "return";
            context.arg = undefined$1;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              // If maybeInvokeDelegate(context) changed context.method from
              // "return" to "throw", let that override the TypeError below.
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError("The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (!info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        // Assign the result of the finished delegate to the temporary
        // variable specified by delegate.resultName (see delegateYield).
        context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

        context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
        // exception, let the outer generator proceed normally. If
        // context.method was "next", forget context.arg since it has been
        // "consumed" by the delegate iterator. If context.method was
        // "return", allow the original .return call to continue in the
        // outer generator.

        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined$1;
        }
      } else {
        // Re-yield the result returned by the delegate method.
        return info;
      } // The delegate iterator is finished, so forget it and continue with
      // the outer generator.


      context.delegate = null;
      return ContinueSentinel;
    } // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.


    defineIteratorMethods(Gp);
    define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.

    Gp[iteratorSymbol] = function () {
      return this;
    };

    Gp.toString = function () {
      return "[object Generator]";
    };

    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      // The root entry object (effectively a try statement without a catch
      // or a finally block) gives us a place to store values thrown from
      // locations where there is no enclosing try statement.
      this.tryEntries = [{
        tryLoc: "root"
      }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    exports.keys = function (object) {
      var keys = [];

      for (var key in object) {
        keys.push(key);
      }

      keys.reverse(); // Rather than returning an object with a next method, we keep
      // things simple and return the next function itself.

      return function next() {
        while (keys.length) {
          var key = keys.pop();

          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        } // To avoid creating an additional object, we just hang the .value
        // and .done properties off the next function object itself. This
        // also ensures that the minifier will not anonymize the function.


        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];

        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1,
              next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined$1;
            next.done = true;
            return next;
          };

          return next.next = next;
        }
      } // Return an iterator with no values.


      return {
        next: doneResult
      };
    }

    exports.values = values;

    function doneResult() {
      return {
        value: undefined$1,
        done: true
      };
    }

    Context.prototype = {
      constructor: Context,
      reset: function reset(skipTempReset) {
        this.prev = 0;
        this.next = 0; // Resetting context._sent for legacy support of Babel's
        // function.sent implementation.

        this.sent = this._sent = undefined$1;
        this.done = false;
        this.delegate = null;
        this.method = "next";
        this.arg = undefined$1;
        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            // Not sure about the optimal order of these conditions:
            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
              this[name] = undefined$1;
            }
          }
        }
      },
      stop: function stop() {
        this.done = true;
        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;

        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },
      dispatchException: function dispatchException(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;

        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            context.method = "next";
            context.arg = undefined$1;
          }

          return !!caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            // Exception thrown outside of any try block that could handle
            // it, so set the completion value of the entire function to
            // throw the exception.
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },
      abrupt: function abrupt(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          // Ignore the finally entry if control is not jumping to a
          // location outside the try/catch block.
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },
      complete: function complete(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },
      finish: function finish(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },
      "catch": function _catch(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;

            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }

            return thrown;
          }
        } // The context.catch method must only be called with a location
        // argument that corresponds to a known catch block.


        throw new Error("illegal catch attempt");
      },
      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          // Deliberately forget the last sent value so that we don't
          // accidentally pass it on to the delegate.
          this.arg = undefined$1;
        }

        return ContinueSentinel;
      }
    }; // Regardless of whether this script is executing as a CommonJS module
    // or not, return the runtime object so that we can declare the variable
    // regeneratorRuntime in the outer scope, which allows this module to be
    // injected easily by `bin/regenerator --include-runtime script.js`.

    return exports;
  }( // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports );

  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    // This module should not be running in strict mode, so the above
    // assignment should always work unless something is misconfigured. Just
    // in case runtime.js accidentally runs in strict mode, we can escape
    // strict mode using a global Function call. This could conceivably fail
    // if a Content Security Policy forbids using Function, but in that case
    // the proper solution is to fix the accidental strict mode problem. If
    // you've misconfigured your bundler to force strict mode and applied a
    // CSP to forbid Function, and you're not willing to fix either of those
    // problems, please detail your unique predicament in a GitHub issue.
    Function("r", "regeneratorRuntime = r")(runtime);
  }
});

function ucscProcessedTranscript(feature) {
  var children = feature.children(); // split the blocks into UTR, CDS, and exons

  var thickStart = feature.get('thickStart');
  var thickEnd = feature.get('thickEnd');

  if (!thickStart && !thickEnd) {
    return feature;
  }

  var blocks = children ? children.filter(function (child) {
    return child.get('type') === 'block';
  }).sort(function (a, b) {
    return a.get('start') - b.get('start');
  }) : []; // eslint-disable-next-line @typescript-eslint/no-explicit-any

  var newChildren = [];
  blocks.forEach(function (block) {
    var start = block.get('start');
    var end = block.get('end');

    if (thickStart >= end) {
      // left-side UTR
      var prime = feature.get('strand') > 0 ? 'five' : 'three';
      newChildren.push({
        type: "".concat(prime, "_prime_UTR"),
        start: start,
        end: end
      });
    } else if (thickStart > start && thickStart < end && thickEnd >= end) {
      // UTR | CDS
      var _prime = feature.get('strand') > 0 ? 'five' : 'three';

      newChildren.push({
        type: "".concat(_prime, "_prime_UTR"),
        start: start,
        end: thickStart
      }, {
        type: 'CDS',
        start: thickStart,
        end: end
      });
    } else if (thickStart <= start && thickEnd >= end) {
      // CDS
      newChildren.push({
        type: 'CDS',
        start: start,
        end: end
      });
    } else if (thickStart > start && thickStart < end && thickEnd < end) {
      // UTR | CDS | UTR
      var leftPrime = feature.get('strand') > 0 ? 'five' : 'three';
      var rightPrime = feature.get('strand') > 0 ? 'three' : 'five';
      newChildren.push({
        type: "".concat(leftPrime, "_prime_UTR"),
        start: start,
        end: thickStart
      }, {
        type: "CDS",
        start: thickStart,
        end: thickEnd
      }, {
        type: "".concat(rightPrime, "_prime_UTR"),
        start: thickEnd,
        end: end
      });
    } else if (thickStart <= start && thickEnd > start && thickEnd < end) {
      // CDS | UTR
      var _prime2 = feature.get('strand') > 0 ? 'three' : 'five';

      newChildren.push({
        type: "CDS",
        start: start,
        end: thickEnd
      }, {
        type: "".concat(_prime2, "_prime_UTR"),
        start: thickEnd,
        end: end
      });
    } else if (thickEnd <= start) {
      // right-side UTR
      var _prime3 = feature.get('strand') > 0 ? 'three' : 'five';

      newChildren.push({
        type: "".concat(_prime3, "_prime_UTR"),
        start: start,
        end: end
      });
    }
  }); // eslint-disable-next-line @typescript-eslint/no-explicit-any

  var newData = {};
  feature.tags().forEach(function (tag) {
    newData[tag] = feature.get(tag);
  });
  newData.subfeatures = newChildren;
  newData.type = 'mRNA';
  newData.uniqueId = feature.id();
  delete newData.chromStarts;
  delete newData.chromStart;
  delete newData.chromEnd;
  delete newData.chrom;
  delete newData.blockStarts;
  delete newData.blockSizes;
  delete newData.blockCount;
  delete newData.thickStart;
  delete newData.thickEnd;
  var newFeature = new SimpleFeature({
    data: newData,
    id: feature.id()
  });
  return newFeature;
}

var BigBedAdapter = /*#__PURE__*/function (_BaseFeatureDataAdapt) {
  _inherits(BigBedAdapter, _BaseFeatureDataAdapt);

  var _super = /*#__PURE__*/_createSuper(BigBedAdapter);

  function BigBedAdapter(config) {
    var _this;

    _classCallCheck(this, BigBedAdapter);

    _this = _super.call(this, config);
    var bigBedLocation = readConfObject(config, 'bigBedLocation');
    _this.bigbed = new BigBed({
      filehandle: openLocation(bigBedLocation)
    });
    _this.parser = _this.bigbed.getHeader().then(function (_ref) {
      var autoSql = _ref.autoSql;
      return new BED({
        autoSql: autoSql
      });
    });
    return _this;
  }

  _createClass(BigBedAdapter, [{
    key: "getRefNames",
    value: function () {
      var _getRefNames = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.t0 = Object;
                _context.next = 3;
                return this.bigbed.getHeader();

              case 3:
                _context.t1 = _context.sent.refsByName;
                return _context.abrupt("return", _context.t0.keys.call(_context.t0, _context.t1));

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getRefNames() {
        return _getRefNames.apply(this, arguments);
      }

      return getRefNames;
    }()
  }, {
    key: "getHeader",
    value: function () {
      var _getHeader = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(opts) {
        var _yield$this$bigbed$ge, version, fileType, _yield$this$parser, autoSql, fields, rest, f;

        return runtime_1.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.bigbed.getHeader(opts);

              case 2:
                _yield$this$bigbed$ge = _context2.sent;
                version = _yield$this$bigbed$ge.version;
                fileType = _yield$this$bigbed$ge.fileType;
                _context2.next = 7;
                return this.parser;

              case 7:
                _yield$this$parser = _context2.sent;
                autoSql = _yield$this$parser.autoSql;
                fields = autoSql.fields, rest = _objectWithoutProperties(autoSql, ["fields"]);
                f = Object.fromEntries( // @ts-ignore
                fields.map(function (_ref2) {
                  var name = _ref2.name,
                      comment = _ref2.comment;
                  return [name, comment];
                }));
                return _context2.abrupt("return", {
                  version: version,
                  fileType: fileType,
                  autoSql: _objectSpread2({}, rest),
                  fields: f
                });

              case 12:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getHeader(_x) {
        return _getHeader.apply(this, arguments);
      }

      return getHeader;
    }()
  }, {
    key: "refIdToName",
    value: function () {
      var _refIdToName = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(refId) {
        return runtime_1.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.bigbed.getHeader();

              case 2:
                _context3.t1 = refId;
                _context3.t0 = _context3.sent.refsByNumber[_context3.t1];

                if (_context3.t0) {
                  _context3.next = 6;
                  break;
                }

                _context3.t0 = {};

              case 6:
                return _context3.abrupt("return", _context3.t0.name);

              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function refIdToName(_x2) {
        return _refIdToName.apply(this, arguments);
      }

      return refIdToName;
    }()
  }, {
    key: "getFeatures",
    value: function getFeatures(region) {
      var _this2 = this;

      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var refName = region.refName,
          start = region.start,
          end = region.end;
      var signal = opts.signal;
      return ObservableCreate( /*#__PURE__*/function () {
        var _ref3 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(observer) {
          var parser, ob;
          return runtime_1.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _context4.prev = 0;
                  _context4.next = 3;
                  return _this2.parser;

                case 3:
                  parser = _context4.sent;
                  _context4.next = 6;
                  return _this2.bigbed.getFeatureStream(refName, start, end, {
                    signal: signal,
                    basesPerSpan: end - start
                  });

                case 6:
                  ob = _context4.sent;
                  ob.pipe(mergeAll(), map(function (r) {
                    var data = parser.parseLine("".concat(refName, "\t").concat(r.start, "\t").concat(r.end, "\t").concat(r.rest), {
                      uniqueId: r.uniqueId
                    });
                    var blockCount = data.blockCount,
                        blockSizes = data.blockSizes,
                        blockStarts = data.blockStarts,
                        chromStarts = data.chromStarts;

                    if (blockCount) {
                      var starts = chromStarts || blockStarts || [];
                      var sizes = blockSizes;
                      var blocksOffset = r.start;
                      data.subfeatures = [];

                      for (var b = 0; b < blockCount; b += 1) {
                        var bmin = (starts[b] || 0) + blocksOffset;
                        var bmax = bmin + (sizes[b] || 0);
                        data.subfeatures.push({
                          uniqueId: "".concat(r.uniqueId, "-").concat(b),
                          start: bmin,
                          end: bmax,
                          type: 'block'
                        });
                      }
                    }

                    if (r.uniqueId === undefined) {
                      throw new Error('invalid bbi feature');
                    }

                    delete data.chromStart;
                    delete data.chromEnd;
                    delete data.chrom;
                    var f = new SimpleFeature({
                      id: "".concat(_this2.id, "-").concat(r.uniqueId),
                      data: _objectSpread2(_objectSpread2({}, data), {}, {
                        start: r.start,
                        end: r.end,
                        refName: refName
                      })
                    }); // collection of heuristics for suggesting that this feature
                    // should be converted to a gene, CNV bigbed has many gene like
                    // features including thickStart and blockCount but no strand

                    return f.get('thickStart') && f.get('blockCount') && f.get('strand') !== 0 ? ucscProcessedTranscript(f) : f;
                  })).subscribe(observer);
                  _context4.next = 13;
                  break;

                case 10:
                  _context4.prev = 10;
                  _context4.t0 = _context4["catch"](0);
                  observer.error(_context4.t0);

                case 13:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, null, [[0, 10]]);
        }));

        return function (_x3) {
          return _ref3.apply(this, arguments);
        };
      }(), opts.signal);
    }
  }, {
    key: "freeResources",
    value: function freeResources() {}
  }]);

  return BigBedAdapter;
}(BaseFeatureDataAdapter);

var BigBedAdapter$1 = {
  __proto__: null,
  'default': BigBedAdapter
};

var BedTabixAdapter = /*#__PURE__*/function (_BaseFeatureDataAdapt) {
  _inherits(BedTabixAdapter, _BaseFeatureDataAdapt);

  var _super = /*#__PURE__*/_createSuper(BedTabixAdapter);

  function BedTabixAdapter(config) {
    var _this;

    _classCallCheck(this, BedTabixAdapter);

    _this = _super.call(this, config);
    var bedGzLocation = readConfObject(config, 'bedGzLocation');
    var index = readConfObject(config, 'index');
    var autoSql = readConfObject(config, 'autoSql');
    var location = index.location,
        indexType = index.indexType;
    _this.bed = new TabixIndexedFile({
      filehandle: openLocation(bedGzLocation),
      csiFilehandle: indexType === 'CSI' ? openLocation(location) : undefined,
      tbiFilehandle: indexType !== 'CSI' ? openLocation(location) : undefined,
      chunkCacheSize: 50 * Math.pow(2, 20)
    });
    _this.columnNames = readConfObject(config, 'columnNames');
    _this.scoreColumn = readConfObject(config, 'scoreColumn');
    _this.parser = new BED({
      autoSql: autoSql
    });
    return _this;
  }

  _createClass(BedTabixAdapter, [{
    key: "getRefNames",
    value: function () {
      var _getRefNames = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
        var opts,
            _args = arguments;
        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                opts = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
                return _context.abrupt("return", this.bed.getReferenceSequenceNames(opts));

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getRefNames() {
        return _getRefNames.apply(this, arguments);
      }

      return getRefNames;
    }()
  }, {
    key: "getHeader",
    value: function () {
      var _getHeader = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2() {
        return runtime_1.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", this.bed.getHeader());

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getHeader() {
        return _getHeader.apply(this, arguments);
      }

      return getHeader;
    }()
  }, {
    key: "defaultParser",
    value: function defaultParser(fields, line) {
      return Object.fromEntries(line.split('\t').map(function (f, i) {
        return [fields[i], f];
      }));
    }
  }, {
    key: "getNames",
    value: function () {
      var _getNames = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3() {
        var header, defs, defline;
        return runtime_1.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!this.columnNames.length) {
                  _context3.next = 2;
                  break;
                }

                return _context3.abrupt("return", this.columnNames);

              case 2:
                _context3.next = 4;
                return this.bed.getHeader();

              case 4:
                header = _context3.sent;
                defs = header.split('\n').filter(function (f) {
                  return !!f;
                });
                defline = defs[defs.length - 1];
                return _context3.abrupt("return", defline && defline.includes('\t') ? defline.slice(1).split('\t').map(function (field) {
                  return field.trim();
                }) : null);

              case 8:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function getNames() {
        return _getNames.apply(this, arguments);
      }

      return getNames;
    }()
  }, {
    key: "getFeatures",
    value: function getFeatures(query) {
      var _this2 = this;

      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return ObservableCreate( /*#__PURE__*/function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(observer) {
          var meta, columnNumbers, colRef, colStart, colEnd, colSame, names;
          return runtime_1.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _context4.next = 2;
                  return _this2.bed.getMetadata();

                case 2:
                  meta = _context4.sent;
                  columnNumbers = meta.columnNumbers;
                  colRef = columnNumbers.ref - 1;
                  colStart = columnNumbers.start - 1;
                  colEnd = columnNumbers.end - 1; // colSame handles special case for tabix where a single column is both
                  // the start and end, this is assumed to be covering the base at this
                  // position (e.g. tabix -s 1 -b 2 -e 2) begin and end are same

                  colSame = colStart === colEnd ? 1 : 0;
                  _context4.next = 10;
                  return _this2.getNames();

                case 10:
                  names = _context4.sent;
                  _context4.next = 13;
                  return _this2.bed.getLines(query.refName, query.start, query.end, {
                    lineCallback: function lineCallback(line, fileOffset) {
                      var l = line.split('\t');
                      var refName = l[colRef];
                      var start = +l[colStart];
                      var end = +l[colEnd] + colSame;
                      var uniqueId = "".concat(_this2.id, "-").concat(fileOffset);
                      var data = names ? _this2.defaultParser(names, line) : _this2.parser.parseLine(line, {
                        uniqueId: uniqueId
                      });
                      var blockCount = data.blockCount,
                          blockSizes = data.blockSizes,
                          blockStarts = data.blockStarts,
                          chromStarts = data.chromStarts;

                      if (blockCount) {
                        var starts = chromStarts || blockStarts || [];
                        var sizes = blockSizes;
                        var blocksOffset = start;
                        data.subfeatures = [];

                        for (var b = 0; b < blockCount; b += 1) {
                          var bmin = (starts[b] || 0) + blocksOffset;
                          var bmax = bmin + (sizes[b] || 0);
                          data.subfeatures.push({
                            uniqueId: "".concat(uniqueId, "-").concat(b),
                            start: bmin,
                            end: bmax,
                            type: 'block'
                          });
                        }
                      }

                      if (_this2.scoreColumn) {
                        data.score = data[_this2.scoreColumn];
                      }

                      delete data.chrom;
                      delete data.chromStart;
                      delete data.chromEnd;
                      var f = new SimpleFeature(_objectSpread2(_objectSpread2({}, data), {}, {
                        start: start,
                        end: end,
                        refName: refName,
                        uniqueId: uniqueId
                      }));
                      var r = f.get('thickStart') ? ucscProcessedTranscript(f) : f;
                      observer.next(r);
                    },
                    signal: opts.signal
                  });

                case 13:
                  observer.complete();

                case 14:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4);
        }));

        return function (_x) {
          return _ref.apply(this, arguments);
        };
      }(), opts.signal);
    }
  }, {
    key: "freeResources",
    value: function freeResources() {}
  }]);

  return BedTabixAdapter;
}(BaseFeatureDataAdapter);
BedTabixAdapter.capabilities = ['getFeatures', 'getRefNames'];

var BedTabixAdapter$1 = {
  __proto__: null,
  'default': BedTabixAdapter
};

export default BedPlugin;
//# sourceMappingURL=plugin-bed.esm.js.map
