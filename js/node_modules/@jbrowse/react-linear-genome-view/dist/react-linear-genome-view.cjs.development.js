'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

function _interopNamespace(e) {
  if (e && e.__esModule) { return e; } else {
    var n = {};
    if (e) {
      Object.keys(e).forEach(function (k) {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () {
            return e[k];
          }
        });
      });
    }
    n['default'] = e;
    return n;
  }
}

var React = require('react');
var React__default = _interopDefault(React);
var ui = require('@jbrowse/core/ui');
var mobxReact = require('mobx-react');
var mobxStateTree = require('mobx-state-tree');
var configuration = require('@jbrowse/core/configuration');
var core = require('@material-ui/core');
var ScopedCssBaseline = _interopDefault(require('@material-ui/core/ScopedCssBaseline'));
var MenuIcon = _interopDefault(require('@material-ui/icons/Menu'));
var useDimensions = _interopDefault(require('react-use-dimensions'));
var util = require('@jbrowse/core/util');
var assemblyManagerFactory = require('@jbrowse/core/assemblyManager');
var assemblyManagerFactory__default = _interopDefault(assemblyManagerFactory);
var PluginManager = _interopDefault(require('@jbrowse/core/PluginManager'));
var RpcManager = _interopDefault(require('@jbrowse/core/rpc/RpcManager'));
var TextSearchManagerF = _interopDefault(require('@jbrowse/core/TextSearch/TextSearchManager'));
var Alignments = _interopDefault(require('@jbrowse/plugin-alignments'));
var BED = _interopDefault(require('@jbrowse/plugin-bed'));
var Config = _interopDefault(require('@jbrowse/plugin-config'));
var DataManagement = _interopDefault(require('@jbrowse/plugin-data-management'));
var GFF3 = _interopDefault(require('@jbrowse/plugin-gff3'));
var LinearGenomeView = _interopDefault(require('@jbrowse/plugin-linear-genome-view'));
var Sequence = _interopDefault(require('@jbrowse/plugin-sequence'));
var SVG = _interopDefault(require('@jbrowse/plugin-svg'));
var Variants = _interopDefault(require('@jbrowse/plugin-variants'));
var Wiggle = _interopDefault(require('@jbrowse/plugin-wiggle'));
var mobx = require('mobx');
var InfoIcon = _interopDefault(require('@material-ui/icons/Info'));
var PluginLoader = _interopDefault(require('@jbrowse/core/PluginLoader'));

function createJBrowseTheme(theme) {
  console.warn('Deprecation warning: `createJBrowseTheme` will be removed in a future ' + 'release. It can be imported from @jbrowse/core/ui if needed.');
  return ui.createJBrowseTheme(theme);
}
function ThemeProvider(_ref) {
  var children = _ref.children;
  console.warn('Deprecation warning: `ThemeProvider` is no longer supported as a way to ' + 'theme @jbrowse/react-linear-genome-view. If using a custom theme, ' + 'please pass the theme in to the "configuration" of `createViewState` ' + 'instead.');
  return React__default.createElement(React__default.Fragment, null, children);
}

var useStyles = /*#__PURE__*/core.makeStyles({
  paper: {
    overflow: 'auto'
  }
});
var ModalWidgetContents = /*#__PURE__*/mobxReact.observer(function (_ref) {
  var session = _ref.session;
  var visibleWidget = session.visibleWidget;

  if (!visibleWidget) {
    return React__default.createElement(core.AppBar, {
      position: "relative"
    }, React__default.createElement(core.Toolbar, null));
  }

  var _getEnv$pluginManager = mobxStateTree.getEnv(session).pluginManager.getWidgetType(visibleWidget.type),
      ReactComponent = _getEnv$pluginManager.ReactComponent,
      HeadingComponent = _getEnv$pluginManager.HeadingComponent,
      heading = _getEnv$pluginManager.heading;

  return React__default.createElement(React__default.Fragment, null, React__default.createElement(core.AppBar, {
    position: "static"
  }, React__default.createElement(core.Toolbar, null, HeadingComponent ? React__default.createElement(HeadingComponent, {
    model: visibleWidget
  }) : React__default.createElement(core.Typography, {
    variant: "h6"
  }, heading))), visibleWidget && ReactComponent ? React__default.createElement(React.Suspense, {
    fallback: React__default.createElement("div", null, "Loading...")
  }, React__default.createElement(ScopedCssBaseline, null, React__default.createElement(ReactComponent, {
    model: visibleWidget,
    session: session,
    overrideDimensions: {
      height: window.innerHeight * 5 / 8,
      width: 800
    }
  }))) : null);
});
var ModalWidget = /*#__PURE__*/mobxReact.observer(function (_ref2) {
  var session = _ref2.session;
  var classes = useStyles();
  var visibleWidget = session.visibleWidget,
      hideAllWidgets = session.hideAllWidgets;
  return React__default.createElement(core.Dialog, {
    open: Boolean(visibleWidget),
    onClose: hideAllWidgets,
    maxWidth: "xl"
  }, React__default.createElement(core.Paper, {
    className: classes.paper
  }, React__default.createElement(ModalWidgetContents, {
    session: session
  })));
});

var useStyles$1 = /*#__PURE__*/core.makeStyles(function (theme) {
  return {
    viewContainer: {
      overflow: 'hidden',
      background: theme.palette.secondary.main,
      margin: theme.spacing(1)
    },
    icon: {
      color: theme.palette.secondary.contrastText
    },
    displayName: {
      marginTop: 2,
      color: theme.palette.secondary.contrastText
    },
    grow: {
      flexGrow: 1
    },
    iconRoot: {
      '&:hover': {
        backgroundColor: core.fade(theme.palette.secondary.contrastText, theme.palette.action.hoverOpacity),
        '@media (hover: none)': {
          backgroundColor: 'transparent'
        }
      }
    }
  };
});
var ViewMenu = /*#__PURE__*/mobxReact.observer(function (_ref) {
  var _model$menuItems;

  var model = _ref.model,
      IconButtonProps = _ref.IconButtonProps,
      IconProps = _ref.IconProps;

  var _useState = React.useState(),
      anchorEl = _useState[0],
      setAnchorEl = _useState[1];

  if (!((_model$menuItems = model.menuItems) != null && _model$menuItems.length)) {
    return null;
  }

  return React__default.createElement(React__default.Fragment, null, React__default.createElement(core.IconButton, Object.assign({}, IconButtonProps, {
    "aria-label": "more",
    "aria-controls": "view-menu",
    "aria-haspopup": "true",
    onClick: function onClick(event) {
      setAnchorEl(event.currentTarget);
    },
    "data-testid": "view_menu_icon"
  }), React__default.createElement(MenuIcon, Object.assign({}, IconProps))), React__default.createElement(ui.Menu, {
    anchorEl: anchorEl,
    open: Boolean(anchorEl),
    onMenuItemClick: function onMenuItemClick(_, callback) {
      callback();
      setAnchorEl(undefined);
    },
    onClose: function onClose() {
      setAnchorEl(undefined);
    },
    menuItems: model.menuItems
  }));
});
var ViewContainer = /*#__PURE__*/mobxReact.observer(function (_ref2) {
  var view = _ref2.view,
      children = _ref2.children;
  var classes = useStyles$1();
  var theme = core.useTheme();
  var session = util.getSession(view);

  var _useDimensions = useDimensions(),
      measureRef = _useDimensions[0],
      width = _useDimensions[1].width;

  var padWidth = theme.spacing(1);
  React.useEffect(function () {
    if (width) {
      if (mobxStateTree.isAlive(view)) {
        view.setWidth(width - padWidth * 2);
      }
    }
  }, [padWidth, view, width]);
  return React__default.createElement(core.Paper, {
    elevation: 12,
    ref: measureRef,
    className: classes.viewContainer,
    style: {
      padding: "0px " + padWidth + "px " + padWidth + "px"
    }
  }, session.DialogComponent ? React__default.createElement(React.Suspense, {
    fallback: React__default.createElement("div", null)
  }, React__default.createElement(session.DialogComponent, Object.assign({
    handleClose: function handleClose() {
      return session.setDialogComponent(undefined, undefined);
    }
  }, session.DialogProps))) : null, React__default.createElement("div", {
    style: {
      display: 'flex'
    }
  }, React__default.createElement(ViewMenu, {
    model: view,
    IconButtonProps: {
      classes: {
        root: classes.iconRoot
      },
      edge: 'start'
    },
    IconProps: {
      className: classes.icon
    }
  }), React__default.createElement("div", {
    className: classes.grow
  }), view.displayName ? React__default.createElement(core.Typography, {
    variant: "body2",
    className: classes.displayName
  }, view.displayName) : null, React__default.createElement("div", {
    className: classes.grow
  }), React__default.createElement("div", {
    style: {
      width: 20,
      height: 20
    }
  }, React__default.createElement(ui.Logomark, {
    variant: "white"
  }))), React__default.createElement(core.Paper, null, children));
});

var useStyles$2 = /*#__PURE__*/core.makeStyles(function () {
  return {
    // avoid parent styles getting into this div
    // https://css-tricks.com/almanac/properties/a/all/
    avoidParentStyle: {
      all: 'initial'
    }
  };
});
var JBrowseLinearGenomeView = /*#__PURE__*/mobxReact.observer(function (_ref) {
  var viewState = _ref.viewState;
  var classes = useStyles$2();
  var session = viewState.session;
  var view = session.view;

  var _getEnv = mobxStateTree.getEnv(session),
      pluginManager = _getEnv.pluginManager;

  var viewType = pluginManager.getViewType(view.type);

  if (!viewType) {
    throw new Error("unknown view type " + view.type);
  }

  var ReactComponent = viewType.ReactComponent;
  var theme = ui.createJBrowseTheme(configuration.readConfObject(viewState.config.configuration, 'theme'));
  return React__default.createElement(core.ThemeProvider, {
    theme: theme
  }, React__default.createElement("div", {
    className: classes.avoidParentStyle
  }, React__default.createElement(ScopedCssBaseline, null, React__default.createElement(ViewContainer, {
    key: "view-" + view.id,
    view: view
  }, React__default.createElement(React.Suspense, {
    fallback: React__default.createElement("div", null, "Loading...")
  }, React__default.createElement(ReactComponent, {
    model: view,
    session: session
  }))), React__default.createElement(ModalWidget, {
    session: session
  }))));
});

var corePlugins = [SVG, Alignments, BED, Config, DataManagement, GFF3, LinearGenomeView, Sequence, Variants, Wiggle];

function createConfigModel(pluginManager, assemblyConfigSchemasType) {
  return mobxStateTree.types.model('Configuration', {
    configuration: configuration.ConfigurationSchema('Root', {
      rpc: RpcManager.configSchema,
      highResolutionScaling: {
        type: 'number',
        defaultValue: 2
      },
      theme: {
        type: 'frozen',
        defaultValue: {}
      }
    }),
    assembly: assemblyConfigSchemasType,
    tracks: mobxStateTree.types.array(pluginManager.pluggableConfigSchemaType('track')),
    connections: mobxStateTree.types.array(pluginManager.pluggableConfigSchemaType('connection')),
    aggregateTextSearchAdapters: mobxStateTree.types.array(pluginManager.pluggableConfigSchemaType('text search adapter')),
    plugins: mobxStateTree.types.frozen()
  }).views(function (self) {
    return {
      get assemblies() {
        return [self.assembly];
      },

      get assemblyName() {
        return configuration.readConfObject(self.assembly, 'name');
      },

      get rpcManager() {
        return mobxStateTree.getParent(self).rpcManager;
      }

    };
  });
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var AboutDialog = /*#__PURE__*/React.lazy(function () {
  return new Promise(function (resolve) { resolve(_interopNamespace(require('@jbrowse/core/ui/AboutDialog'))); });
});
function sessionModelFactory(pluginManager) {
  return mobxStateTree.types.model('ReactLinearGenomeViewSession', {
    name: mobxStateTree.types.identifier,
    margin: 0,
    view: pluginManager.getViewType('LinearGenomeView').stateModel,
    widgets: mobxStateTree.types.map(pluginManager.pluggableMstType('widget', 'stateModel')),
    activeWidgets: mobxStateTree.types.map(mobxStateTree.types.safeReference(pluginManager.pluggableMstType('widget', 'stateModel'))),
    connectionInstances: mobxStateTree.types.array(pluginManager.pluggableMstType('connection', 'stateModel'))
  })["volatile"](function () {
    return (
      /* self */
      {
        /**
         * this is the globally "selected" object. can be anything.
         * code that wants to deal with this should examine it to see what
         * kind of thing it is.
         */
        selection: undefined,

        /**
         * this is the current "task" that is being performed in the UI.
         * this is usually an object of the form
         * `{ taskName: "configure", target: thing_being_configured }`
         */
        task: undefined,
        DialogComponent: undefined,
        DialogProps: undefined
      }
    );
  }).views(function (self) {
    return {
      get rpcManager() {
        return mobxStateTree.getParent(self).rpcManager;
      },

      get configuration() {
        return mobxStateTree.getParent(self).config.configuration;
      },

      get assemblies() {
        return [mobxStateTree.getParent(self).config.assembly];
      },

      get assemblyNames() {
        return [mobxStateTree.getParent(self).config.assemblyName];
      },

      get tracks() {
        return mobxStateTree.getParent(self).config.tracks;
      },

      get aggregateTextSearchAdapters() {
        return mobxStateTree.getParent(self).config.aggregateTextSearchAdapters;
      },

      get connections() {
        return mobxStateTree.getParent(self).config.connections;
      },

      get adminMode() {
        return false;
      },

      get assemblyManager() {
        return mobxStateTree.getParent(self).assemblyManager;
      },

      get version() {
        return '';
      },

      get views() {
        return [self.view];
      },

      get renderProps() {
        return {
          theme: configuration.readConfObject(this.configuration, 'theme')
        };
      },

      get visibleWidget() {
        if (mobxStateTree.isAlive(self)) {
          // returns most recently added item in active widgets
          return Array.from(self.activeWidgets.values())[self.activeWidgets.size - 1];
        }

        return undefined;
      },

      /**
       * See if any MST nodes currently have a types.reference to this object.
       * @param object - object
       * @returns An array where the first element is the node referring
       * to the object and the second element is they property name the node is
       * using to refer to the object
       */
      getReferring: function getReferring(object) {
        var refs = [];
        mobxStateTree.walk(mobxStateTree.getParent(self), function (node) {
          if (mobxStateTree.isModelType(mobxStateTree.getType(node))) {
            var members = mobxStateTree.getMembers(node);
            Object.entries(members.properties).forEach(function (_ref) {
              var key = _ref[0],
                  value = _ref[1];

              // @ts-ignore
              if (mobxStateTree.isReferenceType(value) && node[key] === object) {
                refs.push({
                  node: node,
                  key: key
                });
              }
            });
          }
        });
        return refs;
      }
    };
  }).actions(function (self) {
    return {
      setDialogComponent: function setDialogComponent(comp, props) {
        self.DialogComponent = comp;
        self.DialogProps = props;
      },
      makeConnection: function makeConnection(configuration$1, initialSnapshot) {
        if (initialSnapshot === void 0) {
          initialSnapshot = {};
        }

        var type = configuration$1.type;

        if (!type) {
          throw new Error('track configuration has no `type` listed');
        }

        var name = configuration.readConfObject(configuration$1, 'name');
        var connectionType = pluginManager.getConnectionType(type);

        if (!connectionType) {
          throw new Error("unknown connection type " + type);
        }

        var connectionData = _extends({}, initialSnapshot, {
          name: name,
          type: type,
          configuration: configuration$1
        });

        var length = self.connectionInstances.push(connectionData);
        return self.connectionInstances[length - 1];
      },
      removeReferring: function removeReferring(referring, track, callbacks, dereferenceTypeCount) {
        var _this = this;

        referring.forEach(function (_ref2) {
          var node = _ref2.node;
          var dereferenced = false;

          try {
            // If a view is referring to the track config, remove the track
            // from the view
            var type = 'open track(s)';
            var view = util.getContainingView(node);
            callbacks.push(function () {
              return view.hideTrack(track.trackId);
            });
            dereferenced = true;

            if (!dereferenceTypeCount[type]) {
              dereferenceTypeCount[type] = 0;
            }

            dereferenceTypeCount[type] += 1;
          } catch (err1) {// ignore
          }

          if (_this.hasWidget(node)) {
            // If a configuration editor widget has the track config
            // open, close the widget
            var _type = 'configuration editor widget(s)';
            callbacks.push(function () {
              return _this.hideWidget(node);
            });
            dereferenced = true;

            if (!dereferenceTypeCount[_type]) {
              dereferenceTypeCount[_type] = 0;
            }

            dereferenceTypeCount[_type] += 1;
          }

          if (!dereferenced) {
            throw new Error("Error when closing this connection, the following node is still referring to a track configuration: " + JSON.stringify(mobxStateTree.getSnapshot(node)));
          }
        });
      },
      prepareToBreakConnection: function prepareToBreakConnection(configuration$1) {
        var _this2 = this;

        var callbacksToDereferenceTrack = [];
        var dereferenceTypeCount = {};
        var name = configuration.readConfObject(configuration$1, 'name');
        var connection = self.connectionInstances.find(function (c) {
          return c.name === name;
        });
        connection.tracks.forEach(function (track) {
          var referring = self.getReferring(track);

          _this2.removeReferring(referring, track, callbacksToDereferenceTrack, dereferenceTypeCount);
        });

        var safelyBreakConnection = function safelyBreakConnection() {
          callbacksToDereferenceTrack.forEach(function (cb) {
            return cb();
          });

          _this2.breakConnection(configuration$1);
        };

        return [safelyBreakConnection, dereferenceTypeCount];
      },
      breakConnection: function breakConnection(configuration$1) {
        var name = configuration.readConfObject(configuration$1, 'name');
        var connection = self.connectionInstances.find(function (c) {
          return c.name === name;
        });
        self.connectionInstances.remove(connection);
      },
      addView: function addView(typeName, initialState) {
        if (initialState === void 0) {
          initialState = {};
        }

        var typeDefinition = pluginManager.getElementType('view', typeName);

        if (!typeDefinition) {
          throw new Error("unknown view type " + typeName);
        }

        self.view = _extends({}, initialState, {
          type: typeName
        });
      },
      removeView: function removeView() {},
      addWidget: function addWidget(typeName, id, initialState, configuration) {
        if (initialState === void 0) {
          initialState = {};
        }

        if (configuration === void 0) {
          configuration = {
            type: typeName
          };
        }

        var typeDefinition = pluginManager.getElementType('widget', typeName);

        if (!typeDefinition) {
          throw new Error("unknown widget type " + typeName);
        }

        var data = _extends({}, initialState, {
          id: id,
          type: typeName,
          configuration: configuration
        });

        self.widgets.set(id, data);
        return self.widgets.get(id);
      },
      showWidget: function showWidget(widget) {
        if (self.activeWidgets.has(widget.id)) {
          self.activeWidgets["delete"](widget.id);
        }

        self.activeWidgets.set(widget.id, widget);
      },
      hasWidget: function hasWidget(widget) {
        return self.activeWidgets.has(widget.id);
      },
      hideWidget: function hideWidget(widget) {
        self.activeWidgets["delete"](widget.id);
      },
      hideAllWidgets: function hideAllWidgets() {
        self.activeWidgets.clear();
      },

      /**
       * set the global selection, i.e. the globally-selected object.
       * can be a feature, a view, just about anything
       * @param thing -
       */
      setSelection: function setSelection(thing) {
        self.selection = thing;
      },

      /**
       * clears the global selection
       */
      clearSelection: function clearSelection() {
        self.selection = undefined;
      },
      clearConnections: function clearConnections() {
        self.connectionInstances.length = 0;
      },
      renameCurrentSession: function renameCurrentSession(sessionName) {
        return mobxStateTree.getParent(self).renameCurrentSession(sessionName);
      }
    };
  }).views(function (self) {
    return {
      getTrackActionMenuItems: function getTrackActionMenuItems(config) {
        return [{
          label: 'About track',
          onClick: function onClick() {
            self.setDialogComponent(AboutDialog, {
              config: config
            });
          },
          icon: InfoIcon
        }];
      }
    };
  }).extend(function () {
    var snackbarMessages = mobx.observable.array();
    return {
      views: {
        get snackbarMessages() {
          return snackbarMessages;
        }

      },
      actions: {
        notify: function notify(message, level) {
          return this.pushSnackbarMessage(message, level);
        },
        pushSnackbarMessage: function pushSnackbarMessage(message, level) {
          return snackbarMessages.push([message, level]);
        },
        popSnackbarMessage: function popSnackbarMessage() {
          return snackbarMessages.pop();
        }
      }
    };
  });
} // eslint-disable-next-line @typescript-eslint/no-unused-vars

function createModel(runtimePlugins) {
  var pluginManager = new PluginManager([].concat(corePlugins, runtimePlugins).map(function (P) {
    return new P();
  }));
  pluginManager.createPluggableElements();
  var Session = sessionModelFactory(pluginManager);

  var _createAssemblyConfig = assemblyManagerFactory.assemblyConfigSchemas(pluginManager),
      assemblyConfigSchemas = _createAssemblyConfig.assemblyConfigSchemas,
      dispatcher = _createAssemblyConfig.dispatcher;

  var assemblyConfigSchemasType = mobxStateTree.types.union.apply(mobxStateTree.types, [{
    dispatcher: dispatcher
  }].concat(assemblyConfigSchemas));
  var assemblyManagerType = assemblyManagerFactory__default(assemblyConfigSchemasType, pluginManager);
  var TextSearchManager = pluginManager.load(TextSearchManagerF);
  var rootModel = mobxStateTree.types.model('ReactLinearGenomeView', {
    config: createConfigModel(pluginManager, assemblyConfigSchemasType),
    session: Session,
    assemblyManager: assemblyManagerType,
    error: mobxStateTree.types.maybe(mobxStateTree.types.string)
  }).actions(function (self) {
    return {
      setSession: function setSession(sessionSnapshot) {
        self.session = mobxStateTree.cast(sessionSnapshot);
      },
      renameCurrentSession: function renameCurrentSession(sessionName) {
        if (self.session) {
          var snapshot = JSON.parse(JSON.stringify(mobxStateTree.getSnapshot(self.session)));
          snapshot.name = sessionName;
          this.setSession(snapshot);
        }
      },
      setError: function setError(errorMessage) {
        self.error = String(errorMessage);
      }
    };
  }).views(function (self) {
    return {
      get jbrowse() {
        return self.config;
      }

    };
  })["volatile"](function (self) {
    return {
      rpcManager: new RpcManager(pluginManager, self.config.configuration.rpc, {
        MainThreadRpcDriver: {}
      }),
      textSearchManager: new TextSearchManager()
    };
  });
  return {
    model: rootModel,
    pluginManager: pluginManager
  };
}

function createViewState(opts) {
  var assembly = opts.assembly,
      tracks = opts.tracks,
      configuration = opts.configuration,
      aggregateTextSearchAdapters = opts.aggregateTextSearchAdapters,
      plugins = opts.plugins,
      location = opts.location,
      onChange = opts.onChange;

  var _createModel = createModel(plugins || []),
      model = _createModel.model,
      pluginManager = _createModel.pluginManager;

  var defaultSession = opts.defaultSession;

  if (!defaultSession) {
    defaultSession = {
      name: 'this session',
      view: {
        id: 'linearGenomeView',
        type: 'LinearGenomeView'
      }
    };
  }

  var stateSnapshot = {
    config: {
      configuration: configuration,
      assembly: assembly,
      tracks: tracks,
      aggregateTextSearchAdapters: aggregateTextSearchAdapters,
      defaultSession: defaultSession
    },
    assemblyManager: {},
    session: defaultSession
  };
  var stateTree = model.create(stateSnapshot, {
    pluginManager: pluginManager
  });
  pluginManager.setRootModel(stateTree);
  pluginManager.configure();

  if (location) {
    mobx.autorun(function (reaction) {
      if (stateTree.assemblyManager.allPossibleRefNames && stateTree.assemblyManager.allPossibleRefNames.length) {
        if (stateTree.session.view.initialized) {
          if (typeof location === 'string') {
            var assemblyName = stateTree.assemblyManager.assemblies[0].name;
            stateTree.session.view.navToLocString(location, assemblyName);
          } else {
            stateTree.session.view.navTo(location);
          }

          reaction.dispose();
        }
      }
    });
  }

  if (onChange) {
    mobxStateTree.onPatch(stateTree, onChange);
  }

  return stateTree;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime_1 = /*#__PURE__*/createCommonjsModule(function (module) {
  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  var runtime = function (exports) {

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined$1; // More compressible than void 0.

    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    function define(obj, key, value) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
      return obj[key];
    }

    try {
      // IE 8 has a broken Object.defineProperty that only works on DOM objects.
      define({}, "");
    } catch (err) {
      define = function define(obj, key, value) {
        return obj[key] = value;
      };
    }

    function wrap(innerFn, outerFn, self, tryLocsList) {
      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
      // .throw, and .return methods.

      generator._invoke = makeInvokeMethod(innerFn, self, context);
      return generator;
    }

    exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.

    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.

    var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.

    function Generator() {}

    function GeneratorFunction() {}

    function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.


    var IteratorPrototype = {};

    IteratorPrototype[iteratorSymbol] = function () {
      return this;
    };

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      // This environment has a native %IteratorPrototype%; use it instead
      // of the polyfill.
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.

    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        define(prototype, method, function (arg) {
          return this._invoke(method, arg);
        });
      });
    }

    exports.isGeneratorFunction = function (genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
      // do is to check its .name property.
      (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };

    exports.mark = function (genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
        define(genFun, toStringTagSymbol, "GeneratorFunction");
      }

      genFun.prototype = Object.create(Gp);
      return genFun;
    }; // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.


    exports.awrap = function (arg) {
      return {
        __await: arg
      };
    };

    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);

        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;

          if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
            return PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return PromiseImpl.resolve(value).then(function (unwrapped) {
            // When a yielded Promise is resolved, its final value becomes
            // the .value of the Promise<{value,done}> result for the
            // current iteration.
            result.value = unwrapped;
            resolve(result);
          }, function (error) {
            // If a rejected Promise was yielded, throw the rejection back
            // into the async generator function so it can be handled there.
            return invoke("throw", error, resolve, reject);
          });
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise = // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
        // invocations of the iterator.
        callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      } // Define the unified helper method that is used to implement .next,
      // .throw, and .return (see defineIteratorMethods).


      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);

    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
      return this;
    };

    exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.

    exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      if (PromiseImpl === void 0) PromiseImpl = Promise;
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
      return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;
      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          } // Be forgiving, per 25.3.3.3.3 of the spec:
          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            // Setting context._sent for legacy support of Babel's
            // function.sent implementation.
            context.sent = context._sent = context.arg;
          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);
          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;
          var record = tryCatch(innerFn, self, context);

          if (record.type === "normal") {
            // If an exception is thrown from innerFn, we leave state ===
            // GenStateExecuting and loop back for another invocation.
            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };
          } else if (record.type === "throw") {
            state = GenStateCompleted; // Dispatch the exception by looping back around to the
            // context.dispatchException(context.arg) call above.

            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    } // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.


    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];

      if (method === undefined$1) {
        // A .throw or .return when the delegate iterator has no .throw
        // method always terminates the yield* loop.
        context.delegate = null;

        if (context.method === "throw") {
          // Note: ["return"] must be used for ES3 parsing compatibility.
          if (delegate.iterator["return"]) {
            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            context.method = "return";
            context.arg = undefined$1;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              // If maybeInvokeDelegate(context) changed context.method from
              // "return" to "throw", let that override the TypeError below.
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError("The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (!info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        // Assign the result of the finished delegate to the temporary
        // variable specified by delegate.resultName (see delegateYield).
        context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

        context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
        // exception, let the outer generator proceed normally. If
        // context.method was "next", forget context.arg since it has been
        // "consumed" by the delegate iterator. If context.method was
        // "return", allow the original .return call to continue in the
        // outer generator.

        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined$1;
        }
      } else {
        // Re-yield the result returned by the delegate method.
        return info;
      } // The delegate iterator is finished, so forget it and continue with
      // the outer generator.


      context.delegate = null;
      return ContinueSentinel;
    } // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.


    defineIteratorMethods(Gp);
    define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.

    Gp[iteratorSymbol] = function () {
      return this;
    };

    Gp.toString = function () {
      return "[object Generator]";
    };

    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      // The root entry object (effectively a try statement without a catch
      // or a finally block) gives us a place to store values thrown from
      // locations where there is no enclosing try statement.
      this.tryEntries = [{
        tryLoc: "root"
      }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    exports.keys = function (object) {
      var keys = [];

      for (var key in object) {
        keys.push(key);
      }

      keys.reverse(); // Rather than returning an object with a next method, we keep
      // things simple and return the next function itself.

      return function next() {
        while (keys.length) {
          var key = keys.pop();

          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        } // To avoid creating an additional object, we just hang the .value
        // and .done properties off the next function object itself. This
        // also ensures that the minifier will not anonymize the function.


        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];

        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1,
              next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined$1;
            next.done = true;
            return next;
          };

          return next.next = next;
        }
      } // Return an iterator with no values.


      return {
        next: doneResult
      };
    }

    exports.values = values;

    function doneResult() {
      return {
        value: undefined$1,
        done: true
      };
    }

    Context.prototype = {
      constructor: Context,
      reset: function reset(skipTempReset) {
        this.prev = 0;
        this.next = 0; // Resetting context._sent for legacy support of Babel's
        // function.sent implementation.

        this.sent = this._sent = undefined$1;
        this.done = false;
        this.delegate = null;
        this.method = "next";
        this.arg = undefined$1;
        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            // Not sure about the optimal order of these conditions:
            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
              this[name] = undefined$1;
            }
          }
        }
      },
      stop: function stop() {
        this.done = true;
        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;

        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },
      dispatchException: function dispatchException(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;

        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            context.method = "next";
            context.arg = undefined$1;
          }

          return !!caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            // Exception thrown outside of any try block that could handle
            // it, so set the completion value of the entire function to
            // throw the exception.
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },
      abrupt: function abrupt(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          // Ignore the finally entry if control is not jumping to a
          // location outside the try/catch block.
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },
      complete: function complete(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },
      finish: function finish(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },
      "catch": function _catch(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;

            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }

            return thrown;
          }
        } // The context.catch method must only be called with a location
        // argument that corresponds to a known catch block.


        throw new Error("illegal catch attempt");
      },
      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          // Deliberately forget the last sent value so that we don't
          // accidentally pass it on to the delegate.
          this.arg = undefined$1;
        }

        return ContinueSentinel;
      }
    }; // Regardless of whether this script is executing as a CommonJS module
    // or not, return the runtime object so that we can declare the variable
    // regeneratorRuntime in the outer scope, which allows this module to be
    // injected easily by `bin/regenerator --include-runtime script.js`.

    return exports;
  }( // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports );

  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    // This module should not be running in strict mode, so the above
    // assignment should always work unless something is misconfigured. Just
    // in case runtime.js accidentally runs in strict mode, we can escape
    // strict mode using a global Function call. This could conceivably fail
    // if a Content Security Policy forbids using Function, but in that case
    // the proper solution is to fix the accidental strict mode problem. If
    // you've misconfigured your bundler to force strict mode and applied a
    // CSP to forbid Function, and you're not willing to fix either of those
    // problems, please detail your unique predicament in a GitHub issue.
    Function("r", "regeneratorRuntime = r")(runtime);
  }
});

function loadPlugins(_x) {
  return _loadPlugins.apply(this, arguments);
}

function _loadPlugins() {
  _loadPlugins = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(pluginDefinitions) {
    var pluginLoader, runtimePlugins;
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            pluginLoader = new PluginLoader(pluginDefinitions);
            pluginLoader.installGlobalReExports(window);
            _context.next = 4;
            return pluginLoader.load();

          case 4:
            runtimePlugins = _context.sent;
            return _context.abrupt("return", runtimePlugins);

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _loadPlugins.apply(this, arguments);
}

exports.JBrowseLinearGenomeView = JBrowseLinearGenomeView;
exports.ThemeProvider = ThemeProvider;
exports.createJBrowseTheme = createJBrowseTheme;
exports.createModel = createModel;
exports.createViewState = createViewState;
exports.loadPlugins = loadPlugins;
//# sourceMappingURL=react-linear-genome-view.cjs.development.js.map
