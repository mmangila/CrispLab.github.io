/// <reference types="react" />
import { AnyConfigurationModel } from '@jbrowse/core/configuration/configurationSchema';
import { IAnyStateTreeNode, Instance } from 'mobx-state-tree';
import PluginManager from '@jbrowse/core/PluginManager';
import { ReferringNode } from '../types';
export default function sessionModelFactory(pluginManager: PluginManager): import("mobx-state-tree").IModelType<{
    name: import("mobx-state-tree").ISimpleType<string>;
    margin: import("mobx-state-tree").IType<number | undefined, number, number>;
    view: import("mobx-state-tree").IAnyModelType;
    widgets: import("mobx-state-tree").IMapType<import("mobx-state-tree").IAnyType>;
    activeWidgets: import("mobx-state-tree").IMapType<import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>>;
    connectionInstances: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
}, {
    /**
     * this is the globally "selected" object. can be anything.
     * code that wants to deal with this should examine it to see what
     * kind of thing it is.
     */
    selection: undefined;
    /**
     * this is the current "task" that is being performed in the UI.
     * this is usually an object of the form
     * `{ taskName: "configure", target: thing_being_configured }`
     */
    task: undefined;
    DialogComponent: import("react").FC<any> | import("react").LazyExoticComponent<import("react").FC<any>> | undefined;
    DialogProps: any;
} & {
    readonly rpcManager: any;
    readonly configuration: any;
    readonly assemblies: any[];
    readonly assemblyNames: any[];
    readonly tracks: any;
    readonly aggregateTextSearchAdapters: any;
    readonly connections: any;
    readonly adminMode: boolean;
    readonly assemblyManager: any;
    readonly version: string;
    readonly views: any[];
    readonly renderProps: {
        theme: any;
    };
    readonly visibleWidget: any;
    /**
     * See if any MST nodes currently have a types.reference to this object.
     * @param object - object
     * @returns An array where the first element is the node referring
     * to the object and the second element is they property name the node is
     * using to refer to the object
     */
    getReferring(object: IAnyStateTreeNode): ReferringNode[];
} & {
    setDialogComponent(comp?: import("react").FC<any> | import("react").LazyExoticComponent<import("react").FC<any>> | undefined, props?: any): void;
    makeConnection(configuration: AnyConfigurationModel, initialSnapshot?: {}): any;
    removeReferring(referring: any, track: any, callbacks: Function[], dereferenceTypeCount: Record<string, number>): void;
    prepareToBreakConnection(configuration: AnyConfigurationModel): (Record<string, number> | (() => void))[];
    breakConnection(configuration: AnyConfigurationModel): void;
    addView(typeName: string, initialState?: {}): void;
    removeView(): void;
    addWidget(typeName: string, id: string, initialState?: {}, configuration?: {
        type: string;
    }): any;
    showWidget(widget: any): void;
    hasWidget(widget: any): boolean;
    hideWidget(widget: any): void;
    hideAllWidgets(): void;
    /**
     * set the global selection, i.e. the globally-selected object.
     * can be a feature, a view, just about anything
     * @param thing -
     */
    setSelection(thing: any): void;
    /**
     * clears the global selection
     */
    clearSelection(): void;
    clearConnections(): void;
    renameCurrentSession(sessionName: string): any;
} & {
    getTrackActionMenuItems(config: any): {
        label: string;
        onClick: () => void;
        icon: import("@material-ui/core/OverridableComponent").OverridableComponent<import("@material-ui/core").SvgIconTypeMap<{}, "svg">>;
    }[];
} & {
    notify(message: string, level?: "error" | "info" | "warning" | "success" | undefined): number;
    pushSnackbarMessage(message: string, level?: "error" | "info" | "warning" | "success" | undefined): number;
    popSnackbarMessage(): any;
} & {
    readonly snackbarMessages: import("mobx").IObservableArray<any>;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export declare type SessionStateModel = ReturnType<typeof sessionModelFactory>;
export declare type SessionModel = Instance<SessionStateModel>;
