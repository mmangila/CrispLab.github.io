/// <reference types="react" />
import { PluginConstructor } from '@jbrowse/core/Plugin';
import { SnapshotIn, IJsonPatch } from 'mobx-state-tree';
import { createSessionModel, createConfigModel } from './createModel';
declare type SessionSnapshot = SnapshotIn<ReturnType<typeof createSessionModel>>;
declare type ConfigSnapshot = SnapshotIn<ReturnType<typeof createConfigModel>>;
declare type Assembly = ConfigSnapshot['assembly'];
declare type Tracks = ConfigSnapshot['tracks'];
declare type AggregateTextSearchAdapters = ConfigSnapshot['aggregateTextSearchAdapters'];
interface Location {
    refName: string;
    start?: number;
    end?: number;
    assemblyName?: string;
}
interface ViewStateOptions {
    assembly: Assembly;
    tracks: Tracks;
    aggregateTextSearchAdapters?: AggregateTextSearchAdapters;
    configuration?: Record<string, unknown>;
    plugins?: PluginConstructor[];
    location?: string | Location;
    defaultSession?: SessionSnapshot;
    onChange?: (patch: IJsonPatch, reversePatch: IJsonPatch) => void;
}
export default function createViewState(opts: ViewStateOptions): import("mobx-state-tree").ModelInstanceTypeProps<{
    config: import("mobx-state-tree").IModelType<{
        configuration: import("@jbrowse/core/configuration/configurationSchema").AnyConfigurationSchemaType;
        assembly: import("mobx-state-tree").IAnyType;
        tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
        connections: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
        aggregateTextSearchAdapters: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
        plugins: import("mobx-state-tree").IType<any, any, any>;
    }, {
        readonly assemblies: any[];
        readonly assemblyName: string;
        readonly rpcManager: any;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
    session: import("mobx-state-tree").IModelType<{
        name: import("mobx-state-tree").ISimpleType<string>;
        margin: import("mobx-state-tree").IType<number | undefined, number, number>;
        view: import("mobx-state-tree").IAnyModelType;
        widgets: import("mobx-state-tree").IMapType<import("mobx-state-tree").IAnyType>;
        activeWidgets: import("mobx-state-tree").IMapType<import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>>;
        connectionInstances: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
    }, {
        selection: undefined;
        task: undefined;
        DialogComponent: import("react").FC<any> | import("react").LazyExoticComponent<import("react").FC<any>> | undefined;
        DialogProps: any;
    } & {
        readonly rpcManager: any;
        readonly configuration: any;
        readonly assemblies: any[];
        readonly assemblyNames: any[];
        readonly tracks: any;
        readonly aggregateTextSearchAdapters: any;
        readonly connections: any;
        readonly adminMode: boolean;
        readonly assemblyManager: any;
        readonly version: string;
        readonly views: any[];
        readonly renderProps: {
            theme: any;
        };
        readonly visibleWidget: any;
        getReferring(object: import("mobx-state-tree").IAnyStateTreeNode): import("./types").ReferringNode[];
    } & {
        setDialogComponent(comp?: import("react").FC<any> | import("react").LazyExoticComponent<import("react").FC<any>> | undefined, props?: any): void;
        makeConnection(configuration: import("mobx-state-tree").ModelInstanceTypeProps<Record<string, any>> & {
            setSubschema(slotName: string, data: import("mobx-state-tree").ModelPropertiesDeclaration | import("@jbrowse/core/configuration/configurationSchema").AnyConfigurationSchemaType): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration/configurationSchema").AnyConfigurationSchemaType>, initialSnapshot?: {}): any;
        removeReferring(referring: any, track: any, callbacks: Function[], dereferenceTypeCount: Record<string, number>): void;
        prepareToBreakConnection(configuration: import("mobx-state-tree").ModelInstanceTypeProps<Record<string, any>> & {
            setSubschema(slotName: string, data: import("mobx-state-tree").ModelPropertiesDeclaration | import("@jbrowse/core/configuration/configurationSchema").AnyConfigurationSchemaType): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration/configurationSchema").AnyConfigurationSchemaType>): (Record<string, number> | (() => void))[];
        breakConnection(configuration: import("mobx-state-tree").ModelInstanceTypeProps<Record<string, any>> & {
            setSubschema(slotName: string, data: import("mobx-state-tree").ModelPropertiesDeclaration | import("@jbrowse/core/configuration/configurationSchema").AnyConfigurationSchemaType): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration/configurationSchema").AnyConfigurationSchemaType>): void;
        addView(typeName: string, initialState?: {}): void;
        removeView(): void;
        addWidget(typeName: string, id: string, initialState?: {}, configuration?: {
            type: string;
        }): any;
        showWidget(widget: any): void;
        hasWidget(widget: any): boolean;
        hideWidget(widget: any): void;
        hideAllWidgets(): void;
        setSelection(thing: any): void;
        clearSelection(): void;
        clearConnections(): void;
        renameCurrentSession(sessionName: string): any;
    } & {
        getTrackActionMenuItems(config: any): {
            label: string;
            onClick: () => void;
            icon: import("@material-ui/core/OverridableComponent").OverridableComponent<import("@material-ui/core").SvgIconTypeMap<{}, "svg">>;
        }[];
    } & {
        notify(message: string, level?: "error" | "info" | "warning" | "success" | undefined): number;
        pushSnackbarMessage(message: string, level?: "error" | "info" | "warning" | "success" | undefined): number;
        popSnackbarMessage(): any;
    } & {
        readonly snackbarMessages: import("mobx").IObservableArray<any>;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
    assemblyManager: import("mobx-state-tree").IModelType<{
        assemblies: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
            configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
        }, {
            regions: {
                start: number;
                end: number;
                refName: string;
                assemblyName: string;
            }[] | undefined;
            refNameAliases: {
                [key: string]: string;
            } | undefined;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly aliases: string[];
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly refNames: string[] | undefined;
            readonly allRefNames: string[] | undefined;
            readonly rpcManager: any;
            readonly refNameColors: string[];
        } & {
            getCanonicalRefName(refName: string): string;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoading(): void;
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, }: {
                adapterRegionsWithAssembly: import("@jbrowse/core/util").Region[];
                refNameAliases: Record<string, string>;
            }): void;
            setError(error: Error): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(refNameAliases: Record<string, string>): void;
            afterAttach(): void;
        } & {
            getAdapterMapEntry(adapterConf: unknown, options: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                forwardMap: Record<string, string>;
                reverseMap: Record<string, string>;
            }>;
            getRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<Record<string, string>>;
            getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<Record<string, string>>;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    }, {
        get(assemblyName: string): (import("mobx-state-tree").ModelInstanceTypeProps<{
            configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
        }> & {
            regions: {
                start: number;
                end: number;
                refName: string;
                assemblyName: string;
            }[] | undefined;
            refNameAliases: {
                [key: string]: string;
            } | undefined;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly aliases: string[];
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly refNames: string[] | undefined;
            readonly allRefNames: string[] | undefined;
            readonly rpcManager: any;
            readonly refNameColors: string[];
        } & {
            getCanonicalRefName(refName: string): string;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoading(): void;
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, }: {
                adapterRegionsWithAssembly: import("@jbrowse/core/util").Region[];
                refNameAliases: Record<string, string>;
            }): void;
            setError(error: Error): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(refNameAliases: Record<string, string>): void;
            afterAttach(): void;
        } & {
            getAdapterMapEntry(adapterConf: unknown, options: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                forwardMap: Record<string, string>;
                reverseMap: Record<string, string>;
            }>;
            getRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<Record<string, string>>;
            getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<Record<string, string>>;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
        }, {
            regions: {
                start: number;
                end: number;
                refName: string;
                assemblyName: string;
            }[] | undefined;
            refNameAliases: {
                [key: string]: string;
            } | undefined;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly aliases: string[];
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly refNames: string[] | undefined;
            readonly allRefNames: string[] | undefined;
            readonly rpcManager: any;
            readonly refNameColors: string[];
        } & {
            getCanonicalRefName(refName: string): string;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoading(): void;
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, }: {
                adapterRegionsWithAssembly: import("@jbrowse/core/util").Region[];
                refNameAliases: Record<string, string>;
            }): void;
            setError(error: Error): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(refNameAliases: Record<string, string>): void;
            afterAttach(): void;
        } & {
            getAdapterMapEntry(adapterConf: unknown, options: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                forwardMap: Record<string, string>;
                reverseMap: Record<string, string>;
            }>;
            getRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<Record<string, string>>;
            getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<Record<string, string>>;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
        readonly assemblyList: (import("mobx-state-tree").ModelInstanceTypeProps<Record<string, any>> & {
            setSubschema(slotName: string, data: import("mobx-state-tree").ModelPropertiesDeclaration | import("@jbrowse/core/configuration/configurationSchema").AnyConfigurationSchemaType): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration/configurationSchema").AnyConfigurationSchemaType> & {
            name: string;
        })[];
        readonly rpcManager: any;
        readonly pluginManager: any;
        readonly allPossibleRefNames: string[] | undefined;
    } & {
        waitForAssembly(assemblyName: string): Promise<(import("mobx-state-tree").ModelInstanceTypeProps<{
            configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
        }> & {
            regions: {
                start: number;
                end: number;
                refName: string;
                assemblyName: string;
            }[] | undefined;
            refNameAliases: {
                [key: string]: string;
            } | undefined;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly aliases: string[];
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly refNames: string[] | undefined;
            readonly allRefNames: string[] | undefined;
            readonly rpcManager: any;
            readonly refNameColors: string[];
        } & {
            getCanonicalRefName(refName: string): string;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoading(): void;
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, }: {
                adapterRegionsWithAssembly: import("@jbrowse/core/util").Region[];
                refNameAliases: Record<string, string>;
            }): void;
            setError(error: Error): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(refNameAliases: Record<string, string>): void;
            afterAttach(): void;
        } & {
            getAdapterMapEntry(adapterConf: unknown, options: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                forwardMap: Record<string, string>;
                reverseMap: Record<string, string>;
            }>;
            getRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<Record<string, string>>;
            getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<Record<string, string>>;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
        }, {
            regions: {
                start: number;
                end: number;
                refName: string;
                assemblyName: string;
            }[] | undefined;
            refNameAliases: {
                [key: string]: string;
            } | undefined;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly aliases: string[];
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly refNames: string[] | undefined;
            readonly allRefNames: string[] | undefined;
            readonly rpcManager: any;
            readonly refNameColors: string[];
        } & {
            getCanonicalRefName(refName: string): string;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoading(): void;
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, }: {
                adapterRegionsWithAssembly: import("@jbrowse/core/util").Region[];
                refNameAliases: Record<string, string>;
            }): void;
            setError(error: Error): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(refNameAliases: Record<string, string>): void;
            afterAttach(): void;
        } & {
            getAdapterMapEntry(adapterConf: unknown, options: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                forwardMap: Record<string, string>;
                reverseMap: Record<string, string>;
            }>;
            getRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<Record<string, string>>;
            getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<Record<string, string>>;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined>;
        getRefNameMapForAdapter(adapterConf: unknown, assemblyName: string, opts: {
            signal?: AbortSignal | undefined;
            sessionId: string;
        }): Promise<Record<string, string> | undefined>;
        getReverseRefNameMapForAdapter(adapterConf: unknown, assemblyName: string, opts: {
            signal?: AbortSignal | undefined;
            sessionId: string;
        }): Promise<Record<string, string> | undefined>;
        isValidRefName(refName: string, assemblyName?: string | undefined): boolean;
    } & {
        removeAssembly(asm: import("mobx-state-tree").ModelInstanceTypeProps<{
            configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
        }> & {
            regions: {
                start: number;
                end: number;
                refName: string;
                assemblyName: string;
            }[] | undefined;
            refNameAliases: {
                [key: string]: string;
            } | undefined;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly aliases: string[];
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly refNames: string[] | undefined;
            readonly allRefNames: string[] | undefined;
            readonly rpcManager: any;
            readonly refNameColors: string[];
        } & {
            getCanonicalRefName(refName: string): string;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoading(): void;
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, }: {
                adapterRegionsWithAssembly: import("@jbrowse/core/util").Region[];
                refNameAliases: Record<string, string>;
            }): void;
            setError(error: Error): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(refNameAliases: Record<string, string>): void;
            afterAttach(): void;
        } & {
            getAdapterMapEntry(adapterConf: unknown, options: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                forwardMap: Record<string, string>;
                reverseMap: Record<string, string>;
            }>;
            getRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<Record<string, string>>;
            getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<Record<string, string>>;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
        }, {
            regions: {
                start: number;
                end: number;
                refName: string;
                assemblyName: string;
            }[] | undefined;
            refNameAliases: {
                [key: string]: string;
            } | undefined;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly aliases: string[];
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly refNames: string[] | undefined;
            readonly allRefNames: string[] | undefined;
            readonly rpcManager: any;
            readonly refNameColors: string[];
        } & {
            getCanonicalRefName(refName: string): string;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoading(): void;
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, }: {
                adapterRegionsWithAssembly: import("@jbrowse/core/util").Region[];
                refNameAliases: Record<string, string>;
            }): void;
            setError(error: Error): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(refNameAliases: Record<string, string>): void;
            afterAttach(): void;
        } & {
            getAdapterMapEntry(adapterConf: unknown, options: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                forwardMap: Record<string, string>;
                reverseMap: Record<string, string>;
            }>;
            getRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<Record<string, string>>;
            getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<Record<string, string>>;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>): void;
        afterAttach(): void;
        addAssembly(assemblyConfig: any): void;
        replaceAssembly(idx: number, assemblyConfig: any): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
    error: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
}> & {
    setSession(sessionSnapshot: import("mobx-state-tree").ModelCreationType<import("mobx-state-tree/dist/internal").ExtractCFromProps<{
        name: import("mobx-state-tree").ISimpleType<string>;
        margin: import("mobx-state-tree").IType<number | undefined, number, number>;
        view: import("mobx-state-tree").IAnyModelType;
        widgets: import("mobx-state-tree").IMapType<import("mobx-state-tree").IAnyType>;
        activeWidgets: import("mobx-state-tree").IMapType<import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>>;
        connectionInstances: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
    }>>): void;
    renameCurrentSession(sessionName: string): void;
    setError(errorMessage: string | Error): void;
} & {
    readonly jbrowse: import("mobx-state-tree").ModelInstanceTypeProps<{
        configuration: import("@jbrowse/core/configuration/configurationSchema").AnyConfigurationSchemaType;
        assembly: import("mobx-state-tree").IAnyType;
        tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
        connections: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
        aggregateTextSearchAdapters: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
        plugins: import("mobx-state-tree").IType<any, any, any>;
    }> & {
        readonly assemblies: any[];
        readonly assemblyName: string;
        readonly rpcManager: any;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        configuration: import("@jbrowse/core/configuration/configurationSchema").AnyConfigurationSchemaType;
        assembly: import("mobx-state-tree").IAnyType;
        tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
        connections: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
        aggregateTextSearchAdapters: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
        plugins: import("mobx-state-tree").IType<any, any, any>;
    }, {
        readonly assemblies: any[];
        readonly assemblyName: string;
        readonly rpcManager: any;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
} & {
    rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
    textSearchManager: {
        adapterCache: any;
        textSearchAdapters: import("@jbrowse/core/data_adapters/BaseAdapter").BaseTextSearchAdapter[];
        loadTextSearchAdapters(searchScope: import("@jbrowse/core/TextSearch/TextSearchManager").SearchScope): import("@jbrowse/core/data_adapters/BaseAdapter").BaseTextSearchAdapter[];
        relevantAdapters(searchScope: import("@jbrowse/core/TextSearch/TextSearchManager").SearchScope): (import("mobx-state-tree").ModelInstanceTypeProps<Record<string, any>> & {
            setSubschema(slotName: string, data: import("mobx-state-tree").ModelPropertiesDeclaration | import("@jbrowse/core/configuration/configurationSchema").AnyConfigurationSchemaType): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration/configurationSchema").AnyConfigurationSchemaType>)[];
        getAdaptersWithAssembly(searchScopeAssemblyName: string, adapterList: (import("mobx-state-tree").ModelInstanceTypeProps<Record<string, any>> & {
            setSubschema(slotName: string, data: import("mobx-state-tree").ModelPropertiesDeclaration | import("@jbrowse/core/configuration/configurationSchema").AnyConfigurationSchemaType): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration/configurationSchema").AnyConfigurationSchemaType>)[]): (import("mobx-state-tree").ModelInstanceTypeProps<Record<string, any>> & {
            setSubschema(slotName: string, data: import("mobx-state-tree").ModelPropertiesDeclaration | import("@jbrowse/core/configuration/configurationSchema").AnyConfigurationSchemaType): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration/configurationSchema").AnyConfigurationSchemaType>)[];
        search(args: import("@jbrowse/core/TextSearch/TextSearchManager").BaseArgs, searchScope: import("@jbrowse/core/TextSearch/TextSearchManager").SearchScope, rankSearchResults: (results: import("@jbrowse/core/TextSearch/BaseResults").default[]) => import("@jbrowse/core/TextSearch/BaseResults").default[]): Promise<import("@jbrowse/core/TextSearch/BaseResults").default[]>;
        sortResults(results: import("@jbrowse/core/TextSearch/BaseResults").default[], rankSearchResults: (results: import("@jbrowse/core/TextSearch/BaseResults").default[]) => import("@jbrowse/core/TextSearch/BaseResults").default[]): import("@jbrowse/core/TextSearch/BaseResults").default[];
    };
} & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
    config: import("mobx-state-tree").IModelType<{
        configuration: import("@jbrowse/core/configuration/configurationSchema").AnyConfigurationSchemaType;
        assembly: import("mobx-state-tree").IAnyType;
        tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
        connections: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
        aggregateTextSearchAdapters: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
        plugins: import("mobx-state-tree").IType<any, any, any>;
    }, {
        readonly assemblies: any[];
        readonly assemblyName: string;
        readonly rpcManager: any;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
    session: import("mobx-state-tree").IModelType<{
        name: import("mobx-state-tree").ISimpleType<string>;
        margin: import("mobx-state-tree").IType<number | undefined, number, number>;
        view: import("mobx-state-tree").IAnyModelType;
        widgets: import("mobx-state-tree").IMapType<import("mobx-state-tree").IAnyType>;
        activeWidgets: import("mobx-state-tree").IMapType<import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>>;
        connectionInstances: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
    }, {
        selection: undefined;
        task: undefined;
        DialogComponent: import("react").FC<any> | import("react").LazyExoticComponent<import("react").FC<any>> | undefined;
        DialogProps: any;
    } & {
        readonly rpcManager: any;
        readonly configuration: any;
        readonly assemblies: any[];
        readonly assemblyNames: any[];
        readonly tracks: any;
        readonly aggregateTextSearchAdapters: any;
        readonly connections: any;
        readonly adminMode: boolean;
        readonly assemblyManager: any;
        readonly version: string;
        readonly views: any[];
        readonly renderProps: {
            theme: any;
        };
        readonly visibleWidget: any;
        getReferring(object: import("mobx-state-tree").IAnyStateTreeNode): import("./types").ReferringNode[];
    } & {
        setDialogComponent(comp?: import("react").FC<any> | import("react").LazyExoticComponent<import("react").FC<any>> | undefined, props?: any): void;
        makeConnection(configuration: import("mobx-state-tree").ModelInstanceTypeProps<Record<string, any>> & {
            setSubschema(slotName: string, data: import("mobx-state-tree").ModelPropertiesDeclaration | import("@jbrowse/core/configuration/configurationSchema").AnyConfigurationSchemaType): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration/configurationSchema").AnyConfigurationSchemaType>, initialSnapshot?: {}): any;
        removeReferring(referring: any, track: any, callbacks: Function[], dereferenceTypeCount: Record<string, number>): void;
        prepareToBreakConnection(configuration: import("mobx-state-tree").ModelInstanceTypeProps<Record<string, any>> & {
            setSubschema(slotName: string, data: import("mobx-state-tree").ModelPropertiesDeclaration | import("@jbrowse/core/configuration/configurationSchema").AnyConfigurationSchemaType): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration/configurationSchema").AnyConfigurationSchemaType>): (Record<string, number> | (() => void))[];
        breakConnection(configuration: import("mobx-state-tree").ModelInstanceTypeProps<Record<string, any>> & {
            setSubschema(slotName: string, data: import("mobx-state-tree").ModelPropertiesDeclaration | import("@jbrowse/core/configuration/configurationSchema").AnyConfigurationSchemaType): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration/configurationSchema").AnyConfigurationSchemaType>): void;
        addView(typeName: string, initialState?: {}): void;
        removeView(): void;
        addWidget(typeName: string, id: string, initialState?: {}, configuration?: {
            type: string;
        }): any;
        showWidget(widget: any): void;
        hasWidget(widget: any): boolean;
        hideWidget(widget: any): void;
        hideAllWidgets(): void;
        setSelection(thing: any): void;
        clearSelection(): void;
        clearConnections(): void;
        renameCurrentSession(sessionName: string): any;
    } & {
        getTrackActionMenuItems(config: any): {
            label: string;
            onClick: () => void;
            icon: import("@material-ui/core/OverridableComponent").OverridableComponent<import("@material-ui/core").SvgIconTypeMap<{}, "svg">>;
        }[];
    } & {
        notify(message: string, level?: "error" | "info" | "warning" | "success" | undefined): number;
        pushSnackbarMessage(message: string, level?: "error" | "info" | "warning" | "success" | undefined): number;
        popSnackbarMessage(): any;
    } & {
        readonly snackbarMessages: import("mobx").IObservableArray<any>;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
    assemblyManager: import("mobx-state-tree").IModelType<{
        assemblies: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
            configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
        }, {
            regions: {
                start: number;
                end: number;
                refName: string;
                assemblyName: string;
            }[] | undefined;
            refNameAliases: {
                [key: string]: string;
            } | undefined;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly aliases: string[];
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly refNames: string[] | undefined;
            readonly allRefNames: string[] | undefined;
            readonly rpcManager: any;
            readonly refNameColors: string[];
        } & {
            getCanonicalRefName(refName: string): string;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoading(): void;
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, }: {
                adapterRegionsWithAssembly: import("@jbrowse/core/util").Region[];
                refNameAliases: Record<string, string>;
            }): void;
            setError(error: Error): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(refNameAliases: Record<string, string>): void;
            afterAttach(): void;
        } & {
            getAdapterMapEntry(adapterConf: unknown, options: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                forwardMap: Record<string, string>;
                reverseMap: Record<string, string>;
            }>;
            getRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<Record<string, string>>;
            getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<Record<string, string>>;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    }, {
        get(assemblyName: string): (import("mobx-state-tree").ModelInstanceTypeProps<{
            configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
        }> & {
            regions: {
                start: number;
                end: number;
                refName: string;
                assemblyName: string;
            }[] | undefined;
            refNameAliases: {
                [key: string]: string;
            } | undefined;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly aliases: string[];
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly refNames: string[] | undefined;
            readonly allRefNames: string[] | undefined;
            readonly rpcManager: any;
            readonly refNameColors: string[];
        } & {
            getCanonicalRefName(refName: string): string;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoading(): void;
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, }: {
                adapterRegionsWithAssembly: import("@jbrowse/core/util").Region[];
                refNameAliases: Record<string, string>;
            }): void;
            setError(error: Error): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(refNameAliases: Record<string, string>): void;
            afterAttach(): void;
        } & {
            getAdapterMapEntry(adapterConf: unknown, options: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                forwardMap: Record<string, string>;
                reverseMap: Record<string, string>;
            }>;
            getRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<Record<string, string>>;
            getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<Record<string, string>>;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
        }, {
            regions: {
                start: number;
                end: number;
                refName: string;
                assemblyName: string;
            }[] | undefined;
            refNameAliases: {
                [key: string]: string;
            } | undefined;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly aliases: string[];
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly refNames: string[] | undefined;
            readonly allRefNames: string[] | undefined;
            readonly rpcManager: any;
            readonly refNameColors: string[];
        } & {
            getCanonicalRefName(refName: string): string;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoading(): void;
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, }: {
                adapterRegionsWithAssembly: import("@jbrowse/core/util").Region[];
                refNameAliases: Record<string, string>;
            }): void;
            setError(error: Error): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(refNameAliases: Record<string, string>): void;
            afterAttach(): void;
        } & {
            getAdapterMapEntry(adapterConf: unknown, options: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                forwardMap: Record<string, string>;
                reverseMap: Record<string, string>;
            }>;
            getRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<Record<string, string>>;
            getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<Record<string, string>>;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
        readonly assemblyList: (import("mobx-state-tree").ModelInstanceTypeProps<Record<string, any>> & {
            setSubschema(slotName: string, data: import("mobx-state-tree").ModelPropertiesDeclaration | import("@jbrowse/core/configuration/configurationSchema").AnyConfigurationSchemaType): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration/configurationSchema").AnyConfigurationSchemaType> & {
            name: string;
        })[];
        readonly rpcManager: any;
        readonly pluginManager: any;
        readonly allPossibleRefNames: string[] | undefined;
    } & {
        waitForAssembly(assemblyName: string): Promise<(import("mobx-state-tree").ModelInstanceTypeProps<{
            configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
        }> & {
            regions: {
                start: number;
                end: number;
                refName: string;
                assemblyName: string;
            }[] | undefined;
            refNameAliases: {
                [key: string]: string;
            } | undefined;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly aliases: string[];
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly refNames: string[] | undefined;
            readonly allRefNames: string[] | undefined;
            readonly rpcManager: any;
            readonly refNameColors: string[];
        } & {
            getCanonicalRefName(refName: string): string;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoading(): void;
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, }: {
                adapterRegionsWithAssembly: import("@jbrowse/core/util").Region[];
                refNameAliases: Record<string, string>;
            }): void;
            setError(error: Error): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(refNameAliases: Record<string, string>): void;
            afterAttach(): void;
        } & {
            getAdapterMapEntry(adapterConf: unknown, options: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                forwardMap: Record<string, string>;
                reverseMap: Record<string, string>;
            }>;
            getRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<Record<string, string>>;
            getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<Record<string, string>>;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
        }, {
            regions: {
                start: number;
                end: number;
                refName: string;
                assemblyName: string;
            }[] | undefined;
            refNameAliases: {
                [key: string]: string;
            } | undefined;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly aliases: string[];
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly refNames: string[] | undefined;
            readonly allRefNames: string[] | undefined;
            readonly rpcManager: any;
            readonly refNameColors: string[];
        } & {
            getCanonicalRefName(refName: string): string;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoading(): void;
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, }: {
                adapterRegionsWithAssembly: import("@jbrowse/core/util").Region[];
                refNameAliases: Record<string, string>;
            }): void;
            setError(error: Error): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(refNameAliases: Record<string, string>): void;
            afterAttach(): void;
        } & {
            getAdapterMapEntry(adapterConf: unknown, options: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                forwardMap: Record<string, string>;
                reverseMap: Record<string, string>;
            }>;
            getRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<Record<string, string>>;
            getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<Record<string, string>>;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined>;
        getRefNameMapForAdapter(adapterConf: unknown, assemblyName: string, opts: {
            signal?: AbortSignal | undefined;
            sessionId: string;
        }): Promise<Record<string, string> | undefined>;
        getReverseRefNameMapForAdapter(adapterConf: unknown, assemblyName: string, opts: {
            signal?: AbortSignal | undefined;
            sessionId: string;
        }): Promise<Record<string, string> | undefined>;
        isValidRefName(refName: string, assemblyName?: string | undefined): boolean;
    } & {
        removeAssembly(asm: import("mobx-state-tree").ModelInstanceTypeProps<{
            configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
        }> & {
            regions: {
                start: number;
                end: number;
                refName: string;
                assemblyName: string;
            }[] | undefined;
            refNameAliases: {
                [key: string]: string;
            } | undefined;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly aliases: string[];
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly refNames: string[] | undefined;
            readonly allRefNames: string[] | undefined;
            readonly rpcManager: any;
            readonly refNameColors: string[];
        } & {
            getCanonicalRefName(refName: string): string;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoading(): void;
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, }: {
                adapterRegionsWithAssembly: import("@jbrowse/core/util").Region[];
                refNameAliases: Record<string, string>;
            }): void;
            setError(error: Error): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(refNameAliases: Record<string, string>): void;
            afterAttach(): void;
        } & {
            getAdapterMapEntry(adapterConf: unknown, options: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                forwardMap: Record<string, string>;
                reverseMap: Record<string, string>;
            }>;
            getRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<Record<string, string>>;
            getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<Record<string, string>>;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
        }, {
            regions: {
                start: number;
                end: number;
                refName: string;
                assemblyName: string;
            }[] | undefined;
            refNameAliases: {
                [key: string]: string;
            } | undefined;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly aliases: string[];
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly refNames: string[] | undefined;
            readonly allRefNames: string[] | undefined;
            readonly rpcManager: any;
            readonly refNameColors: string[];
        } & {
            getCanonicalRefName(refName: string): string;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoading(): void;
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, }: {
                adapterRegionsWithAssembly: import("@jbrowse/core/util").Region[];
                refNameAliases: Record<string, string>;
            }): void;
            setError(error: Error): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(refNameAliases: Record<string, string>): void;
            afterAttach(): void;
        } & {
            getAdapterMapEntry(adapterConf: unknown, options: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                forwardMap: Record<string, string>;
                reverseMap: Record<string, string>;
            }>;
            getRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<Record<string, string>>;
            getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<Record<string, string>>;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>): void;
        afterAttach(): void;
        addAssembly(assemblyConfig: any): void;
        replaceAssembly(idx: number, assemblyConfig: any): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
    error: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
}, {
    setSession(sessionSnapshot: import("mobx-state-tree").ModelCreationType<import("mobx-state-tree/dist/internal").ExtractCFromProps<{
        name: import("mobx-state-tree").ISimpleType<string>;
        margin: import("mobx-state-tree").IType<number | undefined, number, number>;
        view: import("mobx-state-tree").IAnyModelType;
        widgets: import("mobx-state-tree").IMapType<import("mobx-state-tree").IAnyType>;
        activeWidgets: import("mobx-state-tree").IMapType<import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>>;
        connectionInstances: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
    }>>): void;
    renameCurrentSession(sessionName: string): void;
    setError(errorMessage: string | Error): void;
} & {
    readonly jbrowse: import("mobx-state-tree").ModelInstanceTypeProps<{
        configuration: import("@jbrowse/core/configuration/configurationSchema").AnyConfigurationSchemaType;
        assembly: import("mobx-state-tree").IAnyType;
        tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
        connections: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
        aggregateTextSearchAdapters: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
        plugins: import("mobx-state-tree").IType<any, any, any>;
    }> & {
        readonly assemblies: any[];
        readonly assemblyName: string;
        readonly rpcManager: any;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        configuration: import("@jbrowse/core/configuration/configurationSchema").AnyConfigurationSchemaType;
        assembly: import("mobx-state-tree").IAnyType;
        tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
        connections: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
        aggregateTextSearchAdapters: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
        plugins: import("mobx-state-tree").IType<any, any, any>;
    }, {
        readonly assemblies: any[];
        readonly assemblyName: string;
        readonly rpcManager: any;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
} & {
    rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
    textSearchManager: {
        adapterCache: any;
        textSearchAdapters: import("@jbrowse/core/data_adapters/BaseAdapter").BaseTextSearchAdapter[];
        loadTextSearchAdapters(searchScope: import("@jbrowse/core/TextSearch/TextSearchManager").SearchScope): import("@jbrowse/core/data_adapters/BaseAdapter").BaseTextSearchAdapter[];
        relevantAdapters(searchScope: import("@jbrowse/core/TextSearch/TextSearchManager").SearchScope): (import("mobx-state-tree").ModelInstanceTypeProps<Record<string, any>> & {
            setSubschema(slotName: string, data: import("mobx-state-tree").ModelPropertiesDeclaration | import("@jbrowse/core/configuration/configurationSchema").AnyConfigurationSchemaType): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration/configurationSchema").AnyConfigurationSchemaType>)[];
        getAdaptersWithAssembly(searchScopeAssemblyName: string, adapterList: (import("mobx-state-tree").ModelInstanceTypeProps<Record<string, any>> & {
            setSubschema(slotName: string, data: import("mobx-state-tree").ModelPropertiesDeclaration | import("@jbrowse/core/configuration/configurationSchema").AnyConfigurationSchemaType): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration/configurationSchema").AnyConfigurationSchemaType>)[]): (import("mobx-state-tree").ModelInstanceTypeProps<Record<string, any>> & {
            setSubschema(slotName: string, data: import("mobx-state-tree").ModelPropertiesDeclaration | import("@jbrowse/core/configuration/configurationSchema").AnyConfigurationSchemaType): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration/configurationSchema").AnyConfigurationSchemaType>)[];
        search(args: import("@jbrowse/core/TextSearch/TextSearchManager").BaseArgs, searchScope: import("@jbrowse/core/TextSearch/TextSearchManager").SearchScope, rankSearchResults: (results: import("@jbrowse/core/TextSearch/BaseResults").default[]) => import("@jbrowse/core/TextSearch/BaseResults").default[]): Promise<import("@jbrowse/core/TextSearch/BaseResults").default[]>;
        sortResults(results: import("@jbrowse/core/TextSearch/BaseResults").default[], rankSearchResults: (results: import("@jbrowse/core/TextSearch/BaseResults").default[]) => import("@jbrowse/core/TextSearch/BaseResults").default[]): import("@jbrowse/core/TextSearch/BaseResults").default[];
    };
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
export {};
