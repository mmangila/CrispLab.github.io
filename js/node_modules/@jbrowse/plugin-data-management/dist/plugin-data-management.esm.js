import React, { useState, useEffect, lazy, Suspense, useRef, useMemo, useCallback } from 'react';
import ConnectionType from '@jbrowse/core/pluggableElementTypes/ConnectionType';
import WidgetType from '@jbrowse/core/pluggableElementTypes/WidgetType';
import Plugin from '@jbrowse/core/Plugin';
import { objectHash, getSession, isElectron, isAbstractMenuManager } from '@jbrowse/core/util';
import NoteAddIcon from '@material-ui/icons/NoteAdd';
import InputIcon from '@material-ui/icons/Input';
import ExtensionIcon from '@material-ui/icons/Extension';
import { baseConnectionConfig, BaseConnectionModelFactory } from '@jbrowse/core/pluggableElementTypes/models';
import { ConfigurationSchema, ConfigurationReference, readConfObject, getConf } from '@jbrowse/core/configuration';
import { types, getParent, getEnv, getRoot } from 'mobx-state-tree';
import { GenomesFile, TrackDbFile, HubFile } from '@gmod/ucsc-hub';
import { openLocation } from '@jbrowse/core/util/io';
import { generateUnknownTrackConf, generateUnsupportedTrackConf, guessAdapter, UNSUPPORTED, guessTrackType, UNKNOWN } from '@jbrowse/core/util/tracks';
import { ElementId } from '@jbrowse/core/util/types/mst';
import { observer, PropTypes } from 'mobx-react';
import { ListItem, IconButton, Typography, Tooltip, Dialog, DialogTitle, DialogContent, DialogActions, Button, List, Card, CardContent, Link, CardActions, TextField as TextField$1, InputAdornment, Accordion, AccordionSummary, makeStyles as makeStyles$1, Grid, Paper as Paper$1, createStyles, MenuItem, Fab, Menu, FormControlLabel, Checkbox, Stepper, Step, StepLabel, StepContent, DialogContentText } from '@material-ui/core';
import ExpandMoreIcon from '@material-ui/icons/ExpandMore';
import ClearIcon from '@material-ui/icons/Clear';
import InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';
import { makeStyles } from '@material-ui/core/styles';
import CloseIcon from '@material-ui/icons/Close';
import LockIcon from '@material-ui/icons/Lock';
import { isSessionWithSessionPlugins } from '@jbrowse/core/util/types';
import PersonIcon from '@material-ui/icons/Person';
import AddIcon from '@material-ui/icons/Add';
import CheckIcon from '@material-ui/icons/Check';
import Dialog$1 from '@material-ui/core/Dialog';
import DialogTitle$1 from '@material-ui/core/DialogTitle';
import TextField from '@material-ui/core/TextField';
import Button$1 from '@material-ui/core/Button';
import IconButton$1 from '@material-ui/core/IconButton';
import DialogContent$1 from '@material-ui/core/DialogContent';
import DialogActions$1 from '@material-ui/core/DialogActions';
import List$1 from '@material-ui/core/List';
import ListItem$1 from '@material-ui/core/ListItem';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemText from '@material-ui/core/ListItemText';
import ListSubheader from '@material-ui/core/ListSubheader';
import Paper from '@material-ui/core/Paper';
import Typography$1 from '@material-ui/core/Typography';
import Radio from '@material-ui/core/Radio';
import pluralize from 'pluralize';
import ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';
import { IconButton as IconButton$2 } from '@material-ui/core/';
import Table from '@material-ui/core/Table';
import TableBody from '@material-ui/core/TableBody';
import TableCell from '@material-ui/core/TableCell';
import TableContainer from '@material-ui/core/TableContainer';
import TableHead from '@material-ui/core/TableHead';
import TableRow from '@material-ui/core/TableRow';
import CreateIcon from '@material-ui/icons/Create';
import DeleteIcon from '@material-ui/icons/Delete';
import FileSelector from '@jbrowse/core/ui/FileSelector';
import { ConfigurationEditor } from '@jbrowse/plugin-config';
import ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';
import ArrowRightIcon from '@material-ui/icons/ArrowRight';
import MenuIcon from '@material-ui/icons/Menu';
import MoreIcon from '@material-ui/icons/MoreHoriz';
import PowerOutlinedIcon from '@material-ui/icons/PowerOutlined';
import AutoSizer from 'react-virtualized-auto-sizer';
import JBrowseMenu from '@jbrowse/core/ui/Menu';
import { VariableSizeTree } from 'react-vtree';
import Link$1 from '@material-ui/core/Link';
import MenuItem$1 from '@material-ui/core/MenuItem';
import { FileSelector as FileSelector$1 } from '@jbrowse/core/ui';
import Step$1 from '@material-ui/core/Step';
import StepContent$1 from '@material-ui/core/StepContent';
import StepLabel$1 from '@material-ui/core/StepLabel';
import Stepper$1 from '@material-ui/core/Stepper';
import OpenInNewIcon from '@material-ui/icons/OpenInNew';

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _iterableToArrayLimit(arr, i) {
  var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]);

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;

      var F = function () {};

      return {
        s: F,
        n: function () {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function (e) {
          throw e;
        },
        f: F
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var normalCompletion = true,
      didErr = false,
      err;
  return {
    s: function () {
      it = it.call(o);
    },
    n: function () {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function (e) {
      didErr = true;
      err = e;
    },
    f: function () {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

var ucscConfigSchema = /*#__PURE__*/ConfigurationSchema('UCSCTrackHubConnection', {
  hubTxtLocation: {
    type: 'fileLocation',
    defaultValue: {
      uri: 'http://mysite.com/path/to/hub.txt'
    },
    description: 'location of the hub file (usually called hub.txt)'
  },
  assemblyNames: {
    type: 'stringArray',
    defaultValue: [],
    description: 'optional list of genomes to import from this track hub, if empty all genomes will be imported'
  }
}, {
  baseConfiguration: baseConnectionConfig
});

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime_1 = /*#__PURE__*/createCommonjsModule(function (module) {
  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  var runtime = function (exports) {

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined$1; // More compressible than void 0.

    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    function define(obj, key, value) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
      return obj[key];
    }

    try {
      // IE 8 has a broken Object.defineProperty that only works on DOM objects.
      define({}, "");
    } catch (err) {
      define = function define(obj, key, value) {
        return obj[key] = value;
      };
    }

    function wrap(innerFn, outerFn, self, tryLocsList) {
      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
      // .throw, and .return methods.

      generator._invoke = makeInvokeMethod(innerFn, self, context);
      return generator;
    }

    exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.

    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.

    var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.

    function Generator() {}

    function GeneratorFunction() {}

    function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.


    var IteratorPrototype = {};

    IteratorPrototype[iteratorSymbol] = function () {
      return this;
    };

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      // This environment has a native %IteratorPrototype%; use it instead
      // of the polyfill.
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.

    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        define(prototype, method, function (arg) {
          return this._invoke(method, arg);
        });
      });
    }

    exports.isGeneratorFunction = function (genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
      // do is to check its .name property.
      (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };

    exports.mark = function (genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
        define(genFun, toStringTagSymbol, "GeneratorFunction");
      }

      genFun.prototype = Object.create(Gp);
      return genFun;
    }; // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.


    exports.awrap = function (arg) {
      return {
        __await: arg
      };
    };

    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);

        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;

          if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
            return PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return PromiseImpl.resolve(value).then(function (unwrapped) {
            // When a yielded Promise is resolved, its final value becomes
            // the .value of the Promise<{value,done}> result for the
            // current iteration.
            result.value = unwrapped;
            resolve(result);
          }, function (error) {
            // If a rejected Promise was yielded, throw the rejection back
            // into the async generator function so it can be handled there.
            return invoke("throw", error, resolve, reject);
          });
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise = // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
        // invocations of the iterator.
        callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      } // Define the unified helper method that is used to implement .next,
      // .throw, and .return (see defineIteratorMethods).


      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);

    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
      return this;
    };

    exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.

    exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      if (PromiseImpl === void 0) PromiseImpl = Promise;
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
      return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;
      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          } // Be forgiving, per 25.3.3.3.3 of the spec:
          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            // Setting context._sent for legacy support of Babel's
            // function.sent implementation.
            context.sent = context._sent = context.arg;
          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);
          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;
          var record = tryCatch(innerFn, self, context);

          if (record.type === "normal") {
            // If an exception is thrown from innerFn, we leave state ===
            // GenStateExecuting and loop back for another invocation.
            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };
          } else if (record.type === "throw") {
            state = GenStateCompleted; // Dispatch the exception by looping back around to the
            // context.dispatchException(context.arg) call above.

            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    } // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.


    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];

      if (method === undefined$1) {
        // A .throw or .return when the delegate iterator has no .throw
        // method always terminates the yield* loop.
        context.delegate = null;

        if (context.method === "throw") {
          // Note: ["return"] must be used for ES3 parsing compatibility.
          if (delegate.iterator["return"]) {
            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            context.method = "return";
            context.arg = undefined$1;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              // If maybeInvokeDelegate(context) changed context.method from
              // "return" to "throw", let that override the TypeError below.
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError("The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (!info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        // Assign the result of the finished delegate to the temporary
        // variable specified by delegate.resultName (see delegateYield).
        context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

        context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
        // exception, let the outer generator proceed normally. If
        // context.method was "next", forget context.arg since it has been
        // "consumed" by the delegate iterator. If context.method was
        // "return", allow the original .return call to continue in the
        // outer generator.

        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined$1;
        }
      } else {
        // Re-yield the result returned by the delegate method.
        return info;
      } // The delegate iterator is finished, so forget it and continue with
      // the outer generator.


      context.delegate = null;
      return ContinueSentinel;
    } // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.


    defineIteratorMethods(Gp);
    define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.

    Gp[iteratorSymbol] = function () {
      return this;
    };

    Gp.toString = function () {
      return "[object Generator]";
    };

    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      // The root entry object (effectively a try statement without a catch
      // or a finally block) gives us a place to store values thrown from
      // locations where there is no enclosing try statement.
      this.tryEntries = [{
        tryLoc: "root"
      }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    exports.keys = function (object) {
      var keys = [];

      for (var key in object) {
        keys.push(key);
      }

      keys.reverse(); // Rather than returning an object with a next method, we keep
      // things simple and return the next function itself.

      return function next() {
        while (keys.length) {
          var key = keys.pop();

          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        } // To avoid creating an additional object, we just hang the .value
        // and .done properties off the next function object itself. This
        // also ensures that the minifier will not anonymize the function.


        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];

        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1,
              next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined$1;
            next.done = true;
            return next;
          };

          return next.next = next;
        }
      } // Return an iterator with no values.


      return {
        next: doneResult
      };
    }

    exports.values = values;

    function doneResult() {
      return {
        value: undefined$1,
        done: true
      };
    }

    Context.prototype = {
      constructor: Context,
      reset: function reset(skipTempReset) {
        this.prev = 0;
        this.next = 0; // Resetting context._sent for legacy support of Babel's
        // function.sent implementation.

        this.sent = this._sent = undefined$1;
        this.done = false;
        this.delegate = null;
        this.method = "next";
        this.arg = undefined$1;
        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            // Not sure about the optimal order of these conditions:
            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
              this[name] = undefined$1;
            }
          }
        }
      },
      stop: function stop() {
        this.done = true;
        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;

        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },
      dispatchException: function dispatchException(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;

        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            context.method = "next";
            context.arg = undefined$1;
          }

          return !!caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            // Exception thrown outside of any try block that could handle
            // it, so set the completion value of the entire function to
            // throw the exception.
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },
      abrupt: function abrupt(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          // Ignore the finally entry if control is not jumping to a
          // location outside the try/catch block.
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },
      complete: function complete(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },
      finish: function finish(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },
      "catch": function _catch(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;

            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }

            return thrown;
          }
        } // The context.catch method must only be called with a location
        // argument that corresponds to a known catch block.


        throw new Error("illegal catch attempt");
      },
      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          // Deliberately forget the last sent value so that we don't
          // accidentally pass it on to the delegate.
          this.arg = undefined$1;
        }

        return ContinueSentinel;
      }
    }; // Regardless of whether this script is executing as a CommonJS module
    // or not, return the runtime object so that we can declare the variable
    // regeneratorRuntime in the outer scope, which allows this module to be
    // injected easily by `bin/regenerator --include-runtime script.js`.

    return exports;
  }( // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports );

  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    // This module should not be running in strict mode, so the above
    // assignment should always work unless something is misconfigured. Just
    // in case runtime.js accidentally runs in strict mode, we can escape
    // strict mode using a global Function call. This could conceivably fail
    // if a Content Security Policy forbids using Function, but in that case
    // the proper solution is to fix the accidental strict mode problem. If
    // you've misconfigured your bundler to force strict mode and applied a
    // CSP to forbid Function, and you're not willing to fix either of those
    // problems, please detail your unique predicament in a GitHub issue.
    Function("r", "regeneratorRuntime = r")(runtime);
  }
});

function fetchHubFile(_x) {
  return _fetchHubFile.apply(this, arguments);
}

function _fetchHubFile() {
  _fetchHubFile = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(hubFileLocation) {
    var hubFileText;
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return openLocation(hubFileLocation).readFile('utf8');

          case 3:
            hubFileText = _context.sent;
            return _context.abrupt("return", new HubFile(hubFileText));

          case 7:
            _context.prev = 7;
            _context.t0 = _context["catch"](0);
            throw new Error("Not a valid hub.txt file, got error: '".concat(_context.t0, "'"));

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 7]]);
  }));
  return _fetchHubFile.apply(this, arguments);
}

function fetchGenomesFile(_x2) {
  return _fetchGenomesFile.apply(this, arguments);
}

function _fetchGenomesFile() {
  _fetchGenomesFile = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(genomesFileLocation) {
    var genomesFileText;
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return openLocation(genomesFileLocation).readFile('utf8');

          case 2:
            genomesFileText = _context2.sent;
            return _context2.abrupt("return", new GenomesFile(genomesFileText));

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _fetchGenomesFile.apply(this, arguments);
}

function fetchTrackDbFile(_x3) {
  return _fetchTrackDbFile.apply(this, arguments);
}

function _fetchTrackDbFile() {
  _fetchTrackDbFile = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(trackDbFileLocation) {
    var trackDbFileText;
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return openLocation(trackDbFileLocation).readFile('utf8');

          case 2:
            trackDbFileText = _context3.sent;
            return _context3.abrupt("return", new TrackDbFile(trackDbFileText));

          case 4:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _fetchTrackDbFile.apply(this, arguments);
}

function generateTracks(trackDb, trackDbFileLocation, assemblyName, sequenceAdapter) {
  var tracks = [];
  trackDb.forEach(function (track, trackName) {
    var trackKeys = Array.from(track.keys());
    var parentTrackKeys = ['superTrack', 'compositeTrack', 'container', 'view'];

    if (trackKeys.some(function (key) {
      return parentTrackKeys.includes(key);
    })) {
      return;
    }

    var parentTracks = [];
    var currentTrackName = trackName;

    do {
      currentTrackName = trackDb.get(currentTrackName).get('parent');

      if (currentTrackName) {

        var _currentTrackName$spl = currentTrackName.split(' ');

        var _currentTrackName$spl2 = _slicedToArray(_currentTrackName$spl, 1);

        currentTrackName = _currentTrackName$spl2[0];
        parentTracks.push(trackDb.get(currentTrackName));
      }
    } while (currentTrackName);

    parentTracks.reverse();
    var categories = parentTracks.map(function (parentTrack) {
      return parentTrack.get('shortLabel');
    });
    var res = makeTrackConfig(track, categories, trackDbFileLocation, trackDb, sequenceAdapter);
    res.trackId = "ucsc-trackhub-".concat(objectHash(res));
    res.assemblyNames = [assemblyName];
    tracks.push(res);
  });
  return tracks;
}

function makeTrackConfig(track, categories, trackDbFileLocation, trackDb, sequenceAdapter) {
  var trackType = track.get('type');

  if (!trackType) {
    trackType = trackDb.get(track.get('parent')).get('type');
  }

  var baseTrackType = trackType.split(' ')[0];

  if (baseTrackType === 'bam' && track.get('bigDataUrl').toLowerCase().endsWith('cram')) {
    baseTrackType = 'cram';
  }

  var bigDataLocation;

  if (trackDbFileLocation.uri) {
    bigDataLocation = {
      uri: new URL(track.get('bigDataUrl'), trackDbFileLocation.uri).href
    };
  } else {
    bigDataLocation = {
      localPath: track.get('bigDataUrl')
    };
  }

  var bigDataIndexLocation;

  switch (baseTrackType) {
    case 'bam':
      if (trackDbFileLocation.uri) {
        bigDataIndexLocation = track.get('bigDataIndex') ? {
          uri: new URL(track.get('bigDataIndex'), trackDbFileLocation.uri).href
        } : {
          uri: new URL("".concat(track.get('bigDataUrl'), ".bai"), trackDbFileLocation.uri).href
        };
      } else {
        bigDataIndexLocation = track.get('bigDataIndex') ? {
          localPath: track.get('bigDataIndex')
        } : {
          localPath: "".concat(track.get('bigDataUrl'), ".bai")
        };
      }

      return {
        type: 'AlignmentsTrack',
        name: track.get('shortLabel'),
        description: track.get('longLabel'),
        category: categories,
        adapter: {
          type: 'BamAdapter',
          bamLocation: bigDataLocation,
          index: {
            location: bigDataIndexLocation
          }
        }
      };

    case 'bed':
      return generateUnsupportedTrackConf(track.get('shortLabel'), baseTrackType, categories);

    case 'bed5FloatScore':
      return generateUnsupportedTrackConf(track.get('shortLabel'), baseTrackType, categories);

    case 'bedGraph':
      return generateUnsupportedTrackConf(track.get('shortLabel'), baseTrackType, categories);

    case 'bedRnaElements':
      return generateUnsupportedTrackConf(track.get('shortLabel'), baseTrackType, categories);

    case 'bigBarChart':
      return {
        type: 'FeatureTrack',
        name: track.get('shortLabel'),
        description: track.get('longLabel'),
        category: categories,
        adapter: {
          type: 'BigBedAdapter',
          bigBedLocation: bigDataLocation
        },
        renderer: {
          type: 'SvgFeatureRenderer'
        }
      };

    case 'bigBed':
      return {
        type: 'FeatureTrack',
        name: track.get('shortLabel'),
        description: track.get('longLabel'),
        category: categories,
        adapter: {
          type: 'BigBedAdapter',
          bigBedLocation: bigDataLocation
        }
      };

    case 'bigGenePred':
      return {
        type: 'FeatureTrack',
        name: track.get('shortLabel'),
        description: track.get('longLabel'),
        category: categories,
        adapter: {
          type: 'BigBedAdapter',
          bigBedLocation: bigDataLocation
        }
      };

    case 'bigChain':
      return {
        type: 'FeatureTrack',
        name: track.get('shortLabel'),
        description: track.get('longLabel'),
        category: categories,
        adapter: {
          type: 'BigBedAdapter',
          bigBedLocation: bigDataLocation
        },
        renderer: {
          type: 'SvgFeatureRenderer'
        }
      };

    case 'bigInteract':
      return {
        type: 'FeatureTrack',
        name: track.get('shortLabel'),
        description: track.get('longLabel'),
        category: categories,
        adapter: {
          type: 'BigBedAdapter',
          bigBedLocation: bigDataLocation
        },
        renderer: {
          type: 'SvgFeatureRenderer'
        }
      };

    case 'bigMaf':
      return {
        type: 'FeatureTrack',
        name: track.get('shortLabel'),
        description: track.get('longLabel'),
        category: categories,
        adapter: {
          type: 'BigBedAdapter',
          bigBedLocation: bigDataLocation
        },
        renderer: {
          type: 'SvgFeatureRenderer'
        }
      };

    case 'bigPsl':
      return {
        type: 'FeatureTrack',
        name: track.get('shortLabel'),
        description: track.get('longLabel'),
        category: categories,
        adapter: {
          type: 'BigBedAdapter',
          bigBedLocation: bigDataLocation
        },
        renderer: {
          type: 'SvgFeatureRenderer'
        }
      };

    case 'bigWig':
      return {
        type: 'QuantitativeTrack',
        name: track.get('shortLabel'),
        description: track.get('longLabel'),
        category: categories,
        adapter: {
          type: 'BigWigAdapter',
          bigWigLocation: bigDataLocation
        }
      };

    case 'broadPeak':
      return generateUnsupportedTrackConf(track.get('shortLabel'), baseTrackType, categories);

    case 'coloredExon':
      return generateUnsupportedTrackConf(track.get('shortLabel'), baseTrackType, categories);

    case 'cram':
      if (trackDbFileLocation.uri) {
        bigDataIndexLocation = track.get('bigDataIndex') ? {
          uri: new URL(track.get('bigDataIndex'), trackDbFileLocation.uri).href
        } : {
          uri: new URL("".concat(track.get('bigDataUrl'), ".crai"), trackDbFileLocation.uri).href
        };
      } else {
        bigDataIndexLocation = track.get('bigDataIndex') ? {
          localPath: track.get('bigDataIndex')
        } : {
          localPath: "".concat(track.get('bigDataUrl'), ".crai")
        };
      }

      return {
        type: 'AlignmentsTrack',
        name: track.get('shortLabel'),
        description: track.get('longLabel'),
        category: categories,
        adapter: {
          type: 'CramAdapter',
          cramLocation: bigDataLocation,
          craiLocation: bigDataIndexLocation,
          sequenceAdapter: sequenceAdapter
        }
      };

    case 'gvf':
      return generateUnsupportedTrackConf(track.get('shortLabel'), baseTrackType, categories);

    case 'ld2':
      return generateUnsupportedTrackConf(track.get('shortLabel'), baseTrackType, categories);

    case 'narrowPeak':
      return generateUnsupportedTrackConf(track.get('shortLabel'), baseTrackType, categories);

    case 'bigNarrowPeak':
      return {
        type: 'FeatureTrack',
        name: track.get('shortLabel'),
        description: track.get('longLabel'),
        category: categories,
        adapter: {
          type: 'BigBedAdapter',
          bigBedLocation: bigDataLocation
        }
      };

    case 'peptideMapping':
      return generateUnsupportedTrackConf(track.get('shortLabel'), baseTrackType, categories);

    case 'vcfTabix':
      if (trackDbFileLocation.uri) {
        bigDataIndexLocation = track.get('bigDataIndex') ? {
          uri: new URL(track.get('bigDataIndex'), trackDbFileLocation.uri).href
        } : {
          uri: new URL("".concat(track.get('bigDataUrl'), ".tbi"), trackDbFileLocation.uri).href
        };
      } else {
        bigDataIndexLocation = track.get('bigDataIndex') ? {
          localPath: track.get('bigDataIndex')
        } : {
          localPath: "".concat(track.get('bigDataUrl'), ".tbi")
        };
      }

      return {
        type: 'VariantTrack',
        name: track.get('shortLabel'),
        description: track.get('longLabel'),
        category: categories,
        adapter: {
          type: 'VcfTabixAdapter',
          vcfGzLocation: bigDataLocation,
          index: {
            location: bigDataIndexLocation
          }
        }
      };

    case 'wig':
      return generateUnsupportedTrackConf(track.get('shortLabel'), baseTrackType, categories);

    case 'wigMaf':
      return generateUnsupportedTrackConf(track.get('shortLabel'), baseTrackType, categories);

    case 'hic':
      return {
        type: 'HicTrack',
        name: track.get('shortLabel'),
        description: track.get('longLabel'),
        category: categories,
        adapter: {
          type: 'HicAdapter',
          hicLocation: bigDataLocation
        }
      };

    case 'halSnake':
      return generateUnsupportedTrackConf(track.get('shortLabel'), baseTrackType, categories);

    default:
      return generateUnknownTrackConf(track.get('shortLabel'), baseTrackType, categories);
  }
}

function UCSCTrackHubConnection(pluginManager) {
  return types.compose('UCSCTrackHubConnection', BaseConnectionModelFactory(pluginManager), types.model({
    configuration: ConfigurationReference(ucscConfigSchema),
    type: types.literal('UCSCTrackHubConnection')
  }).actions(function (self) {
    return {
      connect: function connect() {
        var connectionName = readConfObject(self.configuration, 'name');
        var hubFileLocation = readConfObject(self.configuration, 'hubTxtLocation');
        var session = getSession(self);
        fetchHubFile(hubFileLocation).then(function (hubFile) {
          var genomesFileLocation;

          if (hubFileLocation.uri) {
            genomesFileLocation = {
              uri: new URL(hubFile.get('genomesFile'), hubFileLocation.uri).href
            };
          } else {
            genomesFileLocation = {
              localPath: hubFile.get('genomesFile')
            };
          }

          return Promise.all([hubFile, fetchGenomesFile(genomesFileLocation)]);
        }).then(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
              hubFile = _ref2[0],
              genomesFile = _ref2[1];

          var trackDbData = [];

          var _iterator = _createForOfIteratorHelper(genomesFile),
              _step;

          try {
            var _loop = function _loop() {
              var _step$value = _slicedToArray(_step.value, 2),
                  genomeName = _step$value[0],
                  genome = _step$value[1];

              var assemblyNames = readConfObject(self.configuration, 'assemblyNames');

              if (assemblyNames.length > 0 && !assemblyNames.includes(genomeName)) {
                return "break";
              }

              var assemblyConf = session.assemblies.find(function (assembly) {
                return readConfObject(assembly, 'name') === genomeName;
              });

              if (!assemblyConf) {
                throw new Error("Cannot find assembly for \"".concat(genomeName, "\" from the genomes file for connection \"").concat(connectionName, "\""));
              }

              var trackDbFileLocation = void 0;

              if (hubFileLocation.uri) {
                trackDbFileLocation = {
                  uri: new URL(genome.get('trackDb'), new URL(hubFile.get('genomesFile'), hubFileLocation.uri)).href
                };
              } else {
                trackDbFileLocation = {
                  localPath: genome.get('trackDb')
                };
              }

              trackDbData.push(Promise.all([trackDbFileLocation, fetchTrackDbFile(trackDbFileLocation), genomeName, assemblyConf]));
            };

            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var _ret = _loop();

              if (_ret === "break") break;
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }

          return Promise.all([].concat(trackDbData));
        }).then(function (trackDbData) {
          var _iterator2 = _createForOfIteratorHelper(trackDbData),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var _step2$value = _slicedToArray(_step2.value, 4),
                  trackDbFileLocation = _step2$value[0],
                  trackDbFile = _step2$value[1],
                  genomeName = _step2$value[2],
                  assemblyConf = _step2$value[3];

              var sequenceAdapter = readConfObject(assemblyConf, ['sequence', 'adapter']);
              var tracks = generateTracks(trackDbFile, trackDbFileLocation, genomeName, sequenceAdapter);
              self.addTrackConfs(tracks);
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        })["catch"](function (error) {
          console.error(error);
          session.notify("There was a problem connecting to the UCSC Track Hub \"".concat(self.name, "\". Please make sure you have entered a valid hub.txt file. The error that was thrown is: \"").concat(error, "\""), 'error');
          session.breakConnection(self.configuration);
        });
      }
    };
  }));
}

function isAbsoluteUrl(url) {
  try {
    new URL(url);
    return true;
  } catch (error) {
    return url.startsWith('/');
  }
}

function getFileName(track) {
  var uri = 'uri' in track ? track.uri : undefined;
  var localPath = 'localPath' in track ? track.localPath : undefined;
  var blob = 'blobId' in track ? track : undefined;
  return (blob === null || blob === void 0 ? void 0 : blob.name) || (uri === null || uri === void 0 ? void 0 : uri.slice(uri.lastIndexOf('/') + 1)) || (localPath === null || localPath === void 0 ? void 0 : localPath.slice(localPath.lastIndexOf('/') + 1)) || '';
}

function f(pluginManager) {
  return types.model('AddTrackModel', {
    id: ElementId,
    type: types.literal('AddTrackWidget'),
    view: types.safeReference(pluginManager.pluggableMstType('view', 'stateModel'))
  })["volatile"](function () {
    return {
      trackSource: 'fromFile',
      trackData: undefined,
      indexTrackData: undefined,
      // alts
      altAssemblyName: '',
      altTrackName: '',
      altTrackType: '',
      adapterHint: ''
    };
  }).actions(function (self) {
    return {
      setAdapterHint: function setAdapterHint(obj) {
        self.adapterHint = obj;
      },
      setTrackSource: function setTrackSource(str) {
        self.trackSource = str;
      },
      setTrackData: function setTrackData(obj) {
        self.trackData = obj;
      },
      setIndexTrackData: function setIndexTrackData(obj) {
        self.indexTrackData = obj;
      },
      setAssembly: function setAssembly(str) {
        self.altAssemblyName = str;
      },
      setTrackName: function setTrackName(str) {
        self.altTrackName = str;
      },
      setTrackType: function setTrackType(str) {
        self.altTrackType = str;
      },
      clearData: function clearData() {
        self.trackSource = '';
        self.altTrackName = '';
        self.altTrackType = '';
        self.altAssemblyName = '';
        self.adapterHint = '';
        self.indexTrackData = {
          uri: ''
        };
        self.trackData = {
          uri: ''
        };
      }
    };
  }).views(function (self) {
    return {
      get trackAdapter() {
        var trackData = self.trackData,
            indexTrackData = self.indexTrackData,
            adapterHint = self.adapterHint;
        return trackData ? guessAdapter(trackData, indexTrackData, getFileName, adapterHint) : undefined;
      },

      get trackName() {
        return self.altTrackName || (self.trackData ? getFileName(self.trackData) : '');
      },

      get isFtp() {
        var track = self.trackData,
            index = self.indexTrackData;
        return !!(index && 'uri' in index && index.uri.startsWith('ftp://') || track && 'uri' in track && track.uri.startsWith('ftp://'));
      },

      get isRelativeTrackUrl() {
        var trackData = self.trackData;
        return trackData && 'uri' in trackData && !isAbsoluteUrl(trackData.uri);
      },

      get isRelativeIndexUrl() {
        var index = self.indexTrackData;
        return index && 'uri' in index && !isAbsoluteUrl(index.uri);
      },

      get isRelativeUrl() {
        return this.isRelativeIndexUrl || this.isRelativeTrackUrl;
      },

      get trackHttp() {
        var track = self.trackData;
        return track && 'uri' in track && track.uri.startsWith('http://');
      },

      get indexHttp() {
        var index = self.indexTrackData;
        return index && 'uri' in index && index.uri.startsWith('http://');
      },

      get wrongProtocol() {
        return window.location.protocol === 'https:' && (this.trackHttp || this.indexHttp);
      },

      get unsupported() {
        var _this$trackAdapter;

        return ((_this$trackAdapter = this.trackAdapter) === null || _this$trackAdapter === void 0 ? void 0 : _this$trackAdapter.type) === UNSUPPORTED;
      },

      get assembly() {
        var _self$view$assemblyNa;

        return self.altAssemblyName || ((_self$view$assemblyNa = self.view.assemblyNames) === null || _self$view$assemblyNa === void 0 ? void 0 : _self$view$assemblyNa[0]);
      },

      get trackType() {
        return self.altTrackType || (this.trackAdapter ? guessTrackType(this.trackAdapter.type) : '');
      }

    };
  }).views(function (self) {
    return {
      get warningMessage() {
        if (self.isFtp) {
          return "Warning: JBrowse cannot access files using the ftp protocol";
        } else if (self.isRelativeUrl) {
          return "Warning: one or more of your files do not provide the protocol e.g.\n          https://, please provide an absolute URL unless you are sure a\n          relative URL is intended.";
        } else if (self.wrongProtocol) {
          return "Warning: You entered a http:// resources but we cannot access HTTP\n          resources from JBrowse when it is running on https. Please use an\n          https URL for your track, or access the JBrowse app from the http\n          protocol";
        }

        return '';
      }

    };
  });
}

var configSchema = /*#__PURE__*/ConfigurationSchema('AddTrackWidget', {});

var AddConnectionStateModel = /*#__PURE__*/types.model('AddConnectionModel', {
  id: ElementId,
  type: /*#__PURE__*/types.literal('AddConnectionWidget')
});

var configSchema$1 = /*#__PURE__*/ConfigurationSchema('AddConnectionWidget', {});

var hasAnyOverlap = function hasAnyOverlap() {
  var a1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var a2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return !!a1.find(function (value) {
    return a2.includes(value);
  });
};

function passesFilter(filter, config) {
  var name = getTrackName(config);
  var categories = readConfObject(config, 'category') || [];
  var regexp = new RegExp(filter, 'i');
  return !!name.match(regexp) || categories.filter(function (cat) {
    return !!cat.match(regexp);
  }).length;
}

function getTrackName(config) {
  if (!config.trackId) {
    throw new Error('not a track');
  }

  return readConfObject(config, 'name') || "Reference sequence (".concat(readConfObject(getParent(config), 'name'), ")");
}

function generateHierarchy(model, trackConfigurations, collapsed) {
  var hierarchy = {
    children: []
  };
  var filterText = model.filterText,
      view = model.view;
  trackConfigurations.filter(function (trackConf) {
    return passesFilter(filterText, trackConf);
  }).forEach(function (trackConf) {
    // copy the categories since this array can be mutated downstream
    var categories = _toConsumableArray(readConfObject(trackConf, 'category') || []); // silly thing where if trackId ends with sessionTrack, then push it to
    // a category that starts with a space to force sort to the top...
    // double whammy hackyness


    if (trackConf.trackId.endsWith('sessionTrack')) {
      categories.unshift(' Session tracks');
    }

    var currLevel = hierarchy; // find existing category to put track into or create it

    var _loop = function _loop(i) {
      var category = categories[i];
      var ret = currLevel.children.find(function (c) {
        return c.name === category;
      });
      var id = categories.slice(0, i + 1).join(',');

      if (!ret) {
        var n = {
          children: [],
          name: category,
          id: id,
          state: {
            expanded: !collapsed.get(id)
          }
        };
        currLevel.children.push(n);
        currLevel = n;
      } else {
        currLevel = ret;
      }
    };

    for (var i = 0; i < categories.length; i++) {
      _loop(i);
    } // using splice here tries to group leaf nodes above hierarchical nodes


    currLevel.children.splice(currLevel.children.findIndex(function (elt) {
      return elt.children.length;
    }), 0, {
      id: trackConf.trackId,
      name: getTrackName(trackConf),
      conf: trackConf,
      checked: !!view.tracks.find(function (f) {
        return f.configuration === trackConf;
      }),
      children: []
    });
  });
  return hierarchy.children;
}
var HierarchicalTrackSelectorStateModelFactory = (function (pluginManager) {
  return types.model('HierarchicalTrackSelectorWidget', {
    id: ElementId,
    type: types.literal('HierarchicalTrackSelectorWidget'),
    collapsed: types.map(types["boolean"]),
    filterText: '',
    view: types.safeReference(pluginManager.pluggableMstType('view', 'stateModel')),
    collapsedCategories: types.map(types.string, types["boolean"])
  }).actions(function (self) {
    return {
      setView: function setView(view) {
        self.view = view;
      },
      toggleCategory: function toggleCategory(pathName) {
        self.collapsed.set(pathName, !self.collapsed.get(pathName));
      },
      clearFilterText: function clearFilterText() {
        self.filterText = '';
      },
      setFilterText: function setFilterText(newText) {
        self.filterText = newText;
      }
    };
  }).views(function (self) {
    return {
      getRefSeqTrackConf: function getRefSeqTrackConf(assemblyName) {
        var _getSession = getSession(self),
            assemblyManager = _getSession.assemblyManager;

        var assembly = assemblyManager.get(assemblyName);
        var trackConf = assembly === null || assembly === void 0 ? void 0 : assembly.configuration.sequence;
        var viewType = pluginManager.getViewType(self.view.type);

        if (trackConf) {
          var _iterator = _createForOfIteratorHelper(trackConf.displays),
              _step;

          try {
            var _loop2 = function _loop2() {
              var display = _step.value;

              if (viewType.displayTypes.find(function (displayType) {
                return displayType.name === display.type;
              })) {
                return {
                  v: trackConf
                };
              }
            };

            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var _ret = _loop2();

              if (_typeof(_ret) === "object") return _ret.v;
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }

        return undefined;
      },
      trackConfigurations: function trackConfigurations(assemblyName) {
        if (!self.view) {
          return [];
        }

        var session = getSession(self);
        var trackConfigurations = session.tracks,
            assemblyManager = session.assemblyManager;
        var assembly = assemblyManager.get(assemblyName);

        if (!assembly) {
          return [];
        }

        var refseq = self.getRefSeqTrackConf(assemblyName); // filter out tracks that don't match the current assembly (check all
        // assembly aliases) and display types

        return (refseq ? [refseq] : []).concat(_toConsumableArray(trackConfigurations.filter(function (conf) {
          var trackConfAssemblies = readConfObject(conf, 'assemblyNames');
          var allAliases = assembly.allAliases;
          return hasAnyOverlap(allAliases, trackConfAssemblies);
        }).filter(function (conf) {
          var _pluginManager$getVie = pluginManager.getViewType(self.view.type),
              displayTypes = _pluginManager$getVie.displayTypes;

          var compatibleDisplays = displayTypes.map(function (display) {
            return display.name;
          });
          var trackDisplays = conf.displays.map(function (display) {
            return display.type;
          });
          return hasAnyOverlap(compatibleDisplays, trackDisplays);
        })));
      },

      get assemblyNames() {
        return self.view ? self.view.assemblyNames : [];
      },

      connectionTrackConfigurations: function connectionTrackConfigurations(assemblyName, connection) {
        if (!self.view) {
          return [];
        }

        var trackConfigurations = connection.tracks;
        var session = getSession(self);
        var assemblyManager = session.assemblyManager;
        var assembly = assemblyManager.get(assemblyName);

        if (!(assembly && assembly.initialized)) {
          return [];
        } // filter out tracks that don't match the current display types


        return trackConfigurations.filter(function (conf) {
          var trackConfAssemblies = readConfObject(conf, 'assemblyNames');
          var allAliases = assembly.allAliases;
          return hasAnyOverlap(allAliases, trackConfAssemblies);
        }).filter(function (conf) {
          var _pluginManager$getVie2 = pluginManager.getViewType(self.view.type),
              displayTypes = _pluginManager$getVie2.displayTypes;

          var compatibleDisplays = displayTypes.map(function (display) {
            return display.name;
          });
          var trackDisplays = conf.displays.map(function (display) {
            return display.type;
          });
          return hasAnyOverlap(compatibleDisplays, trackDisplays);
        });
      },
      hierarchy: function hierarchy(assemblyName) {
        var _this = this;

        var hier = generateHierarchy(self, self.trackConfigurations(assemblyName), self.collapsed);
        var session = getSession(self);
        var conns = session.connectionInstances.filter(function (conn) {
          var configAssemblyNames = readConfObject(conn.configuration, 'assemblyNames');

          if (configAssemblyNames.length === 0) {
            return true;
          }

          return configAssemblyNames.includes(assemblyName);
        }).map(function (conn, index) {
          var c = session.connections[index];
          return {
            id: c.connectionId,
            name: readConfObject(c, 'name'),
            children: _this.connectionHierarchy(assemblyName, conn),
            state: {
              expanded: true
            }
          };
        });
        return {
          name: 'Root',
          id: 'Root',
          children: [{
            name: 'Tracks',
            id: 'Tracks',
            children: hier
          }].concat(_toConsumableArray(conns))
        };
      },
      connectionHierarchy: function connectionHierarchy(assemblyName, connection) {
        return generateHierarchy(self, self.connectionTrackConfigurations(assemblyName, connection), self.collapsed);
      },
      // This recursively gets tracks from lower paths
      allTracksInCategoryPath: function allTracksInCategoryPath(path, connection, assemblyName) {
        var currentHier = connection ? self.connectionHierarchy(connection) : self.hierarchy(assemblyName);
        path.forEach(function (pathItem) {
          currentHier = currentHier.get(pathItem) || new Map();
        });
        var tracks = {};
        currentHier.forEach(function (contents, name) {
          if (contents.trackId) {
            tracks[contents.trackId] = contents;
          } else {
            tracks = Object.assign(tracks, self.allTracksInCategoryPath(path.concat([name])));
          }
        });
        return tracks;
      }
    };
  });
});

var configSchema$2 = /*#__PURE__*/ConfigurationSchema('HierarchicalTrackSelectorWidget', {});

var useStyles = /*#__PURE__*/makeStyles(function () {
  return {
    closeDialog: {
      position: 'absolute',
      right: 0,
      top: 0
    },
    dialogContainer: {
      margin: 15
    }
  };
});

function LockedPlugin() {
  return /*#__PURE__*/React.createElement(Tooltip, {
    style: {
      marginRight: '0.5rem'
    },
    title: "This plugin was installed by an admin. It cannot be removed."
  }, /*#__PURE__*/React.createElement(LockIcon, null));
}

function PluginDialog(_ref) {
  var _onClose = _ref.onClose,
      plugin = _ref.plugin;
  var classes = useStyles();
  return /*#__PURE__*/React.createElement(Dialog, {
    open: true,
    onClose: function onClose() {
      return _onClose();
    }
  }, /*#__PURE__*/React.createElement(DialogTitle, null, /*#__PURE__*/React.createElement(IconButton, {
    className: classes.closeDialog,
    "aria-label": "close-dialog",
    onClick: function onClick() {
      return _onClose();
    }
  }, /*#__PURE__*/React.createElement(CloseIcon, null))), /*#__PURE__*/React.createElement(DialogContent, null, /*#__PURE__*/React.createElement(Typography, null, "Please confirm that you want to remove ", plugin, ":"), /*#__PURE__*/React.createElement(DialogActions, null, /*#__PURE__*/React.createElement(Button, {
    variant: "contained",
    color: "primary",
    onClick: function onClick() {
      // avoid showing runtime plugin warning
      window.setTimeout(function () {
        _onClose(plugin);
      }, 500);
    }
  }, "Confirm"), /*#__PURE__*/React.createElement(Button, {
    variant: "contained",
    color: "secondary",
    onClick: function onClick() {
      _onClose();
    }
  }, "Cancel"))));
}

function InstalledPlugin(_ref2) {
  var plugin = _ref2.plugin,
      model = _ref2.model;

  var _useState = useState(),
      _useState2 = _slicedToArray(_useState, 2),
      dialogPlugin = _useState2[0],
      setDialogPlugin = _useState2[1];

  var session = getSession(model); // @ts-ignore

  var sessionPlugins = session.sessionPlugins;
  var isSessionPlugin = sessionPlugins === null || sessionPlugins === void 0 ? void 0 : sessionPlugins.some(function (p) {
    return "".concat(p.name, "Plugin") === plugin.name;
  });
  var rootModel = getParent(model, 3);
  var jbrowse = rootModel.jbrowse,
      adminMode = rootModel.adminMode;
  return /*#__PURE__*/React.createElement(React.Fragment, null, dialogPlugin ? /*#__PURE__*/React.createElement(PluginDialog, {
    plugin: dialogPlugin,
    onClose: function onClose(name) {
      if (name) {
        if (adminMode) {
          jbrowse.removePlugin(plugin.name);
        } else if (isSessionWithSessionPlugins(session)) {
          session.removeSessionPlugin(plugin.name);
        }
      }

      setDialogPlugin(undefined);
    }
  }) : null, /*#__PURE__*/React.createElement(ListItem, {
    key: plugin.name
  }, adminMode || isSessionPlugin ? /*#__PURE__*/React.createElement(IconButton, {
    "aria-label": "removePlugin",
    "data-testid": "removePlugin-".concat(plugin.name),
    onClick: function onClick() {
      return setDialogPlugin(plugin.name);
    }
  }, /*#__PURE__*/React.createElement(CloseIcon, null)) : /*#__PURE__*/React.createElement(LockedPlugin, null), /*#__PURE__*/React.createElement(Typography, null, plugin.name)));
}

var InstalledPlugin$1 = /*#__PURE__*/observer(InstalledPlugin);

function InstalledPluginsList(_ref) {
  var pluginManager = _ref.pluginManager,
      model = _ref.model;
  var plugins = pluginManager.plugins;
  var corePlugins = plugins.filter(function (p) {
    var _pluginManager$plugin;

    return (_pluginManager$plugin = pluginManager.pluginMetadata[p.name]) === null || _pluginManager$plugin === void 0 ? void 0 : _pluginManager$plugin.isCore;
  }).map(function (p) {
    return p.name;
  });
  var externalPlugins = plugins.filter(function (plugin) {
    return !corePlugins.includes(plugin.name);
  });
  return /*#__PURE__*/React.createElement(List, null, externalPlugins.length ? externalPlugins.filter(function (plugin) {
    return plugin.name.toLowerCase().includes(model.filterText.toLowerCase());
  }).map(function (plugin) {
    return /*#__PURE__*/React.createElement(InstalledPlugin$1, {
      key: plugin.name,
      plugin: plugin,
      model: model
    });
  }) : /*#__PURE__*/React.createElement(Typography, null, "No plugins currently installed"));
}

var InstalledPluginsList$1 = /*#__PURE__*/observer(InstalledPluginsList);

var useStyles$1 = /*#__PURE__*/makeStyles(function () {
  return {
    card: {
      margin: '1em'
    },
    icon: {
      marginLeft: '0.5em',
      marginRight: '0.5em'
    },
    bold: {
      fontWeight: 600
    },
    dataField: {
      display: 'flex',
      alignItems: 'center',
      margin: '0.4em 0em'
    }
  };
});

function PluginCard(_ref) {
  var plugin = _ref.plugin,
      model = _ref.model,
      adminMode = _ref.adminMode;
  var classes = useStyles$1();
  var session = getSession(model);

  var _getEnv = getEnv(model),
      pluginManager = _getEnv.pluginManager;

  var isInstalled = pluginManager.hasPlugin("".concat(plugin.name, "Plugin"));

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      tempDisabled = _useState2[0],
      setTempDisabled = _useState2[1];

  var disableButton = isInstalled || tempDisabled;
  var rootModel = getParent(model, 3);
  var jbrowse = rootModel.jbrowse;
  return /*#__PURE__*/React.createElement(Card, {
    variant: "outlined",
    key: plugin.name,
    className: classes.card
  }, /*#__PURE__*/React.createElement(CardContent, null, /*#__PURE__*/React.createElement("div", {
    className: classes.dataField
  }, /*#__PURE__*/React.createElement(Typography, {
    variant: "h5"
  }, /*#__PURE__*/React.createElement(Link, {
    href: "".concat(plugin.location, "#readme"),
    target: "_blank",
    rel: "noopener"
  }, plugin.name))), /*#__PURE__*/React.createElement("div", {
    className: classes.dataField
  }, /*#__PURE__*/React.createElement(PersonIcon, {
    style: {
      marginRight: '0.5em'
    }
  }), /*#__PURE__*/React.createElement(Typography, null, plugin.authors.join(', '))), /*#__PURE__*/React.createElement(Typography, {
    className: classes.bold
  }, "Description:"), /*#__PURE__*/React.createElement(Typography, null, plugin.description)), /*#__PURE__*/React.createElement(CardActions, null, /*#__PURE__*/React.createElement(Button, {
    variant: "contained",
    color: "primary",
    disabled: disableButton,
    startIcon: isInstalled ? /*#__PURE__*/React.createElement(CheckIcon, null) : /*#__PURE__*/React.createElement(AddIcon, null),
    onClick: function onClick() {
      if (adminMode) {
        jbrowse.addPlugin({
          name: plugin.name,
          url: plugin.url
        });
      } else if (isSessionWithSessionPlugins(session)) {
        session.addSessionPlugin(plugin);
      }

      setTempDisabled(true);
    }
  }, isInstalled ? 'Installed' : 'Install')));
}

var PluginCard$1 = /*#__PURE__*/observer(PluginCard);

var useStyles$2 = /*#__PURE__*/makeStyles(function () {
  return {
    closeDialog: {
      position: 'absolute',
      right: 0,
      top: 0
    },
    dialogContainer: {
      margin: 15,
      display: 'flex',
      flexDirection: 'column'
    }
  };
});

function CustomPluginForm(_ref) {
  var open = _ref.open,
      _onClose = _ref.onClose,
      model = _ref.model;
  var classes = useStyles$2();

  var _useState = useState({
    name: '',
    url: ''
  }),
      _useState2 = _slicedToArray(_useState, 2),
      formInput = _useState2[0],
      setFormInput = _useState2[1];

  var handleChange = function handleChange(event) {
    setFormInput(_objectSpread2(_objectSpread2({}, formInput), {}, _defineProperty({}, event.target.name, event.target.value)));
  };

  var rootModel = getRoot(model);
  var jbrowse = rootModel.jbrowse;

  var handleSubmit = function handleSubmit() {
    jbrowse.addPlugin({
      name: formInput.name,
      url: formInput.url
    });
  };

  return /*#__PURE__*/React.createElement(Dialog$1, {
    open: open,
    onClose: function onClose() {
      return _onClose(false);
    }
  }, /*#__PURE__*/React.createElement(DialogTitle$1, null, /*#__PURE__*/React.createElement(IconButton$1, {
    className: classes.closeDialog,
    "aria-label": "close-dialog",
    onClick: function onClick() {
      return _onClose(false);
    }
  }, /*#__PURE__*/React.createElement(CloseIcon, null))), /*#__PURE__*/React.createElement("div", {
    className: classes.dialogContainer
  }, /*#__PURE__*/React.createElement(TextField, {
    id: "name-input",
    name: "name",
    label: "Plugin name",
    variant: "outlined",
    value: formInput.name,
    onChange: handleChange,
    multiline: true
  }), /*#__PURE__*/React.createElement(TextField, {
    id: "url-input",
    name: "url",
    label: "Plugin URL",
    variant: "outlined",
    value: formInput.url,
    onChange: handleChange,
    multiline: true
  }), /*#__PURE__*/React.createElement(Button$1, {
    variant: "contained",
    color: "primary",
    style: {
      marginTop: '1.5rem'
    },
    onClick: handleSubmit
  }, "Add plugin")));
}

var CustomPluginForm$1 = /*#__PURE__*/observer(CustomPluginForm);

var useStyles$3 = /*#__PURE__*/makeStyles$1(function (theme) {
  return {
    accordion: {
      marginTop: '1em'
    },
    expandIcon: {
      color: '#fff'
    },
    searchBox: {
      marginBottom: theme.spacing(2)
    },
    adminBadge: {
      margin: '0.5em',
      borderRadius: 3,
      // this is the quaternary color in JB2 palette
      backgroundColor: '#FFB11D',
      padding: '1em',
      display: 'flex',
      alignContent: 'center'
    },
    customPluginButton: {
      margin: '0.5em',
      display: 'flex',
      justifyContent: 'center'
    }
  };
});

function PluginStoreWidget(_ref) {
  var model = _ref.model;
  var classes = useStyles$3();

  var _useState = useState([]),
      _useState2 = _slicedToArray(_useState, 2),
      pluginArray = _useState2[0],
      setPluginArray = _useState2[1];

  var _useState3 = useState(),
      _useState4 = _slicedToArray(_useState3, 2),
      error = _useState4[0],
      setError = _useState4[1];

  var _useState5 = useState(false),
      _useState6 = _slicedToArray(_useState5, 2),
      customPluginFormOpen = _useState6[0],
      setCustomPluginFormOpen = _useState6[1];

  var _getSession = getSession(model),
      adminMode = _getSession.adminMode;

  var _getEnv = getEnv(model),
      pluginManager = _getEnv.pluginManager;

  useEffect(function () {
    var killed = false;

    _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
      var fetchResult, array;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return fetch('https://jbrowse.org/plugin-store/plugins.json');

            case 3:
              fetchResult = _context.sent;

              if (fetchResult.ok) {
                _context.next = 6;
                break;
              }

              throw new Error('Failed to fetch plugin data');

            case 6:
              _context.next = 8;
              return fetchResult.json();

            case 8:
              array = _context.sent;

              if (!killed) {
                setPluginArray(array.plugins);
              }

              _context.next = 15;
              break;

            case 12:
              _context.prev = 12;
              _context.t0 = _context["catch"](0);
              setError(_context.t0);

            case 15:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[0, 12]]);
    }))();

    return function () {
      killed = true;
    };
  }, []);
  return /*#__PURE__*/React.createElement("div", null, adminMode && /*#__PURE__*/React.createElement(React.Fragment, null, !isElectron && /*#__PURE__*/React.createElement("div", {
    className: classes.adminBadge
  }, /*#__PURE__*/React.createElement(InfoOutlinedIcon, {
    style: {
      marginRight: '0.3em'
    }
  }), /*#__PURE__*/React.createElement(Typography, null, "You are using the ", /*#__PURE__*/React.createElement("code", null, "admin-server"), ". Any changes you make will be saved to your configuration file. You also have the ability to add custom plugins that are not in the store.")), /*#__PURE__*/React.createElement("div", {
    className: classes.customPluginButton
  }, /*#__PURE__*/React.createElement(Button, {
    variant: "contained",
    color: "primary",
    onClick: function onClick() {
      return setCustomPluginFormOpen(true);
    }
  }, "Add custom plugin")), /*#__PURE__*/React.createElement(CustomPluginForm$1, {
    open: customPluginFormOpen,
    onClose: setCustomPluginFormOpen,
    model: model
  })), /*#__PURE__*/React.createElement(TextField$1, {
    className: classes.searchBox,
    label: "Filter plugins",
    value: model.filterText,
    onChange: function onChange(event) {
      return model.setFilterText(event.target.value);
    },
    fullWidth: true,
    InputProps: {
      endAdornment: /*#__PURE__*/React.createElement(InputAdornment, {
        position: "end"
      }, /*#__PURE__*/React.createElement(IconButton, {
        color: "secondary",
        onClick: function onClick() {
          return model.clearFilterText();
        }
      }, /*#__PURE__*/React.createElement(ClearIcon, null)))
    }
  }), /*#__PURE__*/React.createElement(Accordion, {
    defaultExpanded: true
  }, /*#__PURE__*/React.createElement(AccordionSummary, {
    expandIcon: /*#__PURE__*/React.createElement(ExpandMoreIcon, {
      className: classes.expandIcon
    })
  }, /*#__PURE__*/React.createElement(Typography, {
    variant: "h5"
  }, "Installed plugins")), /*#__PURE__*/React.createElement("div", {
    style: {
      margin: '1em'
    }
  }, /*#__PURE__*/React.createElement(InstalledPluginsList$1, {
    pluginManager: pluginManager,
    model: model
  }))), /*#__PURE__*/React.createElement(Accordion, {
    defaultExpanded: true
  }, /*#__PURE__*/React.createElement(AccordionSummary, {
    expandIcon: /*#__PURE__*/React.createElement(ExpandMoreIcon, {
      className: classes.expandIcon
    })
  }, /*#__PURE__*/React.createElement(Typography, {
    variant: "h5"
  }, "Available plugins")), error ? /*#__PURE__*/React.createElement(Typography, {
    color: "error"
  }, "".concat(error)) : pluginArray.length ? pluginArray.filter(function (plugin) {
    return plugin.name.toLowerCase().includes(model.filterText.toLowerCase());
  }).map(function (plugin) {
    return /*#__PURE__*/React.createElement(PluginCard$1, {
      key: plugin.name,
      plugin: plugin,
      model: model,
      adminMode: !!adminMode
    });
  }) : /*#__PURE__*/React.createElement(Typography, null, "Loading...")));
}

var PluginStoreWidget$1 = /*#__PURE__*/observer(PluginStoreWidget);

var PluginStoreWidget$2 = {
  __proto__: null,
  'default': PluginStoreWidget$1
};

function f$1(pluginManager) {
  return types.model('PluginStoreModel', {
    id: ElementId,
    type: types.literal('PluginStoreWidget'),
    filterText: '',
    view: types.safeReference(pluginManager.pluggableMstType('view', 'stateModel'))
  }).actions(function (self) {
    return {
      clearFilterText: function clearFilterText() {
        self.filterText = '';
      },
      setFilterText: function setFilterText(newText) {
        self.filterText = newText;
      }
    };
  });
}

var configSchema$3 = /*#__PURE__*/ConfigurationSchema('PluginStoreWidget', {});

var SetDefaultSession = /*#__PURE__*/lazy(function () {
  return Promise.resolve().then(function () { return index; });
});
var AssemblyManager = /*#__PURE__*/lazy(function () {
  return Promise.resolve().then(function () { return index$1; });
});

var _default = /*#__PURE__*/function (_Plugin) {
  _inherits(_default, _Plugin);

  var _super = /*#__PURE__*/_createSuper(_default);

  function _default() {
    var _this;

    _classCallCheck(this, _default);

    _this = _super.apply(this, arguments);
    _this.name = 'DataManagementPlugin';
    _this.exports = {
      AssemblyManager: AssemblyManager,
      SetDefaultSession: SetDefaultSession
    };
    return _this;
  }

  _createClass(_default, [{
    key: "install",
    value: function install(pluginManager) {
      pluginManager.addConnectionType(function () {
        return new ConnectionType({
          name: 'UCSCTrackHubConnection',
          configSchema: ucscConfigSchema,
          stateModel: UCSCTrackHubConnection(pluginManager),
          displayName: 'UCSC Track Hub',
          description: 'A track or assembly hub in the Track Hub format',
          url: '//genome.ucsc.edu/goldenPath/help/hgTrackHubHelp.html#Intro'
        });
      });
      pluginManager.addWidgetType(function () {
        return new WidgetType({
          name: 'HierarchicalTrackSelectorWidget',
          heading: 'Available tracks',
          configSchema: configSchema$2,
          stateModel: HierarchicalTrackSelectorStateModelFactory(pluginManager),
          ReactComponent: /*#__PURE__*/lazy(function () {
            return Promise.resolve().then(function () { return HierarchicalTrackSelector$1; });
          })
        });
      });
      pluginManager.addWidgetType(function () {
        return new WidgetType({
          name: 'AddTrackWidget',
          heading: 'Add a track',
          configSchema: configSchema,
          stateModel: f(pluginManager),
          ReactComponent: /*#__PURE__*/lazy(function () {
            return Promise.resolve().then(function () { return AddTrackWidget$2; });
          })
        });
      });
      pluginManager.addWidgetType(function () {
        return new WidgetType({
          name: 'AddConnectionWidget',
          heading: 'Add a connection',
          configSchema: configSchema$1,
          stateModel: AddConnectionStateModel,
          ReactComponent: /*#__PURE__*/lazy(function () {
            return Promise.resolve().then(function () { return AddConnectionWidget$2; });
          })
        });
      });
      pluginManager.addWidgetType(function () {
        return new WidgetType({
          name: 'PluginStoreWidget',
          heading: 'Plugin store',
          configSchema: configSchema$3,
          stateModel: f$1(pluginManager),
          ReactComponent: /*#__PURE__*/lazy(function () {
            return Promise.resolve().then(function () { return PluginStoreWidget$2; });
          })
        });
      });
    }
  }, {
    key: "configure",
    value: function configure(pluginManager) {
      if (isAbstractMenuManager(pluginManager.rootModel)) {
        pluginManager.rootModel.appendToMenu('File', {
          label: 'Open track',
          icon: NoteAddIcon,
          onClick: function onClick(session) {
            if (session.views.length === 0) {
              session.notify('Please open a view to add a track first');
            } else if (session.views.length >= 1) {
              var widget = session.addWidget('AddTrackWidget', 'addTrackWidget', {
                view: session.views[0].id
              });
              session.showWidget(widget);

              if (session.views.length > 1) {
                session.notify("This will add a track to the first view. Note: if you want to open a track in a specific view open the track selector for that view and use the add track (plus icon) in the bottom right");
              }
            }
          }
        });
        pluginManager.rootModel.appendToMenu('File', {
          label: 'Open connection',
          icon: InputIcon,
          onClick: function onClick(session) {
            var widget = session.addWidget('AddConnectionWidget', 'addConnectionWidget');
            session.showWidget(widget);
          }
        });
        pluginManager.rootModel.appendToMenu('File', {
          label: 'Plugin store',
          icon: ExtensionIcon,
          onClick: function onClick(session) {
            var widget = session.addWidget('PluginStoreWidget', 'pluginStoreWidget');
            session.showWidget(widget);
          }
        });
      }
    }
  }]);

  return _default;
}(Plugin);

var useStyles$4 = /*#__PURE__*/makeStyles(function (theme) {
  return {
    root: {
      margin: theme.spacing(1)
    },
    message: {
      padding: theme.spacing(3)
    },
    titleBox: {
      color: '#fff',
      backgroundColor: theme.palette.primary.main,
      textAlign: 'center'
    },
    dialogContent: {
      width: 600
    },
    resetButton: {
      justifyContent: 'center',
      marginBottom: '6px'
    }
  };
});
var CurrentSession = /*#__PURE__*/observer(function (_ref) {
  var session = _ref.session,
      selectedDefault = _ref.selectedDefault,
      handleRadio = _ref.handleRadio;
  var classes = useStyles$4();
  return /*#__PURE__*/React.createElement(Paper, {
    className: classes.root
  }, /*#__PURE__*/React.createElement(List$1, {
    subheader: /*#__PURE__*/React.createElement(ListSubheader, null, "Currently open session")
  }, /*#__PURE__*/React.createElement(ListItem$1, null, /*#__PURE__*/React.createElement(ListItemIcon, null, /*#__PURE__*/React.createElement(Radio, {
    checked: session.name === selectedDefault,
    onChange: function onChange() {
      return handleRadio(session);
    }
  })), /*#__PURE__*/React.createElement(ListItemText, {
    primary: session.name
  }))));
});
var SetDefaultSession$1 = /*#__PURE__*/observer(function (_ref2) {
  var rootModel = _ref2.rootModel,
      open = _ref2.open,
      onClose = _ref2.onClose,
      currentDefault = _ref2.currentDefault;
  var classes = useStyles$4();
  var session = rootModel.session;

  var _useState = useState(currentDefault),
      _useState2 = _slicedToArray(_useState, 2),
      selectedDefault = _useState2[0],
      setSelectedDefault = _useState2[1]; // eslint-disable-next-line @typescript-eslint/no-explicit-any


  function handleRadio(sessionSnapshot) {
    setSelectedDefault(sessionSnapshot.name);
    rootModel.jbrowse.setDefaultSessionConf(sessionSnapshot);
    session.notify("Set default session to ".concat(sessionSnapshot.name), 'success');
  }

  return /*#__PURE__*/React.createElement(Dialog$1, {
    open: open
  }, /*#__PURE__*/React.createElement(DialogTitle$1, {
    className: classes.titleBox
  }, "Set Default Session"), /*#__PURE__*/React.createElement(DialogContent$1, null, /*#__PURE__*/React.createElement(Grid, {
    className: classes.resetButton,
    container: true
  }, /*#__PURE__*/React.createElement(Grid, {
    item: true
  }, /*#__PURE__*/React.createElement(Button$1, {
    color: "secondary",
    variant: "contained",
    onClick: function onClick() {
      setSelectedDefault('New session');
      rootModel.jbrowse.setDefaultSessionConf({
        name: "New session"
      });
      session.notify('Reset default session', 'success');
    }
  }, "Clear default session"))), /*#__PURE__*/React.createElement(CurrentSession, {
    session: session,
    selectedDefault: selectedDefault,
    handleRadio: handleRadio
  }), /*#__PURE__*/React.createElement(Paper, {
    className: classes.root
  }, /*#__PURE__*/React.createElement(List$1, {
    subheader: /*#__PURE__*/React.createElement(ListSubheader, null, "Saved sessions")
  }, session.savedSessions.length ? session.savedSessions.map( // eslint-disable-next-line @typescript-eslint/no-explicit-any
  function (sessionSnapshot) {
    var _sessionSnapshot$view = sessionSnapshot.views,
        views = _sessionSnapshot$view === void 0 ? [] : _sessionSnapshot$view;
    var totalTracks = views // eslint-disable-next-line @typescript-eslint/no-explicit-any
    .map(function (view) {
      return view.tracks.length;
    }).reduce(function (a, b) {
      return a + b;
    }, 0);

    if (sessionSnapshot.name !== session.name) {
      return /*#__PURE__*/React.createElement(ListItem$1, {
        key: sessionSnapshot.name
      }, /*#__PURE__*/React.createElement(ListItemIcon, null, /*#__PURE__*/React.createElement(Radio, {
        checked: sessionSnapshot.name === selectedDefault,
        onChange: function onChange() {
          return handleRadio(sessionSnapshot);
        }
      })), /*#__PURE__*/React.createElement(ListItemText, {
        primary: sessionSnapshot.name,
        secondary: "".concat(views.length, " ").concat(pluralize('view', views.length), "; ").concat(totalTracks, "\n                             open ").concat(pluralize('track', totalTracks))
      }));
    }

    return null;
  }) : /*#__PURE__*/React.createElement(Typography$1, {
    className: classes.message
  }, "No saved sessions found")))), /*#__PURE__*/React.createElement(DialogActions$1, null, /*#__PURE__*/React.createElement(Button$1, {
    color: "secondary",
    variant: "contained",
    onClick: function onClick() {
      onClose(false);
    }
  }, "Return")));
});



var index = {
  __proto__: null,
  'default': SetDefaultSession$1
};

var useStyles$5 = /*#__PURE__*/makeStyles(function () {
  return {
    table: {
      minWidth: 500,
      minHeight: 150
    },
    buttonCell: {
      padding: 3
    },
    button: {
      display: 'inline-block',
      padding: 3,
      minHeight: 0,
      minWidth: 0
    }
  };
});
var AssemblyTable = /*#__PURE__*/observer(function (_ref) {
  var rootModel = _ref.rootModel,
      setIsAssemblyBeingEdited = _ref.setIsAssemblyBeingEdited,
      setAssemblyBeingEdited = _ref.setAssemblyBeingEdited;
  var classes = useStyles$5();

  function removeAssembly(name) {
    rootModel.jbrowse.removeAssemblyConf(name);
  } // eslint-disable-next-line @typescript-eslint/no-explicit-any


  var rows = rootModel.jbrowse.assemblies.map(function (assembly) {
    var name = readConfObject(assembly, 'name');
    var aliases = readConfObject(assembly, 'aliases');
    return /*#__PURE__*/React.createElement(TableRow, {
      key: name
    }, /*#__PURE__*/React.createElement(TableCell, null, name), /*#__PURE__*/React.createElement(TableCell, null, aliases ? aliases.toString() : ''), /*#__PURE__*/React.createElement(TableCell, {
      className: classes.buttonCell
    }, /*#__PURE__*/React.createElement(IconButton, {
      "data-testid": "".concat(name, "-edit"),
      className: classes.button,
      onClick: function onClick() {
        setIsAssemblyBeingEdited(true);
        setAssemblyBeingEdited(assembly);
      }
    }, /*#__PURE__*/React.createElement(CreateIcon, {
      color: "primary"
    })), /*#__PURE__*/React.createElement(IconButton, {
      "data-testid": "".concat(name, "-delete"),
      className: classes.button,
      onClick: function onClick() {
        removeAssembly(name);
      }
    }, /*#__PURE__*/React.createElement(DeleteIcon, {
      color: "error"
    }))));
  });
  return /*#__PURE__*/React.createElement(TableContainer, {
    component: Paper
  }, /*#__PURE__*/React.createElement(Table, {
    className: classes.table
  }, /*#__PURE__*/React.createElement(TableHead, null, /*#__PURE__*/React.createElement(TableRow, null, /*#__PURE__*/React.createElement(TableCell, null, /*#__PURE__*/React.createElement(Typography$1, {
    variant: "h5"
  }, "Name")), /*#__PURE__*/React.createElement(TableCell, null, /*#__PURE__*/React.createElement(Typography$1, {
    variant: "h5"
  }, "Aliases")), /*#__PURE__*/React.createElement(TableCell, null, /*#__PURE__*/React.createElement(Typography$1, {
    variant: "h5"
  }, "Actions")))), /*#__PURE__*/React.createElement(TableBody, null, rows)));
});

var useStyles$6 = /*#__PURE__*/makeStyles$1(function (theme) {
  return createStyles({
    root: {
      flexGrow: 1,
      overflow: 'hidden',
      padding: theme.spacing(0, 3)
    },
    paper: {
      maxWidth: 400,
      margin: "".concat(theme.spacing(1), "px auto"),
      padding: theme.spacing(2)
    },
    createButton: {
      marginTop: '1em',
      justifyContent: 'center'
    },
    paperContent: {
      flex: 'auto',
      margin: "".concat(theme.spacing(1), "px auto"),
      padding: theme.spacing(1),
      overflow: 'auto'
    }
  });
});
var AdapterSelector = /*#__PURE__*/observer(function (_ref) {
  var adapterSelection = _ref.adapterSelection,
      setAdapterSelection = _ref.setAdapterSelection,
      adapterTypes = _ref.adapterTypes;
  return /*#__PURE__*/React.createElement(TextField$1, {
    value: adapterSelection,
    label: "Type",
    select: true,
    helperText: "Type of adapter to use",
    fullWidth: true,
    onChange: function onChange(event) {
      setAdapterSelection(event.target.value);
    }
  }, adapterTypes.map(function (str) {
    return /*#__PURE__*/React.createElement(MenuItem, {
      key: str,
      value: str
    }, str);
  }));
});
var AdapterInput = /*#__PURE__*/observer(function (_ref2) {
  var adapterSelection = _ref2.adapterSelection,
      fastaLocation = _ref2.fastaLocation,
      setFastaLocation = _ref2.setFastaLocation,
      faiLocation = _ref2.faiLocation,
      setFaiLocation = _ref2.setFaiLocation,
      gziLocation = _ref2.gziLocation,
      setGziLocation = _ref2.setGziLocation,
      twoBitLocation = _ref2.twoBitLocation,
      setTwoBitLocation = _ref2.setTwoBitLocation;

  if (adapterSelection === 'IndexedFastaAdapter' || adapterSelection === 'BgzipFastaAdapter') {
    return /*#__PURE__*/React.createElement(Grid, {
      container: true,
      spacing: 2
    }, /*#__PURE__*/React.createElement(Grid, {
      item: true
    }, /*#__PURE__*/React.createElement(FileSelector, {
      name: "fastaLocation",
      location: fastaLocation,
      setLocation: function setLocation(loc) {
        return setFastaLocation(loc);
      }
    })), /*#__PURE__*/React.createElement(Grid, {
      item: true
    }, /*#__PURE__*/React.createElement(FileSelector, {
      name: "faiLocation",
      location: faiLocation,
      setLocation: function setLocation(loc) {
        return setFaiLocation(loc);
      }
    })), adapterSelection === 'BgzipFastaAdapter' ? /*#__PURE__*/React.createElement(Grid, {
      item: true
    }, /*#__PURE__*/React.createElement(FileSelector, {
      name: "gziLocation",
      location: gziLocation,
      setLocation: function setLocation(loc) {
        return setGziLocation(loc);
      }
    })) : null);
  }

  if (adapterSelection === 'TwoBitAdapter') {
    return /*#__PURE__*/React.createElement(FileSelector, {
      name: "twoBitLocation",
      location: twoBitLocation,
      setLocation: function setLocation(loc) {
        return setTwoBitLocation(loc);
      }
    });
  }

  return null;
});
var AssemblyAddForm = /*#__PURE__*/observer(function (_ref3) {
  var rootModel = _ref3.rootModel,
      setFormOpen = _ref3.setFormOpen;
  var classes = useStyles$6();
  var adapterTypes = ['IndexedFastaAdapter', 'BgzipFastaAdapter', 'TwoBitAdapter'];

  var _useState = useState(''),
      _useState2 = _slicedToArray(_useState, 2),
      assemblyName = _useState2[0],
      setAssemblyName = _useState2[1];

  var _useState3 = useState(adapterTypes[0]),
      _useState4 = _slicedToArray(_useState3, 2),
      adapterSelection = _useState4[0],
      setAdapterSelection = _useState4[1];

  var _useState5 = useState({
    uri: ''
  }),
      _useState6 = _slicedToArray(_useState5, 2),
      fastaLocation = _useState6[0],
      setFastaLocation = _useState6[1];

  var _useState7 = useState({
    uri: ''
  }),
      _useState8 = _slicedToArray(_useState7, 2),
      faiLocation = _useState8[0],
      setFaiLocation = _useState8[1];

  var _useState9 = useState({
    uri: ''
  }),
      _useState10 = _slicedToArray(_useState9, 2),
      gziLocation = _useState10[0],
      setGziLocation = _useState10[1];

  var _useState11 = useState({
    uri: ''
  }),
      _useState12 = _slicedToArray(_useState11, 2),
      twoBitLocation = _useState12[0],
      setTwoBitLocation = _useState12[1];

  function createAssembly() {
    if (assemblyName === '') {
      rootModel.session.notify("Can't create an assembly without a name");
    } else {
      setFormOpen(false); // setIsAssemblyBeingEdited(true)

      var newAssembly;

      if (adapterSelection === 'IndexedFastaAdapter') {
        newAssembly = {
          name: assemblyName,
          sequence: {
            adapter: {
              type: 'IndexedFastaAdapter',
              fastaLocation: fastaLocation,
              faiLocation: faiLocation
            }
          }
        };
      } else if (adapterSelection === 'BgzipFastaAdapter') {
        newAssembly = {
          name: assemblyName,
          sequence: {
            adapter: {
              type: 'BgzipFastaAdapter',
              fastaLocation: fastaLocation,
              faiLocation: faiLocation,
              gziLocation: gziLocation
            }
          }
        };
      } else if (adapterSelection === 'TwoBitAdapter') {
        newAssembly = {
          name: assemblyName,
          sequence: {
            adapter: {
              type: 'TwoBitAdapter',
              twoBitLocation: twoBitLocation
            }
          }
        };
      }

      rootModel.jbrowse.addAssemblyConf(newAssembly);
      rootModel.session.notify("Successfully added ".concat(assemblyName, " assembly to JBrowse 2"), 'success');
    }
  }

  return /*#__PURE__*/React.createElement("div", {
    className: classes.root
  }, /*#__PURE__*/React.createElement(Paper$1, {
    className: classes.paper
  }, /*#__PURE__*/React.createElement(TextField$1, {
    id: "assembly-name",
    inputProps: {
      'data-testid': 'assembly-name'
    },
    label: "Assembly Name",
    variant: "outlined",
    value: assemblyName,
    onChange: function onChange(event) {
      return setAssemblyName(event.target.value);
    }
  }), /*#__PURE__*/React.createElement(AdapterSelector, {
    adapterSelection: adapterSelection,
    setAdapterSelection: setAdapterSelection,
    adapterTypes: adapterTypes
  }), /*#__PURE__*/React.createElement("div", {
    className: classes.paperContent
  }, /*#__PURE__*/React.createElement(AdapterInput, {
    adapterSelection: adapterSelection,
    fastaLocation: fastaLocation,
    setFastaLocation: setFastaLocation,
    faiLocation: faiLocation,
    setFaiLocation: setFaiLocation,
    gziLocation: gziLocation,
    setGziLocation: setGziLocation,
    twoBitLocation: twoBitLocation,
    setTwoBitLocation: setTwoBitLocation
  }))), /*#__PURE__*/React.createElement(Grid, {
    container: true,
    className: classes.createButton
  }, /*#__PURE__*/React.createElement(Grid, {
    item: true
  }, /*#__PURE__*/React.createElement(Button, {
    variant: "contained",
    color: "secondary",
    startIcon: /*#__PURE__*/React.createElement(AddIcon, null),
    onClick: createAssembly
  }, "Create new assembly"))));
});

var AssemblyEditor = /*#__PURE__*/observer(function (_ref) {
  var assembly = _ref.assembly;
  return /*#__PURE__*/React.createElement(ConfigurationEditor, {
    model: {
      target: assembly
    }
  });
});

var useStyles$7 = /*#__PURE__*/makeStyles(function (theme) {
  return {
    titleBox: {
      color: '#fff',
      backgroundColor: theme.palette.primary.main,
      textAlign: 'center'
    },
    dialogContent: {
      width: '100%'
    },
    backButton: {
      color: '#fff',
      position: 'absolute',
      left: theme.spacing(4),
      top: theme.spacing(4)
    },
    closeButton: {
      position: 'absolute',
      right: theme.spacing(1),
      top: theme.spacing(1),
      color: theme.palette.grey[500]
    }
  };
});
var AssemblyManager$1 = /*#__PURE__*/observer(function (_ref) {
  var rootModel = _ref.rootModel,
      open = _ref.open,
      _onClose = _ref.onClose;
  var classes = useStyles$7();

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isFormOpen = _useState2[0],
      setFormOpen = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      isAssemblyBeingEdited = _useState4[0],
      setIsAssemblyBeingEdited = _useState4[1];

  var _useState5 = useState(),
      _useState6 = _slicedToArray(_useState5, 2),
      assemblyBeingEdited = _useState6[0],
      setAssemblyBeingEdited = _useState6[1];

  var showAssemblyTable = !isFormOpen && !isAssemblyBeingEdited;
  return /*#__PURE__*/React.createElement(Dialog$1, {
    open: open,
    onClose: function onClose() {
      return _onClose(false);
    }
  }, /*#__PURE__*/React.createElement(DialogTitle$1, {
    className: classes.titleBox
  }, showAssemblyTable ? 'Assembly manager' : null, isFormOpen ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(IconButton$2, {
    "aria-label": "back",
    className: classes.backButton,
    onClick: function onClick() {
      return setFormOpen(false);
    }
  }, /*#__PURE__*/React.createElement(ArrowBackIosIcon, null)), "Add new assembly") : null, isAssemblyBeingEdited ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(IconButton$2, {
    "aria-label": "back",
    className: classes.backButton,
    onClick: function onClick() {
      return setIsAssemblyBeingEdited(false);
    }
  }, /*#__PURE__*/React.createElement(ArrowBackIosIcon, null)), returnAssemblyName(assemblyBeingEdited)) : null, /*#__PURE__*/React.createElement(IconButton$2, {
    "aria-label": "close",
    className: classes.closeButton,
    onClick: function onClick() {
      return _onClose(false);
    }
  }, /*#__PURE__*/React.createElement(CloseIcon, null))), /*#__PURE__*/React.createElement(DialogContent$1, null, /*#__PURE__*/React.createElement("div", {
    className: classes.dialogContent
  }, showAssemblyTable ? /*#__PURE__*/React.createElement(AssemblyTable, {
    rootModel: rootModel,
    setIsAssemblyBeingEdited: setIsAssemblyBeingEdited,
    setAssemblyBeingEdited: setAssemblyBeingEdited
  }) : null, isAssemblyBeingEdited ? /*#__PURE__*/React.createElement(AssemblyEditor, {
    assembly: assemblyBeingEdited
  }) : null, isFormOpen ? /*#__PURE__*/React.createElement(AssemblyAddForm, {
    rootModel: rootModel,
    setFormOpen: setFormOpen
  }) : null)), /*#__PURE__*/React.createElement(DialogActions$1, null, showAssemblyTable ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button$1, {
    color: "secondary",
    variant: "contained",
    onClick: function onClick() {
      return _onClose(false);
    }
  }, "Close"), /*#__PURE__*/React.createElement(Button$1, {
    variant: "contained",
    color: "secondary",
    startIcon: /*#__PURE__*/React.createElement(AddIcon, null),
    onClick: function onClick() {
      return setFormOpen(true);
    }
  }, "Add new assembly")) : null));
}); // eslint-disable-next-line @typescript-eslint/no-explicit-any

function returnAssemblyName(assembly) {
  if (assembly !== undefined) {
    return assembly.name;
  }

  return null;
}



var index$1 = {
  __proto__: null,
  'default': AssemblyManager$1
};

var CloseConnectionDialog = /*#__PURE__*/lazy(function () {
  return Promise.resolve().then(function () { return CloseConnectionDialog$3; });
});
var DeleteConnectionDialog = /*#__PURE__*/lazy(function () {
  return Promise.resolve().then(function () { return DeleteConnectionDialog$3; });
});
var ManageConnectionsDialog = /*#__PURE__*/lazy(function () {
  return Promise.resolve().then(function () { return ManageConnectionsDialog$2; });
});
var ToggleConnectionsDialog = /*#__PURE__*/lazy(function () {
  return Promise.resolve().then(function () { return ToggleConnectionsDialog$2; });
});
var useStyles$8 = /*#__PURE__*/makeStyles$1(function (theme) {
  var _theme$palette$tertia, _theme$palette$tertia2;

  return {
    searchBox: {
      marginBottom: theme.spacing(2)
    },
    menuIcon: {
      marginRight: theme.spacing(1),
      marginBottom: 0
    },
    fab: {
      position: 'absolute',
      bottom: theme.spacing(6),
      right: theme.spacing(6)
    },
    compactCheckbox: {
      padding: 0
    },
    checkboxLabel: {
      marginRight: 0,
      '&:hover': {
        backgroundColor: '#eee'
      }
    },
    // this accordionBase element's small padding is used to give a margin to
    // accordionColor it a "margin" because the virtualized elements can't really
    // use margin in a conventional way (it doesn't affect layout)
    accordionBase: {
      display: 'flex'
    },
    accordionCard: {
      padding: 3,
      cursor: 'pointer',
      display: 'flex'
    },
    nestingLevelMarker: {
      position: 'absolute',
      borderLeft: '1.5px solid #555'
    },
    // accordionColor set's display:flex so that the child accordionText use
    // vertically centered text
    accordionColor: {
      background: (_theme$palette$tertia = theme.palette.tertiary) === null || _theme$palette$tertia === void 0 ? void 0 : _theme$palette$tertia.main,
      color: (_theme$palette$tertia2 = theme.palette.tertiary) === null || _theme$palette$tertia2 === void 0 ? void 0 : _theme$palette$tertia2.contrastText,
      width: '100%',
      display: 'flex',
      paddingLeft: 5
    },
    // margin:auto 0 to center text vertically
    accordionText: {
      margin: 'auto 0'
    }
  };
}); // An individual node in the track selector. Note: manually sets cursor:
// pointer improves usability for what can be clicked

var Node = function Node(props) {
  var data = props.data,
      isOpen = props.isOpen,
      style = props.style,
      setOpen = props.setOpen;
  var isLeaf = data.isLeaf,
      nestingLevel = data.nestingLevel,
      checked = data.checked,
      id = data.id,
      name = data.name,
      _onChange = data.onChange,
      conf = data.conf,
      onMoreInfo = data.onMoreInfo;
  var classes = useStyles$8();
  var width = 10;
  var marginLeft = nestingLevel * width + (isLeaf ? width : 0);
  var unsupported = name && (name.endsWith('(Unsupported)') || name.endsWith('(Unknown)'));
  return /*#__PURE__*/React.createElement("div", {
    style: style,
    className: !isLeaf ? classes.accordionBase : undefined
  }, new Array(nestingLevel).fill(0).map(function (_, idx) {
    return /*#__PURE__*/React.createElement("div", {
      key: "mark-".concat(idx),
      style: {
        left: idx * width + 4,
        height: style.height
      },
      className: classes.nestingLevelMarker
    });
  }), /*#__PURE__*/React.createElement("div", {
    className: !isLeaf ? classes.accordionCard : undefined,
    onClick: function onClick() {
      return setOpen(!isOpen);
    },
    style: {
      marginLeft: marginLeft,
      whiteSpace: 'nowrap',
      width: '100%'
    }
  }, /*#__PURE__*/React.createElement("div", {
    className: !isLeaf ? classes.accordionColor : undefined
  }, !isLeaf ? /*#__PURE__*/React.createElement("div", {
    className: classes.accordionText
  }, /*#__PURE__*/React.createElement(Typography, null, isOpen ? /*#__PURE__*/React.createElement(ArrowDropDownIcon, null) : /*#__PURE__*/React.createElement(ArrowRightIcon, null), name)) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormControlLabel, {
    className: classes.checkboxLabel,
    control: /*#__PURE__*/React.createElement(Checkbox, {
      className: classes.compactCheckbox,
      checked: checked,
      onChange: function onChange() {
        return _onChange(id);
      },
      color: "primary",
      disabled: unsupported,
      inputProps: {
        'data-testid': "htsTrackEntry-".concat(id)
      }
    }),
    label: name
  }), /*#__PURE__*/React.createElement(IconButton, {
    onClick: function onClick(e) {
      return onMoreInfo({
        target: e.currentTarget,
        id: id,
        conf: conf
      });
    },
    color: "secondary",
    "data-testid": "htsTrackEntryMenu-".concat(id)
  }, /*#__PURE__*/React.createElement(MoreIcon, null))))));
};

var getNodeData = function getNodeData(node, nestingLevel, extra) {
  var isLeaf = !!node.conf;
  return {
    data: _objectSpread2(_objectSpread2({
      defaultHeight: isLeaf ? 22 : 40,
      isLeaf: isLeaf,
      isOpenByDefault: true,
      nestingLevel: nestingLevel
    }, node), extra),
    nestingLevel: nestingLevel,
    node: node
  };
}; // this is the main tree component for the hierarchical track selector in note:
// in jbrowse-web the toolbar is position="sticky" which means the autosizer
// includes the height of the toolbar, so we subtract the given offsets


var HierarchicalTree = /*#__PURE__*/observer(function (_ref) {
  var _session$getTrackActi;

  var height = _ref.height,
      tree = _ref.tree,
      model = _ref.model;
  var treeRef = useRef(null);

  var _useState = useState(),
      _useState2 = _slicedToArray(_useState, 2),
      info = _useState2[0],
      setMoreInfo = _useState2[1];

  var session = getSession(model);
  var filterText = model.filterText;
  var extra = useMemo(function () {
    return {
      onChange: function onChange(trackId) {
        return model.view.toggleTrack(trackId);
      },
      onMoreInfo: setMoreInfo
    };
  }, [model.view]);
  var treeWalker = useCallback( /*#__PURE__*/runtime_1.mark(function treeWalker() {
    var i, parentMeta, _i, curr;

    return runtime_1.wrap(function treeWalker$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            i = 0;

          case 1:
            if (!(i < tree.children.length)) {
              _context.next = 7;
              break;
            }

            _context.next = 4;
            return getNodeData(tree.children[i], 0, extra);

          case 4:
            i++;
            _context.next = 1;
            break;

          case 7:

            _context.next = 10;
            return;

          case 10:
            parentMeta = _context.sent;
            _i = 0;

          case 12:
            if (!(_i < parentMeta.node.children.length)) {
              _context.next = 19;
              break;
            }

            curr = parentMeta.node.children[_i];
            _context.next = 16;
            return getNodeData(curr, parentMeta.nestingLevel + 1, extra);

          case 16:
            _i++;
            _context.next = 12;
            break;

          case 19:
            _context.next = 7;
            break;

          case 21:
          case "end":
            return _context.stop();
        }
      }
    }, treeWalker);
  }), [tree, extra]);
  var conf = info === null || info === void 0 ? void 0 : info.conf;
  var menuItems = conf && ((_session$getTrackActi = session.getTrackActionMenuItems) === null || _session$getTrackActi === void 0 ? void 0 : _session$getTrackActi.call(session, conf)) || [];
  useEffect(function () {
    treeRef.current.recomputeTree({
      refreshNodes: true,
      useDefaultHeight: true
    });
  }, [tree, filterText]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(VariableSizeTree, {
    ref: treeRef,
    treeWalker: treeWalker,
    height: height
  }, Node), /*#__PURE__*/React.createElement(JBrowseMenu, {
    anchorEl: info === null || info === void 0 ? void 0 : info.target,
    menuItems: menuItems,
    onMenuItemClick: function onMenuItemClick(_event, callback) {
      callback();
      setMoreInfo(undefined);
    },
    open: Boolean(info),
    onClose: function onClose() {
      return setMoreInfo(undefined);
    }
  }));
}); // Don't use autosizer in jest and instead hardcode a height, otherwise fails
// jest tests

var AutoSizedHierarchicalTree = function AutoSizedHierarchicalTree(_ref2) {
  var tree = _ref2.tree,
      model = _ref2.model,
      offset = _ref2.offset;
  return typeof jest === 'undefined' ? /*#__PURE__*/React.createElement(AutoSizer, {
    disableWidth: true
  }, function (_ref3) {
    var height = _ref3.height;
    return /*#__PURE__*/React.createElement(HierarchicalTree, {
      height: height - offset,
      model: model,
      tree: tree
    });
  }) : /*#__PURE__*/React.createElement(HierarchicalTree, {
    height: 9000,
    model: model,
    tree: tree
  });
};

var Wrapper = function Wrapper(_ref4) {
  var overrideDimensions = _ref4.overrideDimensions,
      children = _ref4.children;
  return overrideDimensions ? /*#__PURE__*/React.createElement("div", {
    style: _objectSpread2({}, overrideDimensions)
  }, children) : /*#__PURE__*/React.createElement(React.Fragment, null, children);
};

var HierarchicalTrackSelectorContainer = /*#__PURE__*/observer(function (_ref5) {
  var model = _ref5.model,
      toolbarHeight = _ref5.toolbarHeight,
      overrideDimensions = _ref5.overrideDimensions;
  var classes = useStyles$8();
  var session = getSession(model);

  var _useState3 = useState(null),
      _useState4 = _slicedToArray(_useState3, 2),
      anchorEl = _useState4[0],
      setAnchorEl = _useState4[1];

  function handleFabClose() {
    setAnchorEl(null);
  }

  return /*#__PURE__*/React.createElement(Wrapper, {
    overrideDimensions: overrideDimensions
  }, /*#__PURE__*/React.createElement(HierarchicalTrackSelector, {
    model: model,
    toolbarHeight: toolbarHeight,
    overrideDimensions: overrideDimensions
  }), /*#__PURE__*/React.createElement(Fab, {
    color: "secondary",
    className: classes.fab,
    onClick: function onClick(event) {
      setAnchorEl(event.currentTarget);
    }
  }, /*#__PURE__*/React.createElement(AddIcon, null)), /*#__PURE__*/React.createElement(Menu, {
    anchorEl: anchorEl,
    open: Boolean(anchorEl),
    onClose: function onClose() {
      return setAnchorEl(null);
    }
  }, /*#__PURE__*/React.createElement(MenuItem, {
    onClick: function onClick() {
      handleFabClose();
      var widget = session.addWidget('AddConnectionWidget', 'addConnectionWidget');
      session.showWidget(widget);
    }
  }, "Add connection"), /*#__PURE__*/React.createElement(MenuItem, {
    onClick: function onClick() {
      handleFabClose();
      var widget = session.addWidget('AddTrackWidget', 'addTrackWidget', {
        view: model.view.id
      });
      session.showWidget(widget);
    }
  }, "Add track")));
});
var HierarchicalTrackSelectorHeader = /*#__PURE__*/observer(function (_ref6) {
  var model = _ref6.model,
      setHeaderHeight = _ref6.setHeaderHeight,
      setAssemblyIdx = _ref6.setAssemblyIdx,
      assemblyIdx = _ref6.assemblyIdx;
  var classes = useStyles$8();
  var session = getSession(model);

  var _useState5 = useState(),
      _useState6 = _slicedToArray(_useState5, 2),
      connectionAnchorEl = _useState6[0],
      setConnectionAnchorEl = _useState6[1];

  var _useState7 = useState(),
      _useState8 = _slicedToArray(_useState7, 2),
      menuAnchorEl = _useState8[0],
      setMenuAnchorEl = _useState8[1];

  var _useState9 = useState(),
      _useState10 = _slicedToArray(_useState9, 2),
      modalInfo = _useState10[0],
      setModalInfo = _useState10[1];

  var _useState11 = useState(),
      _useState12 = _slicedToArray(_useState11, 2),
      deleteDialogDetails = _useState12[0],
      setDeleteDialogDetails = _useState12[1];

  var _useState13 = useState(false),
      _useState14 = _slicedToArray(_useState13, 2),
      connectionManagerOpen = _useState14[0],
      setConnectionManagerOpen = _useState14[1];

  var _useState15 = useState(false),
      _useState16 = _slicedToArray(_useState15, 2),
      connectionToggleOpen = _useState16[0],
      setConnectionToggleOpen = _useState16[1];

  var assemblyNames = model.assemblyNames;
  var assemblyName = assemblyNames[assemblyIdx];

  function breakConnection(connectionConf, deletingConnection) {
    var name = readConfObject(connectionConf, 'name');
    var result = session.prepareToBreakConnection(connectionConf);

    if (result) {
      var _result = _slicedToArray(result, 2),
          safelyBreakConnection = _result[0],
          dereferenceTypeCount = _result[1];

      if (Object.keys(dereferenceTypeCount).length > 0) {
        setModalInfo({
          connectionConf: connectionConf,
          safelyBreakConnection: safelyBreakConnection,
          dereferenceTypeCount: dereferenceTypeCount,
          name: name
        });
      } else {
        safelyBreakConnection();
      }
    }

    if (deletingConnection) {
      setDeleteDialogDetails({
        name: name,
        connectionConf: connectionConf
      });
    }
  }

  var connectionMenuItems = [{
    label: 'Turn on/off connections...',
    onClick: function onClick() {
      return setConnectionToggleOpen(true);
    }
  }, {
    label: 'Delete connections...',
    onClick: function onClick() {
      return setConnectionManagerOpen(true);
    }
  }];
  var assemblyMenuItems = assemblyNames.length > 1 ? [{
    label: 'Select assembly...',
    subMenu: assemblyNames.map(function (name, idx) {
      return {
        label: name,
        onClick: function onClick() {
          setAssemblyIdx(idx);
        }
      };
    })
  }] : [];
  var menuItems = [{
    label: 'Add track...',
    onClick: function onClick() {
      session.showWidget(session.addWidget('AddTrackWidget', 'addTrackWidget', {
        view: model.view.id
      }));
    }
  }].concat(assemblyMenuItems);
  return /*#__PURE__*/React.createElement("div", {
    ref: function ref(_ref7) {
      return setHeaderHeight((_ref7 === null || _ref7 === void 0 ? void 0 : _ref7.getBoundingClientRect().height) || 0);
    },
    "data-testid": "hierarchical_track_selector"
  }, /*#__PURE__*/React.createElement("div", {
    style: {
      display: 'flex'
    }
  }, /*#__PURE__*/React.createElement(IconButton, {
    className: classes.menuIcon,
    onClick: function onClick(event) {
      setMenuAnchorEl(event.currentTarget);
    }
  }, /*#__PURE__*/React.createElement(MenuIcon, null)), /*#__PURE__*/React.createElement(IconButton, {
    className: classes.menuIcon,
    onClick: function onClick(event) {
      setConnectionAnchorEl(event.currentTarget);
    }
  }, /*#__PURE__*/React.createElement(PowerOutlinedIcon, null)), /*#__PURE__*/React.createElement(TextField$1, {
    className: classes.searchBox,
    label: "Filter tracks",
    value: model.filterText,
    onChange: function onChange(event) {
      return model.setFilterText(event.target.value);
    },
    fullWidth: true,
    InputProps: {
      endAdornment: /*#__PURE__*/React.createElement(InputAdornment, {
        position: "end"
      }, /*#__PURE__*/React.createElement(IconButton, {
        color: "secondary",
        onClick: model.clearFilterText
      }, /*#__PURE__*/React.createElement(ClearIcon, null)))
    }
  })), /*#__PURE__*/React.createElement(JBrowseMenu, {
    anchorEl: connectionAnchorEl,
    open: Boolean(connectionAnchorEl),
    onMenuItemClick: function onMenuItemClick(_, callback) {
      callback();
      setConnectionAnchorEl(undefined);
    },
    onClose: function onClose() {
      setConnectionAnchorEl(undefined);
    },
    menuItems: [{
      label: 'Add connection',
      onClick: function onClick() {
        session.showWidget(session.addWidget('AddConnectionWidget', 'addConnectionWidget'));
      }
    }].concat(connectionMenuItems)
  }), /*#__PURE__*/React.createElement(JBrowseMenu, {
    anchorEl: menuAnchorEl,
    open: Boolean(menuAnchorEl),
    onMenuItemClick: function onMenuItemClick(_, callback) {
      callback();
      setMenuAnchorEl(undefined);
    },
    onClose: function onClose() {
      setMenuAnchorEl(undefined);
    },
    menuItems: menuItems
  }), /*#__PURE__*/React.createElement(Suspense, {
    fallback: /*#__PURE__*/React.createElement("div", null)
  }, modalInfo ? /*#__PURE__*/React.createElement(CloseConnectionDialog, {
    modalInfo: modalInfo,
    setModalInfo: setModalInfo,
    session: session
  }) : deleteDialogDetails ? /*#__PURE__*/React.createElement(DeleteConnectionDialog, {
    handleClose: function handleClose() {
      setDeleteDialogDetails(undefined);
    },
    deleteDialogDetails: deleteDialogDetails,
    session: session
  }) : null, connectionManagerOpen ? /*#__PURE__*/React.createElement(ManageConnectionsDialog, {
    handleClose: function handleClose() {
      return setConnectionManagerOpen(false);
    },
    breakConnection: breakConnection,
    session: session
  }) : null, connectionToggleOpen ? /*#__PURE__*/React.createElement(ToggleConnectionsDialog, {
    handleClose: function handleClose() {
      return setConnectionToggleOpen(false);
    },
    session: session,
    breakConnection: breakConnection,
    assemblyName: assemblyName
  }) : null));
});
var HierarchicalTrackSelector = /*#__PURE__*/observer(function (_ref8) {
  var model = _ref8.model,
      _ref8$toolbarHeight = _ref8.toolbarHeight,
      toolbarHeight = _ref8$toolbarHeight === void 0 ? 0 : _ref8$toolbarHeight;

  var _useState17 = useState(0),
      _useState18 = _slicedToArray(_useState17, 2),
      assemblyIdx = _useState18[0],
      setAssemblyIdx = _useState18[1];

  var _useState19 = useState(0),
      _useState20 = _slicedToArray(_useState19, 2),
      headerHeight = _useState20[0],
      setHeaderHeight = _useState20[1];

  var assemblyNames = model.assemblyNames;
  var assemblyName = assemblyNames[assemblyIdx];

  if (!assemblyName) {
    return null;
  }

  var nodes = model.hierarchy(assemblyNames[assemblyIdx]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(HierarchicalTrackSelectorHeader, {
    model: model,
    setHeaderHeight: setHeaderHeight,
    setAssemblyIdx: setAssemblyIdx,
    assemblyIdx: assemblyIdx
  }), /*#__PURE__*/React.createElement(AutoSizedHierarchicalTree, {
    tree: nodes,
    model: model,
    offset: toolbarHeight + headerHeight
  }));
});

var HierarchicalTrackSelector$1 = {
  __proto__: null,
  'default': HierarchicalTrackSelectorContainer
};

var useStyles$9 = /*#__PURE__*/makeStyles(function (theme) {
  return {
    spacing: {
      marginBottom: theme.spacing(3)
    }
  };
});

function StatusMessage(_ref) {
  var _trackAdapter$subadap;

  var trackAdapter = _ref.trackAdapter,
      trackType = _ref.trackType;
  var classes = useStyles$9();
  return trackAdapter.type === 'SNPCoverageAdapter' ? /*#__PURE__*/React.createElement(Typography$1, {
    className: classes.spacing
  }, "Selected ", /*#__PURE__*/React.createElement("code", null, trackType), ". Using adapter", ' ', /*#__PURE__*/React.createElement("code", null, trackAdapter.type), " with subadapter", ' ', /*#__PURE__*/React.createElement("code", null, (_trackAdapter$subadap = trackAdapter.subadapter) === null || _trackAdapter$subadap === void 0 ? void 0 : _trackAdapter$subadap.type), ". Please enter a track name and, if necessary, update the track type.") : /*#__PURE__*/React.createElement(Typography$1, {
    className: classes.spacing
  }, "Using adapter ", /*#__PURE__*/React.createElement("code", null, trackAdapter.type), " and guessing track type", ' ', /*#__PURE__*/React.createElement("code", null, trackType), ". Please enter a track name and, if necessary, update the track type.");
}

function UnknownAdapterPrompt(_ref2) {
  var model = _ref2.model;
  var classes = useStyles$9();
  var session = getSession(model);
  var adapterHint = model.adapterHint;
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Typography$1, {
    className: classes.spacing
  }, "Was not able to guess the adapter type for this data, but it may be in the list below. If not, you can", ' ', /*#__PURE__*/React.createElement(Link$1, {
    href: "https://github.com/GMOD/jbrowse-components/releases",
    target: "_blank",
    rel: "noopener noreferrer"
  }, "check for new releases"), ' ', "of JBrowse to see if they support this data type or", ' ', /*#__PURE__*/React.createElement(Link$1, {
    href: "https://github.com/GMOD/jbrowse-components/issues/new",
    target: "_blank",
    rel: "noopener noreferrer"
  }, "file an issue"), ' ', "and add a feature request for this data type."), /*#__PURE__*/React.createElement(TextField, {
    className: classes.spacing,
    value: adapterHint,
    label: "adapterType",
    helperText: "An adapter type",
    select: true,
    fullWidth: true,
    onChange: function onChange(event) {
      model.setAdapterHint(event.target.value);
    },
    SelectProps: {
      // @ts-ignore
      SelectDisplayProps: {
        'data-testid': 'adapterTypeSelect'
      }
    }
  }, getEnv(session).pluginManager.getElementTypesInGroup('adapter') // Exclude SNPCoverageAdapter from primary adapter user selection
  .filter(function (elt) {
    return elt.name !== 'SNPCoverageAdapter';
  }).map(function (elt) {
    return /*#__PURE__*/React.createElement(MenuItem$1, {
      key: elt.name,
      value: elt.name
    }, elt.name);
  })));
}

function ConfirmTrack(_ref3) {
  var model = _ref3.model;
  var classes = useStyles$9();
  var session = getSession(model);
  var trackName = model.trackName,
      trackAdapter = model.trackAdapter,
      trackType = model.trackType,
      assembly = model.assembly,
      warningMessage = model.warningMessage;

  if (model.unsupported) {
    return /*#__PURE__*/React.createElement(Typography$1, {
      className: classes.spacing
    }, "This version of JBrowse cannot display data of this type. It is possible, however, that there is a newer version that can display them. You can", ' ', /*#__PURE__*/React.createElement(Link$1, {
      href: "https://github.com/GMOD/jbrowse-components/releases",
      target: "_blank",
      rel: "noopener noreferrer"
    }, "check for new releases"), ' ', "of JBrowse or", ' ', /*#__PURE__*/React.createElement(Link$1, {
      href: "https://github.com/GMOD/jbrowse-components/issues/new",
      target: "_blank",
      rel: "noopener noreferrer"
    }, "file an issue"), ' ', "and add a feature request for this data type.");
  }

  if ((trackAdapter === null || trackAdapter === void 0 ? void 0 : trackAdapter.type) === UNKNOWN) {
    return /*#__PURE__*/React.createElement(UnknownAdapterPrompt, {
      model: model
    });
  }

  if (!(trackAdapter !== null && trackAdapter !== void 0 && trackAdapter.type)) {
    return /*#__PURE__*/React.createElement(Typography$1, null, "Could not recognize this data type.");
  }

  return /*#__PURE__*/React.createElement(React.Fragment, null, trackAdapter ? /*#__PURE__*/React.createElement(StatusMessage, {
    trackAdapter: trackAdapter,
    trackType: trackType
  }) : null, warningMessage ? /*#__PURE__*/React.createElement(Typography$1, {
    style: {
      color: 'orange'
    }
  }, warningMessage) : null, /*#__PURE__*/React.createElement(TextField, {
    className: classes.spacing,
    label: "trackName",
    helperText: "A name for this track",
    fullWidth: true,
    value: trackName,
    onChange: function onChange(event) {
      return model.setTrackName(event.target.value);
    },
    inputProps: {
      'data-testid': 'trackNameInput'
    }
  }), /*#__PURE__*/React.createElement(TextField, {
    className: classes.spacing,
    value: trackType,
    label: "trackType",
    helperText: "A track type",
    select: true,
    fullWidth: true,
    onChange: function onChange(event) {
      model.setTrackType(event.target.value);
    },
    SelectProps: {
      // @ts-ignore
      SelectDisplayProps: {
        'data-testid': 'trackTypeSelect'
      }
    }
  }, getEnv(session).pluginManager.getElementTypesInGroup('track') // eslint-disable-next-line @typescript-eslint/no-explicit-any
  .map(function (_ref4) {
    var name = _ref4.name;
    return /*#__PURE__*/React.createElement(MenuItem$1, {
      key: name,
      value: name
    }, name);
  })), /*#__PURE__*/React.createElement(TextField, {
    value: assembly,
    label: "assemblyName",
    helperText: "Assembly to which the track will be added",
    select: true,
    fullWidth: true,
    onChange: function onChange(event) {
      model.setAssembly(event.target.value);
    },
    SelectProps: {
      // @ts-ignore
      SelectDisplayProps: {
        'data-testid': 'assemblyNameSelect'
      }
    }
  }, session.assemblies.map(function (assemblyConf) {
    var assemblyName = readConfObject(assemblyConf, 'name');
    return /*#__PURE__*/React.createElement(MenuItem$1, {
      key: assemblyName,
      value: assemblyName
    }, assemblyName);
  })));
}

var ConfirmTrack$1 = /*#__PURE__*/observer(ConfirmTrack);

var useStyles$a = /*#__PURE__*/makeStyles(function (theme) {
  return {
    root: {
      display: 'flex',
      flexDirection: 'column'
    },
    paper: {
      padding: theme.spacing(1)
    }
  };
});

function TrackSourceSelect(_ref) {
  var model = _ref.model;
  var classes = useStyles$a();
  return /*#__PURE__*/React.createElement("div", {
    className: classes.root
  }, /*#__PURE__*/React.createElement(Paper, {
    className: classes.paper
  }, /*#__PURE__*/React.createElement(FileSelector$1, {
    name: "Main file",
    description: "",
    location: model.trackData,
    setLocation: model.setTrackData
  }), /*#__PURE__*/React.createElement(FileSelector$1, {
    name: "Index file",
    description: "Automatically inferred from the URL if not supplied",
    location: model.indexTrackData,
    setLocation: model.setIndexTrackData
  })));
}

var useStyles$b = /*#__PURE__*/makeStyles$1(function (theme) {
  return {
    root: {
      marginTop: theme.spacing(1)
    },
    stepper: {
      backgroundColor: theme.palette.background["default"]
    },
    button: {
      marginTop: theme.spacing(1),
      marginRight: theme.spacing(1)
    },
    actionsContainer: {
      marginBottom: theme.spacing(2)
    },
    stepContent: {
      margin: theme.spacing(1)
    }
  };
});
var steps = ['Enter track data', 'Confirm track type'];

function AddTrackWidget(_ref) {
  var model = _ref.model;

  var _useState = useState(0),
      _useState2 = _slicedToArray(_useState, 2),
      activeStep = _useState2[0],
      setActiveStep = _useState2[1];

  var classes = useStyles$b();
  var session = getSession(model);
  var assembly = model.assembly,
      trackAdapter = model.trackAdapter,
      trackData = model.trackData,
      trackName = model.trackName,
      trackType = model.trackType;

  function getStepContent(step) {
    switch (step) {
      case 0:
        return /*#__PURE__*/React.createElement(TrackSourceSelect, {
          model: model
        });

      case 1:
        return /*#__PURE__*/React.createElement(ConfirmTrack$1, {
          model: model
        });

      default:
        return /*#__PURE__*/React.createElement(Typography, null, "Unknown step");
    }
  }

  function handleNext() {
    if (activeStep !== steps.length - 1) {
      setActiveStep(activeStep + 1);
      return;
    }

    var trackId = "".concat(trackName.toLowerCase().replace(/ /g, '_'), "-").concat(Date.now()).concat(session.adminMode ? '' : '-sessionTrack');
    var assemblyInstance = session.assemblyManager.get(assembly); // @ts-ignore

    session.addTrackConf({
      trackId: trackId,
      type: trackType,
      name: trackName,
      assemblyNames: [assembly],
      adapter: _objectSpread2(_objectSpread2({}, trackAdapter), {}, {
        sequenceAdapter: getConf(assemblyInstance, ['sequence', 'adapter'])
      })
    });

    if (model.view) {
      model.view.showTrack(trackId);
    } else {
      session.notify('Open a new view, or use the track selector in an existing view, to view this track', 'info');
    }

    model.clearData(); // @ts-ignore

    session.hideWidget(model);
  }

  function handleBack() {
    setActiveStep(activeStep - 1);
  }

  function isNextDisabled() {
    switch (activeStep) {
      case 0:
        return !trackData;

      case 1:
        return !(trackName && trackType && trackAdapter !== null && trackAdapter !== void 0 && trackAdapter.type && assembly);

      default:
        return true;
    }
  }

  return /*#__PURE__*/React.createElement("div", {
    className: classes.root
  }, /*#__PURE__*/React.createElement(Stepper, {
    className: classes.stepper,
    activeStep: activeStep,
    orientation: "vertical"
  }, steps.map(function (label, idx) {
    return /*#__PURE__*/React.createElement(Step, {
      key: label
    }, /*#__PURE__*/React.createElement(StepLabel, null, label), /*#__PURE__*/React.createElement(StepContent, null, getStepContent(idx), /*#__PURE__*/React.createElement("div", {
      className: classes.actionsContainer
    }, /*#__PURE__*/React.createElement(Button, {
      disabled: activeStep === 0,
      onClick: handleBack,
      className: classes.button
    }, "Back"), /*#__PURE__*/React.createElement(Button, {
      disabled: isNextDisabled(),
      variant: "contained",
      color: "primary",
      onClick: handleNext,
      className: classes.button,
      "data-testid": "addTrackNextButton"
    }, activeStep === steps.length - 1 ? 'Add' : 'Next'))));
  })));
}

var AddTrackWidget$1 = /*#__PURE__*/observer(AddTrackWidget);

var AddTrackWidget$2 = {
  __proto__: null,
  'default': AddTrackWidget$1
};

var ConfigureConnection = /*#__PURE__*/observer(function (props) {
  var connectionType = props.connectionType,
      model = props.model,
      setModelReady = props.setModelReady;
  var ConfigEditorComponent = connectionType.configEditorComponent || ConfigurationEditor;
  return /*#__PURE__*/React.createElement(Suspense, {
    fallback: /*#__PURE__*/React.createElement("div", null, "Loading...")
  }, /*#__PURE__*/React.createElement(ConfigEditorComponent, {
    model: {
      target: model
    },
    setModelReady: setModelReady
  }));
});

function ConnectionTypeSelect(props) {
  var connectionTypeChoices = props.connectionTypeChoices,
      connectionType = props.connectionType,
      setConnectionType = props.setConnectionType;
  useEffect(function () {
    if (!connectionType.name) {
      setConnectionType(connectionTypeChoices[0]);
    }
  });

  function handleChange(event) {
    setConnectionType(connectionTypeChoices.find(function (connectionTypeChoice) {
      return connectionTypeChoice.name === event.target.value;
    }));
  }

  if (!connectionType.name) {
    return null;
  }

  return /*#__PURE__*/React.createElement("form", {
    autoComplete: "off"
  }, /*#__PURE__*/React.createElement(TextField, {
    value: connectionType.name,
    label: "connectionType",
    helperText: connectionType.description ? /*#__PURE__*/React.createElement(React.Fragment, null, connectionType.description, connectionType.url ? /*#__PURE__*/React.createElement(IconButton$1, {
      href: connectionType.url,
      rel: "noopener noreferrer",
      target: "_blank",
      color: "secondary"
    }, /*#__PURE__*/React.createElement(OpenInNewIcon, null)) : null) : null,
    select: true,
    fullWidth: true,
    onChange: handleChange,
    variant: "outlined"
  }, connectionTypeChoices.map(function (connectionTypeChoice) {
    return /*#__PURE__*/React.createElement(MenuItem$1, {
      key: connectionTypeChoice.name,
      value: connectionTypeChoice.name
    }, connectionTypeChoice.displayName || connectionTypeChoice.name);
  })));
}

var useStyles$c = /*#__PURE__*/makeStyles(function (theme) {
  return {
    root: {
      marginTop: theme.spacing(1)
    },
    stepper: {
      backgroundColor: theme.palette.background["default"]
    },
    button: {
      marginTop: theme.spacing(1),
      marginRight: theme.spacing(1)
    },
    actionsContainer: {
      marginBottom: theme.spacing(2)
    }
  };
});
var steps$1 = ['Select a Connection Type', 'Configure Connection'];

function AddConnectionWidget(_ref) {
  var model = _ref.model;

  var _useState = useState({}),
      _useState2 = _slicedToArray(_useState, 2),
      connectionType = _useState2[0],
      setConnectionType = _useState2[1];

  var _useState3 = useState({}),
      _useState4 = _slicedToArray(_useState3, 2),
      configModel = _useState4[0],
      setConfigModel = _useState4[1];

  var _useState5 = useState(true),
      _useState6 = _slicedToArray(_useState5, 2),
      configModelReady = _useState6[0],
      setConfigModelReady = _useState6[1];

  var _useState7 = useState(0),
      _useState8 = _slicedToArray(_useState7, 2),
      activeStep = _useState8[0],
      setActiveStep = _useState8[1];

  var classes = useStyles$c();
  var session = getSession(model);

  var _getEnv = getEnv(session),
      pluginManager = _getEnv.pluginManager;

  function handleSetConnectionType(newConnectionType) {
    setConnectionType(newConnectionType);
    setConfigModel(newConnectionType.configSchema.create({
      connectionId: "".concat(newConnectionType.name, "-").concat(Date.now())
    }, getEnv(model)));
  }

  function stepContent() {
    switch (activeStep) {
      case 0:
        return /*#__PURE__*/React.createElement(ConnectionTypeSelect, {
          connectionTypeChoices: pluginManager.getElementTypesInGroup('connection'),
          connectionType: connectionType,
          setConnectionType: handleSetConnectionType
        });

      case 1:
        return /*#__PURE__*/React.createElement(ConfigureConnection, {
          connectionType: connectionType,
          model: configModel,
          setModelReady: setConfigModelReady
        });

      default:
        return /*#__PURE__*/React.createElement(Typography$1, null, "Unknown step");
    }
  }

  function handleNext() {
    if (activeStep === steps$1.length - 1) {
      handleFinish();
    } else {
      setActiveStep(activeStep + 1);
    }
  }

  function handleBack() {
    setActiveStep(activeStep - 1);
  }

  function handleFinish() {
    var connectionConf = session.addConnectionConf(configModel);
    session.makeConnection(connectionConf);
    session.hideWidget(model);
  }

  function checkNextEnabled() {
    if (activeStep === 0 && connectionType.name || activeStep === 1 && configModel && configModelReady) {
      return true;
    }

    return false;
  }

  return /*#__PURE__*/React.createElement("div", {
    className: classes.root
  }, /*#__PURE__*/React.createElement(Stepper$1, {
    className: classes.stepper,
    activeStep: activeStep,
    orientation: "vertical"
  }, steps$1.map(function (label) {
    return /*#__PURE__*/React.createElement(Step$1, {
      key: label
    }, /*#__PURE__*/React.createElement(StepLabel$1, null, label), /*#__PURE__*/React.createElement(StepContent$1, null, stepContent(), /*#__PURE__*/React.createElement("div", {
      className: classes.actionsContainer
    }, /*#__PURE__*/React.createElement(Button$1, {
      disabled: activeStep === 0,
      onClick: handleBack,
      className: classes.button
    }, "Back"), /*#__PURE__*/React.createElement(Button$1, {
      disabled: !checkNextEnabled(),
      variant: "contained",
      color: "primary",
      onClick: handleNext,
      className: classes.button,
      "data-testid": "addConnectionNext"
    }, activeStep === steps$1.length - 1 ? 'Connect' : 'Next'))));
  })));
}

AddConnectionWidget.propTypes = {
  model: PropTypes.observableObject.isRequired
};
var AddConnectionWidget$1 = /*#__PURE__*/observer(AddConnectionWidget);

var AddConnectionWidget$2 = {
  __proto__: null,
  'default': AddConnectionWidget$1
};

function CloseConnectionDialog$1(_ref) {
  var _ref$modalInfo = _ref.modalInfo,
      modalInfo = _ref$modalInfo === void 0 ? {} : _ref$modalInfo,
      setModalInfo = _ref.setModalInfo;
  var name = modalInfo.name,
      dereferenceTypeCount = modalInfo.dereferenceTypeCount,
      safelyBreakConnection = modalInfo.safelyBreakConnection;
  return /*#__PURE__*/React.createElement(Dialog, {
    open: true
  }, /*#__PURE__*/React.createElement(DialogTitle, null, "Close connection \"", name, "\""), /*#__PURE__*/React.createElement(DialogContent, null, dereferenceTypeCount ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DialogContentText, null, "Closing this connection will close:"), /*#__PURE__*/React.createElement(List, null, Object.entries(dereferenceTypeCount).map(function (_ref2) {
    var _ref3 = _slicedToArray(_ref2, 2),
        key = _ref3[0],
        value = _ref3[1];

    return /*#__PURE__*/React.createElement(ListItem, {
      key: key
    }, "".concat(value, " ").concat(key));
  }))) : null, /*#__PURE__*/React.createElement(DialogContentText, null, "Are you sure you want to close this connection?")), /*#__PURE__*/React.createElement(DialogActions, null, /*#__PURE__*/React.createElement(Button, {
    onClick: function onClick() {
      setModalInfo();
    },
    color: "primary"
  }, "Cancel"), /*#__PURE__*/React.createElement(Button, {
    variant: "contained",
    onClick: modalInfo ? function () {
      if (safelyBreakConnection) {
        safelyBreakConnection();
      }

      setModalInfo();
    } : function () {},
    color: "primary"
  }, "OK")));
}

var CloseConnectionDialog$2 = /*#__PURE__*/observer(CloseConnectionDialog$1);

var CloseConnectionDialog$3 = {
  __proto__: null,
  'default': CloseConnectionDialog$2
};

function DeleteConnectionDialog$1(_ref) {
  var deleteDialogDetails = _ref.deleteDialogDetails,
      session = _ref.session,
      handleClose = _ref.handleClose;
  var connectionConf = deleteDialogDetails.connectionConf,
      name = deleteDialogDetails.name;
  return /*#__PURE__*/React.createElement(Dialog, {
    open: true
  }, /*#__PURE__*/React.createElement(DialogTitle, null, "Delete connection \"", name, "\""), /*#__PURE__*/React.createElement(DialogContent, null, /*#__PURE__*/React.createElement(DialogContentText, null, "Are you sure you want to delete this connection?")), /*#__PURE__*/React.createElement(DialogActions, null, /*#__PURE__*/React.createElement(Button, {
    onClick: function onClick() {
      return handleClose();
    },
    color: "primary"
  }, "Cancel"), /*#__PURE__*/React.createElement(Button, {
    variant: "contained",
    color: "primary",
    onClick: function onClick() {
      if (connectionConf) {
        var _session$deleteConnec;

        (_session$deleteConnec = session.deleteConnection) === null || _session$deleteConnec === void 0 ? void 0 : _session$deleteConnec.call(session, connectionConf);
      }

      handleClose();
    }
  }, "OK")));
}

var DeleteConnectionDialog$2 = /*#__PURE__*/observer(DeleteConnectionDialog$1);

var DeleteConnectionDialog$3 = {
  __proto__: null,
  'default': DeleteConnectionDialog$2
};

var useStyles$d = /*#__PURE__*/makeStyles$1(function (theme) {
  return {
    closeButton: {
      position: 'absolute',
      right: theme.spacing(1),
      top: theme.spacing(1),
      color: theme.palette.grey[500]
    },
    connectionContainer: {
      margin: theme.spacing(4),
      width: 500
    }
  };
});

function ManageConnectionsDlg(_ref) {
  var session = _ref.session,
      handleClose = _ref.handleClose,
      breakConnection = _ref.breakConnection;
  var classes = useStyles$d();
  var adminMode = session.adminMode,
      connections = session.connections,
      sessionConnections = session.sessionConnections;
  return /*#__PURE__*/React.createElement(Dialog, {
    open: true,
    onClose: handleClose,
    maxWidth: "lg"
  }, /*#__PURE__*/React.createElement(DialogTitle, null, "Delete connections", /*#__PURE__*/React.createElement(IconButton, {
    className: classes.closeButton,
    onClick: function onClick() {
      return handleClose();
    }
  }, /*#__PURE__*/React.createElement(CloseIcon, null))), /*#__PURE__*/React.createElement(DialogContent, null, /*#__PURE__*/React.createElement(Typography, null, "Click the X icon to delete the connection from your config completely"), /*#__PURE__*/React.createElement("div", {
    className: classes.connectionContainer
  }, connections.map(function (conf) {
    var name = readConfObject(conf, 'name');
    return /*#__PURE__*/React.createElement("div", {
      key: "conn-".concat(name)
    }, /*#__PURE__*/React.createElement(Typography, null, adminMode || sessionConnections !== null && sessionConnections !== void 0 && sessionConnections.includes(conf) ? /*#__PURE__*/React.createElement(IconButton, {
      onClick: function onClick() {
        return breakConnection(conf, true);
      }
    }, /*#__PURE__*/React.createElement(CloseIcon, {
      color: "error"
    })) : /*#__PURE__*/React.createElement(Tooltip, {
      title: "Unable to delete connection in config file as non-admin user"
    }, /*#__PURE__*/React.createElement(IconButton, null, /*#__PURE__*/React.createElement(CloseIcon, {
      color: "disabled"
    }))), name));
  }), !connections.length ? /*#__PURE__*/React.createElement(Typography, null, "No connections found") : null)), /*#__PURE__*/React.createElement(DialogActions, null, /*#__PURE__*/React.createElement(Button, {
    onClick: function onClick() {
      return handleClose();
    },
    variant: "contained",
    color: "primary"
  }, "Close")));
}

var ManageConnectionsDialog$1 = /*#__PURE__*/observer(ManageConnectionsDlg);

var ManageConnectionsDialog$2 = {
  __proto__: null,
  'default': ManageConnectionsDialog$1
};

var useStyles$e = /*#__PURE__*/makeStyles$1(function (theme) {
  return {
    closeButton: {
      position: 'absolute',
      right: theme.spacing(1),
      top: theme.spacing(1),
      color: theme.palette.grey[500]
    },
    connectionContainer: {
      width: 500,
      margin: theme.spacing(4)
    }
  };
});

function ToggleConnectionDialog(_ref) {
  var session = _ref.session,
      handleClose = _ref.handleClose,
      assemblyName = _ref.assemblyName,
      breakConnection = _ref.breakConnection;
  var classes = useStyles$e();
  var connections = session.connections,
      connectionInstances = session.connectionInstances;
  var assemblySpecificConnections = connections.filter(function (c) {
    var configAssemblyNames = readConfObject(c, 'assemblyNames');

    if (configAssemblyNames.length === 0) {
      return true;
    }

    return configAssemblyNames.includes(assemblyName);
  });
  return /*#__PURE__*/React.createElement(Dialog, {
    open: true,
    onClose: handleClose,
    maxWidth: "lg"
  }, /*#__PURE__*/React.createElement(DialogTitle, null, "Turn on/off connections", /*#__PURE__*/React.createElement(IconButton, {
    className: classes.closeButton,
    onClick: function onClick() {
      return handleClose();
    }
  }, /*#__PURE__*/React.createElement(CloseIcon, null))), /*#__PURE__*/React.createElement(DialogContent, null, /*#__PURE__*/React.createElement(Typography, null, "Use the checkbox to turn on/off connections"), /*#__PURE__*/React.createElement("div", {
    className: classes.connectionContainer
  }, assemblySpecificConnections.map(function (conf) {
    var name = readConfObject(conf, 'name');
    return /*#__PURE__*/React.createElement("div", {
      key: conf.connectionId
    }, /*#__PURE__*/React.createElement(FormControlLabel, {
      control: /*#__PURE__*/React.createElement(Checkbox, {
        checked: !!(connectionInstances !== null && connectionInstances !== void 0 && connectionInstances.find(function (conn) {
          return name === conn.name;
        })),
        onChange: function onChange() {
          if (connectionInstances !== null && connectionInstances !== void 0 && connectionInstances.find(function (conn) {
            return conn.name === readConfObject(conf, 'name');
          })) {
            breakConnection(conf);
          } else {
            var _session$makeConnecti;

            (_session$makeConnecti = session.makeConnection) === null || _session$makeConnecti === void 0 ? void 0 : _session$makeConnecti.call(session, conf);
          }
        },
        color: "primary"
      }),
      label: name
    }));
  }), !assemblySpecificConnections.length ? /*#__PURE__*/React.createElement(Typography, null, "No connections found for ", assemblyName) : null)), /*#__PURE__*/React.createElement(DialogActions, null, /*#__PURE__*/React.createElement(Button, {
    onClick: function onClick() {
      return handleClose();
    },
    variant: "contained",
    color: "primary"
  }, "Close")));
}

var ToggleConnectionsDialog$1 = /*#__PURE__*/observer(ToggleConnectionDialog);

var ToggleConnectionsDialog$2 = {
  __proto__: null,
  'default': ToggleConnectionsDialog$1
};

export default _default;
export { AssemblyManager, SetDefaultSession };
//# sourceMappingURL=plugin-data-management.esm.js.map
