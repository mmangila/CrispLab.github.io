export function generateHierarchy(model: any, trackConfigurations: any, collapsed: any): never[];
declare function _default(pluginManager: any): import("mobx-state-tree").IModelType<{
    id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    type: import("mobx-state-tree").ISimpleType<"HierarchicalTrackSelectorWidget">;
    collapsed: import("mobx-state-tree").IMapType<import("mobx-state-tree").ISimpleType<boolean>>;
    filterText: import("mobx-state-tree").IType<string | undefined, string, string>;
    view: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<any>>;
    collapsedCategories: import("mobx-state-tree").IMapType<import("mobx-state-tree").ISimpleType<string>>;
}, {
    setView(view: any): void;
    toggleCategory(pathName: any): void;
    clearFilterText(): void;
    setFilterText(newText: any): void;
} & {
    getRefSeqTrackConf(assemblyName: any): any;
    trackConfigurations(assemblyName: any): any[];
    readonly assemblyNames: any;
    connectionTrackConfigurations(assemblyName: any, connection: any): any;
    hierarchy(assemblyName: any): {
        name: string;
        id: string;
        children: ({
            id: any;
            name: any;
            children: never[];
            state: {
                expanded: boolean;
            };
        } | {
            name: string;
            id: string;
            children: any[];
        })[];
    };
    connectionHierarchy(assemblyName: any, connection: any): never[];
    allTracksInCategoryPath(path: any, connection: any, assemblyName: any): {};
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export default _default;
