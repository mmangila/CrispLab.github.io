import AdapterType from '@jbrowse/core/pluggableElementTypes/AdapterType';
import { createBaseTrackModel } from '@jbrowse/core/pluggableElementTypes/models';
import FeatureRendererType from '@jbrowse/core/pluggableElementTypes/renderers/FeatureRendererType';
import TrackType from '@jbrowse/core/pluggableElementTypes/TrackType';
import Plugin from '@jbrowse/core/Plugin';
import { BaseLinearDisplay, BaseLinearDisplayComponent } from '@jbrowse/plugin-linear-genome-view';
import { ConfigurationSchema, ConfigurationReference, readConfObject } from '@jbrowse/core/configuration';
import { contrastingTextColor } from '@jbrowse/core/util/color';
import { createJBrowseTheme } from '@jbrowse/core/ui';
import { observer } from 'mobx-react';
import React from 'react';
import { generateCodonTable, defaultCodonTable, complement, revcom, defaultStarts, defaultStops, bpSpanPx, getContainingView } from '@jbrowse/core/util';
import { types } from 'mobx-state-tree';
import { getParentRenderProps } from '@jbrowse/core/util/tracks';
import { BaseFeatureDataAdapter, BaseAdapter } from '@jbrowse/core/data_adapters/BaseAdapter';
import { ObservableCreate } from '@jbrowse/core/util/rxjs';
import SimpleFeature from '@jbrowse/core/util/simpleFeature';
import { toArray } from 'rxjs/operators';
import { openLocation } from '@jbrowse/core/util/io';
import { TwoBitFile } from '@gmod/twobit';
import { IndexedFasta, BgzipIndexedFasta } from '@gmod/indexedfasta';
import AbortablePromiseCache from 'abortable-promise-cache';
import LRU from '@jbrowse/core/util/QuickLRU';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _iterableToArrayLimit(arr, i) {
  var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]);

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

var bgzipFastaAdapterConfigSchema = /*#__PURE__*/ConfigurationSchema('BgzipFastaAdapter', {
  fastaLocation: {
    type: 'fileLocation',
    defaultValue: {
      uri: '/path/to/seq.fa.gz'
    }
  },
  faiLocation: {
    type: 'fileLocation',
    defaultValue: {
      uri: '/path/to/seq.fa.gz.fai'
    }
  },
  gziLocation: {
    type: 'fileLocation',
    defaultValue: {
      uri: '/path/to/seq.fa.gz.gzi'
    }
  }
}, {
  explicitlyTyped: true
});

var chromSizesAdapterConfigSchema = /*#__PURE__*/ConfigurationSchema('ChromSizesAdapter', {
  chromSizesLocation: {
    type: 'fileLocation',
    defaultValue: {
      uri: '/path/to/species.chrom.sizes'
    }
  }
}, {
  explicitlyTyped: true
});

function Translation(props) {
  var codonTable = props.codonTable,
      seq = props.seq,
      frame = props.frame,
      bpPerPx = props.bpPerPx,
      region = props.region,
      height = props.height,
      y = props.y,
      _props$reverse = props.reverse,
      reverse = _props$reverse === void 0 ? false : _props$reverse,
      theme = props.theme;
  var scale = bpPerPx; // the tilt variable normalizes the frame to where we are starting from,
  // which increases consistency across blocks

  var tilt = 3 - region.start % 3; // the effectiveFrame incorporates tilt and the frame to say what the
  // effective frame that is plotted. The +3 is for when frame is -2 and this
  // can otherwise result in effectiveFrame -1

  var effectiveFrame = (frame + tilt + 3) % 3;
  var seqSliced = seq.slice(effectiveFrame);
  var translated = [];

  for (var i = 0; i < seqSliced.length; i += 3) {
    var codon = seqSliced.slice(i, i + 3);
    var normalizedCodon = reverse ? revcom(codon) : codon;
    var aminoAcid = codonTable[normalizedCodon] || '';
    translated.push({
      letter: aminoAcid,
      codon: normalizedCodon.toUpperCase()
    });
  }

  var w = 1 / scale * 3;
  var drop = region.start === 0 ? 0 : w;
  var render = 1 / bpPerPx >= 12;
  var width = (region.end - region.start) / bpPerPx;
  var map = ['#d8d8d8', '#adadad', '#8f8f8f'].reverse();
  return React.createElement(React.Fragment, null, translated.map(function (element, index) {
    var x = region.reversed ? width - (w * (index + 1) + effectiveFrame / scale - drop) : w * index + effectiveFrame / scale - drop;
    var letter = element.letter,
        codon = element.codon;
    return React.createElement(React.Fragment, {
      key: "".concat(index, "-").concat(letter)
    }, React.createElement("rect", {
      x: x,
      y: y,
      width: render ? w : w + 0.7
      /* small fudge factor when zoomed out*/
      ,
      height: height,
      stroke: render ? '#555' : 'none',
      fill: defaultStarts.includes(codon) ? theme.palette.startCodon : defaultStops.includes(codon) ? theme.palette.stopCodon : map[Math.abs(frame)]
    }), render ? React.createElement("text", {
      x: x + w / 2,
      y: y + height / 2,
      dominantBaseline: "middle",
      textAnchor: "middle"
    }, letter) : null);
  }));
}

function DNA(props) {
  var bpPerPx = props.bpPerPx,
      region = props.region,
      feature = props.feature,
      theme = props.theme,
      height = props.height,
      seq = props.seq,
      y = props.y;
  var render = 1 / bpPerPx >= 12;

  var _bpSpanPx = bpSpanPx(feature.get('start'), feature.get('end'), region, bpPerPx),
      _bpSpanPx2 = _slicedToArray(_bpSpanPx, 2),
      leftPx = _bpSpanPx2[0],
      rightPx = _bpSpanPx2[1];

  var reverse = region.reversed;
  var len = feature.get('end') - feature.get('start');
  var w = Math.max((rightPx - leftPx) / len, 0.8);
  return React.createElement(React.Fragment, null, seq.split('').map(function (letter, index) {
    var color = theme.palette.bases[letter.toUpperCase()];
    var x = reverse ? rightPx - (index + 1) * w : leftPx + index * w;
    return React.createElement(React.Fragment, {
      key: index
    }, React.createElement("rect", {
      x: x,
      y: y,
      width: w,
      height: height,
      fill: color ? color.main : '#aaa',
      stroke: render ? '#555' : 'none'
    }), render ? React.createElement("text", {
      x: x + w / 2,
      y: y + height / 2,
      dominantBaseline: "middle",
      textAnchor: "middle",
      fill: color ? contrastingTextColor(color.main) : 'black'
    }, letter) : null);
  }));
}

var SequenceSVG = function SequenceSVG(_ref) {
  var regions = _ref.regions,
      configTheme = _ref.theme,
      _ref$features = _ref.features,
      features = _ref$features === void 0 ? new Map() : _ref$features,
      showReverse = _ref.showReverse,
      showForward = _ref.showForward,
      showTranslation = _ref.showTranslation,
      bpPerPx = _ref.bpPerPx;

  var _regions = _slicedToArray(regions, 1),
      region = _regions[0];

  var theme = createJBrowseTheme(configTheme);
  var codonTable = generateCodonTable(defaultCodonTable);
  var height = 20;

  var _ref2 = _toConsumableArray(features.values()),
      feature = _ref2[0];

  if (!feature) {
    return null;
  }

  var seq = feature.get('seq');

  if (!seq) {
    return null;
  } // incrementer for the y-position of the current sequence being rendered
  // (applies to both translation rows and dna rows)


  var currY = -20;
  return React.createElement(React.Fragment, null, showTranslation && (region.reversed ? showReverse : showForward) ? [2, 1, 0].map(function (index) {
    return React.createElement(Translation, {
      key: "translation-".concat(index),
      seq: seq,
      y: currY += 20,
      codonTable: codonTable,
      frame: index,
      bpPerPx: bpPerPx,
      region: region,
      theme: theme,
      height: height,
      reverse: region.reversed
    });
  }) : null, showForward ? React.createElement(DNA, {
    height: height,
    y: currY += 20,
    feature: feature,
    region: region,
    seq: region.reversed ? complement(seq) : seq,
    bpPerPx: bpPerPx,
    theme: theme
  }) : null, showReverse ? React.createElement(DNA, {
    height: height,
    y: currY += 20,
    feature: feature,
    region: region,
    seq: region.reversed ? seq : complement(seq),
    bpPerPx: bpPerPx,
    theme: theme
  }) : null, showTranslation && (region.reversed ? showForward : showReverse) ? [0, -1, -2].map(function (index) {
    return React.createElement(Translation, {
      key: "rev-translation-".concat(index),
      seq: seq,
      y: currY += 20,
      codonTable: codonTable,
      frame: index,
      bpPerPx: bpPerPx,
      region: region,
      theme: theme,
      height: height,
      reverse: !region.reversed
    });
  }) : null);
};

var Wrapper = function Wrapper(_ref3) {
  var exportSVG = _ref3.exportSVG,
      width = _ref3.width,
      totalHeight = _ref3.totalHeight,
      children = _ref3.children;
  return exportSVG ? React.createElement(React.Fragment, null, children) : React.createElement("svg", {
    width: width,
    height: totalHeight,
    style: {
      width: width,
      height: totalHeight
    }
  }, children);
};

function Sequence(props) {
  var regions = props.regions,
      bpPerPx = props.bpPerPx;

  var _regions2 = _slicedToArray(regions, 1),
      region = _regions2[0];

  var width = (region.end - region.start) / bpPerPx;
  var totalHeight = 200;
  return React.createElement(Wrapper, Object.assign({}, props, {
    totalHeight: totalHeight,
    width: width
  }), React.createElement(SequenceSVG, Object.assign({}, props)));
}

var DivSequenceRendererReactComponent = /*#__PURE__*/observer(Sequence);

var divSequenceRendererConfigSchema = /*#__PURE__*/ConfigurationSchema('DivSequenceRenderer', {
  height: {
    type: 'number',
    description: 'height in pixels of each line of sequence',
    defaultValue: 16
  }
}, {
  explicitlyTyped: true
});

var indexedFastaAdapterConfigSchema = /*#__PURE__*/ConfigurationSchema('IndexedFastaAdapter', {
  fastaLocation: {
    type: 'fileLocation',
    defaultValue: {
      uri: '/path/to/seq.fa'
    }
  },
  faiLocation: {
    type: 'fileLocation',
    defaultValue: {
      uri: '/path/to/seq.fa.fai'
    }
  }
}, {
  explicitlyTyped: true
});

var configSchema = /*#__PURE__*/ConfigurationSchema('LinearReferenceSequenceDisplay', {
  renderer: divSequenceRendererConfigSchema
}, {
  explicitIdentifier: 'displayId',
  explicitlyTyped: true
});

function modelFactory(configSchema) {
  return types.compose('LinearReferenceSequenceDisplay', BaseLinearDisplay, types.model({
    type: types.literal('LinearReferenceSequenceDisplay'),
    configuration: ConfigurationReference(configSchema),
    showForward: types.optional(types["boolean"], true),
    showReverse: types.optional(types["boolean"], true),
    showTranslation: types.optional(types["boolean"], true),
    height: 180
  })).views(function (self) {
    return {
      get renderProps() {
        var showForward = self.showForward,
            showReverse = self.showReverse,
            showTranslation = self.showTranslation;
        return _objectSpread2(_objectSpread2(_objectSpread2({}, self.composedRenderProps), getParentRenderProps(self)), {}, {
          rpcDriverName: self.rpcDriverName,
          config: self.configuration.renderer,
          showForward: showForward,
          showReverse: showReverse,
          showTranslation: showTranslation
        });
      },

      regionCannotBeRendered: function regionCannotBeRendered()
      /* region */
      {
        var view = getContainingView(self);

        if (view && view.bpPerPx >= 1) {
          return 'Zoom in to see sequence';
        }

        return undefined;
      },

      get rendererTypeName() {
        return self.configuration.renderer.type;
      }

    };
  }).actions(function (self) {
    return {
      toggleShowForward: function toggleShowForward() {
        self.showForward = !self.showForward;
      },
      toggleShowReverse: function toggleShowReverse() {
        self.showReverse = !self.showReverse;
      },
      toggleShowTranslation: function toggleShowTranslation() {
        self.showTranslation = !self.showTranslation;
      }
    };
  }).views(function (self) {
    return {
      get trackMenuItems() {
        return [{
          label: 'Show forward',
          type: 'checkbox',
          checked: self.showForward,
          onClick: function onClick() {
            self.toggleShowForward();
          }
        }, {
          label: 'Show reverse',
          type: 'checkbox',
          checked: self.showReverse,
          onClick: function onClick() {
            self.toggleShowReverse();
          }
        }, {
          label: 'Show translation',
          type: 'checkbox',
          checked: self.showTranslation,
          onClick: function onClick() {
            self.toggleShowTranslation();
          }
        }];
      }

    };
  });
}

var twoBitAdapterConfigSchema = /*#__PURE__*/ConfigurationSchema('TwoBitAdapter', {
  twoBitLocation: {
    type: 'fileLocation',
    defaultValue: {
      uri: '/path/to/my.2bit'
    }
  }
}, {
  explicitlyTyped: true
});

var configSchemaF = (function (pluginManager) {
  return ConfigurationSchema('GCContentAdapter', {
    sequenceAdapter: pluginManager.pluggableConfigSchemaType('adapter')
  }, {
    explicitlyTyped: true
  });
});

var GCContentAdapterF = (function (pluginManager) {
  return {
    configSchema: pluginManager.load(configSchemaF),
    getAdapterClass: function getAdapterClass() {
      return Promise.resolve().then(function () { return GCContentAdapter; }).then(function (r) {
        return r["default"];
      });
    }
  };
});

/*
Note: this is primarily a copy of createBaseTrackConfig, except with a subset
of the config slots, to avoid including fields that don't make sense for the
ReferenceSequenceTrack
*/

function createReferenceSeqTrackConfig(pluginManager) {
  return ConfigurationSchema('ReferenceSequenceTrack', {
    adapter: pluginManager.pluggableConfigSchemaType('adapter'),
    displays: types.array(pluginManager.pluggableConfigSchemaType('display')),
    metadata: {
      type: 'frozen',
      description: 'anything to add about this track',
      defaultValue: {}
    }
  }, {
    preProcessSnapshot: function preProcessSnapshot(s) {
      var snap = JSON.parse(JSON.stringify(s));
      var displayTypes = new Set();
      var _snap$displays = snap.displays,
          displays = _snap$displays === void 0 ? [] : _snap$displays;

      if (snap.trackId !== 'placeholderId') {
        // Gets the displays on the track snapshot and the possible displays
        // from the track type and adds any missing possible displays to the
        // snapshot
        displays.forEach(function (d) {
          return d && displayTypes.add(d.type);
        });
        var trackType = pluginManager.getTrackType(snap.type);
        trackType.displayTypes.forEach(function (displayType) {
          if (!displayTypes.has(displayType.name)) {
            displays.push({
              displayId: "".concat(snap.trackId, "-").concat(displayType.name),
              type: displayType.name
            });
          }
        });
      }

      return _objectSpread2(_objectSpread2({}, snap), {}, {
        displays: displays
      });
    },
    explicitIdentifier: 'trackId',
    explicitlyTyped: true,
    actions: function actions(self) {
      return {
        addDisplayConf: function addDisplayConf(displayConf) {
          var type = displayConf.type;

          if (!type) {
            throw new Error("unknown display type ".concat(type));
          }

          var display = self.displays.find(function (d) {
            return d && d.displayId === displayConf.displayId;
          });

          if (display) {
            return display;
          }

          var length = self.displays.push(displayConf);
          return self.displays[length - 1];
        }
      };
    }
  });
}

/* adjust in both directions */

var DivSequenceRenderer = /*#__PURE__*/function (_FeatureRendererType) {
  _inherits(DivSequenceRenderer, _FeatureRendererType);

  var _super = /*#__PURE__*/_createSuper(DivSequenceRenderer);

  function DivSequenceRenderer() {
    var _this;

    _classCallCheck(this, DivSequenceRenderer);

    _this = _super.apply(this, arguments);
    _this.supportsSVG = true;
    return _this;
  }

  _createClass(DivSequenceRenderer, [{
    key: "getExpandedRegion",
    value: function getExpandedRegion(region) {
      return _objectSpread2(_objectSpread2({}, region), {}, {
        start: Math.max(region.start - 3, 0),
        end: region.end + 3
      });
    }
  }]);

  return DivSequenceRenderer;
}(FeatureRendererType);

var SequencePlugin = /*#__PURE__*/function (_Plugin) {
  _inherits(SequencePlugin, _Plugin);

  var _super2 = /*#__PURE__*/_createSuper(SequencePlugin);

  function SequencePlugin() {
    var _this2;

    _classCallCheck(this, SequencePlugin);

    _this2 = _super2.apply(this, arguments);
    _this2.name = 'SequencePlugin';
    return _this2;
  }

  _createClass(SequencePlugin, [{
    key: "install",
    value: function install(pluginManager) {
      pluginManager.addAdapterType(function () {
        return new AdapterType({
          name: 'TwoBitAdapter',
          configSchema: twoBitAdapterConfigSchema,
          getAdapterClass: function getAdapterClass() {
            return Promise.resolve().then(function () { return TwoBitAdapter$1; }).then(function (r) {
              return r["default"];
            });
          }
        });
      });
      pluginManager.addAdapterType(function () {
        return new AdapterType({
          name: 'ChromSizesAdapter',
          configSchema: chromSizesAdapterConfigSchema,
          getAdapterClass: function getAdapterClass() {
            return Promise.resolve().then(function () { return ChromSizesAdapter; }).then(function (r) {
              return r["default"];
            });
          }
        });
      });
      pluginManager.addAdapterType(function () {
        return new AdapterType({
          name: 'IndexedFastaAdapter',
          configSchema: indexedFastaAdapterConfigSchema,
          getAdapterClass: function getAdapterClass() {
            return Promise.resolve().then(function () { return IndexedFastaAdapter; }).then(function (r) {
              return r["default"];
            });
          }
        });
      });
      pluginManager.addAdapterType(function () {
        return new AdapterType({
          name: 'BgzipFastaAdapter',
          configSchema: bgzipFastaAdapterConfigSchema,
          getAdapterClass: function getAdapterClass() {
            return Promise.resolve().then(function () { return BgzipFastaAdapter; }).then(function (r) {
              return r["default"];
            });
          }
        });
      });
      pluginManager.addAdapterType(function () {
        return new AdapterType(_objectSpread2({
          name: 'GCContentAdapter'
        }, pluginManager.load(GCContentAdapterF)));
      });
      pluginManager.addTrackType(function () {
        var configSchema = createReferenceSeqTrackConfig(pluginManager);
        return new TrackType({
          name: 'ReferenceSequenceTrack',
          configSchema: configSchema,
          stateModel: createBaseTrackModel(pluginManager, 'ReferenceSequenceTrack', configSchema)
        });
      });
      pluginManager.addDisplayType(function () {
        var stateModel = modelFactory(configSchema);
        return {
          name: 'LinearReferenceSequenceDisplay',
          configSchema: configSchema,
          stateModel: stateModel,
          trackType: 'ReferenceSequenceTrack',
          viewType: 'LinearGenomeView',
          ReactComponent: BaseLinearDisplayComponent
        };
      });
      pluginManager.addRendererType(function () {
        return new DivSequenceRenderer({
          name: 'DivSequenceRenderer',
          ReactComponent: DivSequenceRendererReactComponent,
          configSchema: divSequenceRendererConfigSchema,
          pluginManager: pluginManager
        });
      });
    }
  }]);

  return SequencePlugin;
}(Plugin);

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime_1 = /*#__PURE__*/createCommonjsModule(function (module) {
  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  var runtime = function (exports) {

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined$1; // More compressible than void 0.

    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    function define(obj, key, value) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
      return obj[key];
    }

    try {
      // IE 8 has a broken Object.defineProperty that only works on DOM objects.
      define({}, "");
    } catch (err) {
      define = function define(obj, key, value) {
        return obj[key] = value;
      };
    }

    function wrap(innerFn, outerFn, self, tryLocsList) {
      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
      // .throw, and .return methods.

      generator._invoke = makeInvokeMethod(innerFn, self, context);
      return generator;
    }

    exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.

    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.

    var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.

    function Generator() {}

    function GeneratorFunction() {}

    function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.


    var IteratorPrototype = {};

    IteratorPrototype[iteratorSymbol] = function () {
      return this;
    };

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      // This environment has a native %IteratorPrototype%; use it instead
      // of the polyfill.
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.

    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        define(prototype, method, function (arg) {
          return this._invoke(method, arg);
        });
      });
    }

    exports.isGeneratorFunction = function (genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
      // do is to check its .name property.
      (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };

    exports.mark = function (genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
        define(genFun, toStringTagSymbol, "GeneratorFunction");
      }

      genFun.prototype = Object.create(Gp);
      return genFun;
    }; // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.


    exports.awrap = function (arg) {
      return {
        __await: arg
      };
    };

    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);

        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;

          if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
            return PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return PromiseImpl.resolve(value).then(function (unwrapped) {
            // When a yielded Promise is resolved, its final value becomes
            // the .value of the Promise<{value,done}> result for the
            // current iteration.
            result.value = unwrapped;
            resolve(result);
          }, function (error) {
            // If a rejected Promise was yielded, throw the rejection back
            // into the async generator function so it can be handled there.
            return invoke("throw", error, resolve, reject);
          });
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise = // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
        // invocations of the iterator.
        callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      } // Define the unified helper method that is used to implement .next,
      // .throw, and .return (see defineIteratorMethods).


      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);

    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
      return this;
    };

    exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.

    exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      if (PromiseImpl === void 0) PromiseImpl = Promise;
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
      return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;
      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          } // Be forgiving, per 25.3.3.3.3 of the spec:
          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            // Setting context._sent for legacy support of Babel's
            // function.sent implementation.
            context.sent = context._sent = context.arg;
          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);
          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;
          var record = tryCatch(innerFn, self, context);

          if (record.type === "normal") {
            // If an exception is thrown from innerFn, we leave state ===
            // GenStateExecuting and loop back for another invocation.
            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };
          } else if (record.type === "throw") {
            state = GenStateCompleted; // Dispatch the exception by looping back around to the
            // context.dispatchException(context.arg) call above.

            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    } // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.


    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];

      if (method === undefined$1) {
        // A .throw or .return when the delegate iterator has no .throw
        // method always terminates the yield* loop.
        context.delegate = null;

        if (context.method === "throw") {
          // Note: ["return"] must be used for ES3 parsing compatibility.
          if (delegate.iterator["return"]) {
            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            context.method = "return";
            context.arg = undefined$1;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              // If maybeInvokeDelegate(context) changed context.method from
              // "return" to "throw", let that override the TypeError below.
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError("The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (!info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        // Assign the result of the finished delegate to the temporary
        // variable specified by delegate.resultName (see delegateYield).
        context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

        context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
        // exception, let the outer generator proceed normally. If
        // context.method was "next", forget context.arg since it has been
        // "consumed" by the delegate iterator. If context.method was
        // "return", allow the original .return call to continue in the
        // outer generator.

        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined$1;
        }
      } else {
        // Re-yield the result returned by the delegate method.
        return info;
      } // The delegate iterator is finished, so forget it and continue with
      // the outer generator.


      context.delegate = null;
      return ContinueSentinel;
    } // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.


    defineIteratorMethods(Gp);
    define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.

    Gp[iteratorSymbol] = function () {
      return this;
    };

    Gp.toString = function () {
      return "[object Generator]";
    };

    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      // The root entry object (effectively a try statement without a catch
      // or a finally block) gives us a place to store values thrown from
      // locations where there is no enclosing try statement.
      this.tryEntries = [{
        tryLoc: "root"
      }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    exports.keys = function (object) {
      var keys = [];

      for (var key in object) {
        keys.push(key);
      }

      keys.reverse(); // Rather than returning an object with a next method, we keep
      // things simple and return the next function itself.

      return function next() {
        while (keys.length) {
          var key = keys.pop();

          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        } // To avoid creating an additional object, we just hang the .value
        // and .done properties off the next function object itself. This
        // also ensures that the minifier will not anonymize the function.


        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];

        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1,
              next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined$1;
            next.done = true;
            return next;
          };

          return next.next = next;
        }
      } // Return an iterator with no values.


      return {
        next: doneResult
      };
    }

    exports.values = values;

    function doneResult() {
      return {
        value: undefined$1,
        done: true
      };
    }

    Context.prototype = {
      constructor: Context,
      reset: function reset(skipTempReset) {
        this.prev = 0;
        this.next = 0; // Resetting context._sent for legacy support of Babel's
        // function.sent implementation.

        this.sent = this._sent = undefined$1;
        this.done = false;
        this.delegate = null;
        this.method = "next";
        this.arg = undefined$1;
        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            // Not sure about the optimal order of these conditions:
            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
              this[name] = undefined$1;
            }
          }
        }
      },
      stop: function stop() {
        this.done = true;
        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;

        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },
      dispatchException: function dispatchException(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;

        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            context.method = "next";
            context.arg = undefined$1;
          }

          return !!caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            // Exception thrown outside of any try block that could handle
            // it, so set the completion value of the entire function to
            // throw the exception.
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },
      abrupt: function abrupt(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          // Ignore the finally entry if control is not jumping to a
          // location outside the try/catch block.
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },
      complete: function complete(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },
      finish: function finish(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },
      "catch": function _catch(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;

            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }

            return thrown;
          }
        } // The context.catch method must only be called with a location
        // argument that corresponds to a known catch block.


        throw new Error("illegal catch attempt");
      },
      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          // Deliberately forget the last sent value so that we don't
          // accidentally pass it on to the delegate.
          this.arg = undefined$1;
        }

        return ContinueSentinel;
      }
    }; // Regardless of whether this script is executing as a CommonJS module
    // or not, return the runtime object so that we can declare the variable
    // regeneratorRuntime in the outer scope, which allows this module to be
    // injected easily by `bin/regenerator --include-runtime script.js`.

    return exports;
  }( // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports );

  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    // This module should not be running in strict mode, so the above
    // assignment should always work unless something is misconfigured. Just
    // in case runtime.js accidentally runs in strict mode, we can escape
    // strict mode using a global Function call. This could conceivably fail
    // if a Content Security Policy forbids using Function, but in that case
    // the proper solution is to fix the accidental strict mode problem. If
    // you've misconfigured your bundler to force strict mode and applied a
    // CSP to forbid Function, and you're not willing to fix either of those
    // problems, please detail your unique predicament in a GitHub issue.
    Function("r", "regeneratorRuntime = r")(runtime);
  }
});

var default_1 = /*#__PURE__*/function (_BaseFeatureDataAdapt) {
  _inherits(default_1, _BaseFeatureDataAdapt);

  var _super = /*#__PURE__*/_createSuper(default_1);

  function default_1() {
    var _this;

    _classCallCheck(this, default_1);

    _this = _super.apply(this, arguments);
    _this.windowSize = 1000;
    _this.windowDelta = 1000;
    _this.gcMode = 'content';
    return _this;
  }

  _createClass(default_1, [{
    key: "configure",
    value: function () {
      var _configure = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
        var _this$getSubAdapter;

        var sequenceAdapter, dataAdapter;
        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // instantiate the sequence adapter
                sequenceAdapter = readConfObject(this.config, 'sequenceAdapter');
                _context.next = 3;
                return (_this$getSubAdapter = this.getSubAdapter) === null || _this$getSubAdapter === void 0 ? void 0 : _this$getSubAdapter.call(this, sequenceAdapter);

              case 3:
                dataAdapter = _context.sent;

                if (dataAdapter) {
                  _context.next = 6;
                  break;
                }

                throw new Error('Error getting subadapter');

              case 6:
                return _context.abrupt("return", dataAdapter.dataAdapter);

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function configure() {
        return _configure.apply(this, arguments);
      }

      return configure;
    }()
  }, {
    key: "getRefNames",
    value: function () {
      var _getRefNames = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2() {
        var sequenceAdapter;
        return runtime_1.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.configure();

              case 2:
                sequenceAdapter = _context2.sent;
                return _context2.abrupt("return", sequenceAdapter.getRefNames());

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getRefNames() {
        return _getRefNames.apply(this, arguments);
      }

      return getRefNames;
    }()
    /**
     * Fetch features for a certain region
     * @param param -
     * @returns Observable of Feature objects in the region
     */

  }, {
    key: "getFeatures",
    value: function getFeatures(query, opts) {
      var _this2 = this;

      this.windowSize = 1000;
      this.windowDelta = 1000;
      this.gcMode = 'content';
      return ObservableCreate( /*#__PURE__*/function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(observer) {
          var sequenceAdapter, hw, f, queryStart, queryEnd, ret, _yield$ret$pipe$toPro, _yield$ret$pipe$toPro2, feat, residues, i, r, nc, ng, len, j, pos, score;

          return runtime_1.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.next = 2;
                  return _this2.configure();

                case 2:
                  sequenceAdapter = _context3.sent;
                  hw = _this2.windowSize === 1 ? 1 : _this2.windowSize / 2; // Half the window size

                  f = _this2.windowSize === 1;
                  queryStart = query.start, queryEnd = query.end;
                  queryStart = Math.max(0, queryStart - hw);
                  queryEnd += hw;

                  if (!(queryEnd < 0 || queryStart > queryEnd)) {
                    _context3.next = 11;
                    break;
                  }

                  observer.complete();
                  return _context3.abrupt("return");

                case 11:
                  ret = sequenceAdapter.getFeatures(_objectSpread2(_objectSpread2({}, query), {}, {
                    start: queryStart,
                    end: queryEnd
                  }), opts);
                  _context3.next = 14;
                  return ret.pipe(toArray()).toPromise();

                case 14:
                  _yield$ret$pipe$toPro = _context3.sent;
                  _yield$ret$pipe$toPro2 = _slicedToArray(_yield$ret$pipe$toPro, 1);
                  feat = _yield$ret$pipe$toPro2[0];
                  residues = feat.get('seq');

                  for (i = hw; i < residues.length - hw; i += _this2.windowDelta) {
                    r = f ? residues[i] : residues.slice(i - hw, i + hw);
                    nc = 0;
                    ng = 0;
                    len = 0;

                    for (j = 0; j < r.length; j++) {
                      if (r[j] === 'c' || r[j] === 'C') {
                        nc++;
                      } else if (r[j] === 'g' || r[j] === 'G') {
                        ng++;
                      }

                      if (r[j] !== 'N') {
                        len++;
                      }
                    }

                    pos = queryStart;
                    score = void 0;

                    if (_this2.gcMode === 'content') {
                      score = (ng + nc) / (len || 1);
                    } else if (_this2.gcMode === 'skew') {
                      score = (ng - nc) / (ng + nc || 1);
                    } // if (r[Math.floor(r.length / 2)] !== 'N') {


                    observer.next(new SimpleFeature({
                      uniqueId: "".concat(_this2.id, "_").concat(pos + i),
                      start: pos + i,
                      end: pos + i + _this2.windowDelta,
                      score: score
                    })); // }
                  }

                  observer.complete();

                case 20:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3);
        }));

        return function (_x) {
          return _ref.apply(this, arguments);
        };
      }());
    }
    /**
     * called to provide a hint that data tied to a certain region
     * will not be needed for the forseeable future and can be purged
     * from caches, etc
     */

  }, {
    key: "freeResources",
    value: function freeResources()
    /* { region } */
    {}
  }]);

  return default_1;
}(BaseFeatureDataAdapter);
default_1.capabilities = ['hasLocalStats'];

var GCContentAdapter = {
  __proto__: null,
  'default': default_1
};

var TwoBitAdapter = /*#__PURE__*/function (_BaseFeatureDataAdapt) {
  _inherits(TwoBitAdapter, _BaseFeatureDataAdapt);

  var _super = /*#__PURE__*/_createSuper(TwoBitAdapter);

  function TwoBitAdapter(config) {
    var _this;

    _classCallCheck(this, TwoBitAdapter);

    _this = _super.call(this, config);
    var twoBitOpts = {
      filehandle: openLocation(readConfObject(config, 'twoBitLocation'))
    };
    _this.twobit = new TwoBitFile(twoBitOpts);
    return _this;
  }

  _createClass(TwoBitAdapter, [{
    key: "getRefNames",
    value: function getRefNames() {
      return this.twobit.getSequenceNames();
    }
  }, {
    key: "getRegions",
    value: function () {
      var _getRegions = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
        var refSizes;
        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.twobit.getSequenceSizes();

              case 2:
                refSizes = _context.sent;
                return _context.abrupt("return", Object.keys(refSizes).map(function (refName) {
                  return {
                    refName: refName,
                    start: 0,
                    end: refSizes[refName]
                  };
                }));

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getRegions() {
        return _getRegions.apply(this, arguments);
      }

      return getRegions;
    }()
    /**
     * Fetch features for a certain region
     * @param param -
     * @returns Observable of Feature objects in the region
     */

  }, {
    key: "getFeatures",
    value: function getFeatures(_ref) {
      var _this2 = this;

      var refName = _ref.refName,
          start = _ref.start,
          end = _ref.end;
      return ObservableCreate( /*#__PURE__*/function () {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(observer) {
          var size, regionEnd, seq;
          return runtime_1.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return _this2.twobit.getSequenceSize(refName);

                case 2:
                  size = _context2.sent;
                  regionEnd = size !== undefined ? Math.min(size, end) : end;
                  _context2.next = 6;
                  return _this2.twobit.getSequence(refName, start, regionEnd);

                case 6:
                  seq = _context2.sent;

                  if (seq) {
                    observer.next(new SimpleFeature({
                      id: "".concat(refName, " ").concat(start, "-").concat(regionEnd),
                      data: {
                        refName: refName,
                        start: start,
                        end: regionEnd,
                        seq: seq
                      }
                    }));
                  }

                  observer.complete();

                case 9:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }));

        return function (_x) {
          return _ref2.apply(this, arguments);
        };
      }());
    }
    /**
     * called to provide a hint that data tied to a certain region
     * will not be needed for the forseeable future and can be purged
     * from caches, etc
     */

  }, {
    key: "freeResources",
    value: function freeResources()
    /* { region } */
    {}
  }]);

  return TwoBitAdapter;
}(BaseFeatureDataAdapter);

var TwoBitAdapter$1 = {
  __proto__: null,
  'default': TwoBitAdapter
};

var _default = /*#__PURE__*/function (_BaseAdapter) {
  _inherits(_default, _BaseAdapter);

  var _super = /*#__PURE__*/_createSuper(_default);

  function _default(config) {
    var _this;

    _classCallCheck(this, _default);

    _this = _super.call(this, config);
    var chromSizesLocation = readConfObject(config, 'chromSizesLocation');

    if (!chromSizesLocation) {
      throw new Error('must provide chromSizesLocation');
    }

    var file = openLocation(chromSizesLocation);
    _this.source = file.toString();
    _this.refSeqs = _this.init(file);
    return _this;
  }

  _createClass(_default, [{
    key: "init",
    value: function () {
      var _init = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(file) {
        var data, refSeqs;
        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return file.readFile('utf8');

              case 2:
                data = _context.sent;
                refSeqs = {};

                if (data.length) {
                  _context.next = 6;
                  break;
                }

                throw new Error("Could not read file ".concat(file.toString()));

              case 6:
                data.split('\n').forEach(function (line) {
                  if (line.length) {
                    var _line$split = line.split('\t'),
                        _line$split2 = _slicedToArray(_line$split, 2),
                        name = _line$split2[0],
                        length = _line$split2[1];

                    refSeqs[name] = +length;
                  }
                });
                return _context.abrupt("return", refSeqs);

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function init(_x) {
        return _init.apply(this, arguments);
      }

      return init;
    }()
  }, {
    key: "getRegions",
    value: function () {
      var _getRegions = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2() {
        var refSeqs;
        return runtime_1.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.refSeqs;

              case 2:
                refSeqs = _context2.sent;
                return _context2.abrupt("return", Object.keys(refSeqs).map(function (refName) {
                  return {
                    refName: refName,
                    start: 0,
                    end: refSeqs[refName]
                  };
                }));

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getRegions() {
        return _getRegions.apply(this, arguments);
      }

      return getRegions;
    }()
  }, {
    key: "freeResources",
    value: function freeResources()
    /* { region } */
    {}
  }]);

  return _default;
}(BaseAdapter);

var ChromSizesAdapter = {
  __proto__: null,
  'default': _default
};

var _default$1 = /*#__PURE__*/function (_BaseFeatureDataAdapt) {
  _inherits(_default, _BaseFeatureDataAdapt);

  var _super = /*#__PURE__*/_createSuper(_default);

  function _default(config) {
    var _this;

    _classCallCheck(this, _default);

    _this = _super.call(this, config);
    _this.seqCache = new AbortablePromiseCache({
      cache: new LRU({
        maxSize: 200
      }),
      fill: function () {
        var _fill = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(args) {
          var refName, start, end;
          return runtime_1.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  refName = args.refName, start = args.start, end = args.end;
                  return _context.abrupt("return", _this.fasta.getSequence(refName, start, end));

                case 2:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        function fill(_x) {
          return _fill.apply(this, arguments);
        }

        return fill;
      }()
    });
    var fastaLocation = readConfObject(config, 'fastaLocation');
    var faiLocation = readConfObject(config, 'faiLocation');

    if (!fastaLocation) {
      throw new Error('must provide fastaLocation');
    }

    if (!faiLocation) {
      throw new Error('must provide faiLocation');
    }

    var fastaOpts = {
      fasta: openLocation(fastaLocation),
      fai: openLocation(faiLocation)
    };
    _this.fasta = new IndexedFasta(fastaOpts);
    return _this;
  }

  _createClass(_default, [{
    key: "getRefNames",
    value: function getRefNames() {
      return this.fasta.getSequenceNames();
    }
  }, {
    key: "getRegions",
    value: function () {
      var _getRegions = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2() {
        var seqSizes;
        return runtime_1.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.fasta.getSequenceSizes();

              case 2:
                seqSizes = _context2.sent;
                return _context2.abrupt("return", Object.keys(seqSizes).map(function (refName) {
                  return {
                    refName: refName,
                    start: 0,
                    end: seqSizes[refName]
                  };
                }));

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getRegions() {
        return _getRegions.apply(this, arguments);
      }

      return getRegions;
    }()
    /**
     * Fetch features for a certain region
     * @param param -
     * @returns Observable of Feature objects in the region
     */

  }, {
    key: "getFeatures",
    value: function getFeatures(_ref) {
      var _this2 = this;

      var refName = _ref.refName,
          start = _ref.start,
          end = _ref.end;
      return ObservableCreate( /*#__PURE__*/function () {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(observer) {
          var size, regionEnd, chunks, chunkSize, s, e, chunkStart, r, seq;
          return runtime_1.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.next = 2;
                  return _this2.fasta.getSequenceSize(refName);

                case 2:
                  size = _context3.sent;
                  regionEnd = size !== undefined ? Math.min(size, end) : end;
                  chunks = [];
                  chunkSize = 128000;
                  s = start - start % chunkSize;
                  e = end + (chunkSize - end % chunkSize);

                  for (chunkStart = s; chunkStart < e; chunkStart += chunkSize) {
                    r = {
                      refName: refName,
                      start: chunkStart,
                      end: chunkStart + chunkSize
                    };
                    chunks.push(_this2.seqCache.get(JSON.stringify(r), r));
                  }

                  _context3.next = 11;
                  return Promise.all(chunks);

                case 11:
                  seq = _context3.sent.join('').slice(start - s).slice(0, end - start);

                  if (seq) {
                    observer.next(new SimpleFeature({
                      id: "".concat(refName, " ").concat(start, "-").concat(regionEnd),
                      data: {
                        refName: refName,
                        start: start,
                        end: regionEnd,
                        seq: seq
                      }
                    }));
                  }

                  observer.complete();

                case 14:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3);
        }));

        return function (_x2) {
          return _ref2.apply(this, arguments);
        };
      }());
    }
    /**
     * called to provide a hint that data tied to a certain region
     * will not be needed for the forseeable future and can be purged
     * from caches, etc
     */

  }, {
    key: "freeResources",
    value: function freeResources()
    /* { region } */
    {}
  }]);

  return _default;
}(BaseFeatureDataAdapter);

var IndexedFastaAdapter = {
  __proto__: null,
  'default': _default$1
};

var _default$2 = /*#__PURE__*/function (_IndexedFasta) {
  _inherits(_default, _IndexedFasta);

  var _super = /*#__PURE__*/_createSuper(_default);

  function _default(config) {
    var _this;

    _classCallCheck(this, _default);

    _this = _super.call(this, config);
    var fastaLocation = readConfObject(config, 'fastaLocation');
    var faiLocation = readConfObject(config, 'faiLocation');
    var gziLocation = readConfObject(config, 'gziLocation');

    if (!fastaLocation) {
      throw new Error('must provide fastaLocation');
    }

    if (!faiLocation) {
      throw new Error('must provide faiLocation');
    }

    if (!gziLocation) {
      throw new Error('must provide gziLocation');
    }

    var fastaOpts = {
      fasta: openLocation(fastaLocation),
      fai: openLocation(faiLocation),
      gzi: openLocation(gziLocation)
    };
    _this.fasta = new BgzipIndexedFasta(fastaOpts);
    return _this;
  }

  return _default;
}(_default$1);

var BgzipFastaAdapter = {
  __proto__: null,
  'default': _default$2
};

export default SequencePlugin;
//# sourceMappingURL=plugin-sequence.esm.js.map
