import React from 'react';
import * as ReactDom from 'react-dom';
import * as mobx from 'mobx';
import * as mst from 'mobx-state-tree';
import * as mxreact from 'mobx-react';
import PropTypes from 'prop-types';
import * as MUIStyles from '@material-ui/core/styles';
import * as MUICore from '@material-ui/core';
import * as MUIUtils from '@material-ui/core/utils';
import * as MUILab from '@material-ui/lab';
import * as MUIDataGrid from '@material-ui/data-grid';
import * as BaseAdapterExports from '../data_adapters/BaseAdapter';
import * as BaseFeatureDetail from '../BaseFeatureWidget/BaseFeatureDetail';
import ViewType from '../pluggableElementTypes/ViewType';
import AdapterType from '../pluggableElementTypes/AdapterType';
import DisplayType from '../pluggableElementTypes/DisplayType';
import TrackType from '../pluggableElementTypes/TrackType';
import WidgetType from '../pluggableElementTypes/WidgetType';
import * as pluggableElementTypeModels from '../pluggableElementTypes/models';
import * as ServerSideRendererType from '../pluggableElementTypes/renderers/ServerSideRendererType';
import CircularChordRendererType from '../pluggableElementTypes/renderers/CircularChordRendererType';
import * as BoxRendererType from '../pluggableElementTypes/renderers/BoxRendererType';
import * as FeatureRendererType from '../pluggableElementTypes/renderers/FeatureRendererType';
import * as RendererType from '../pluggableElementTypes/renderers/RendererType';
import * as Configuration from '../configuration';
import * as Plugin from '../Plugin';
import * as coreUi from '../ui';
import * as coreUtil from '../util';
import * as coreColor from '../util/color';
import * as trackUtils from '../util/tracks';
import * as coreIo from '../util/io';
import * as coreMstReflection from '../util/mst-reflection';
import * as rxjs from '../util/rxjs';
import * as MUIColors from './material-ui-colors';
import * as mstTypes from '../util/types/mst';
declare const libs: {
    mobx: typeof mobx;
    'mobx-state-tree': typeof mst;
    react: typeof React;
    'react-dom': typeof ReactDom;
    'mobx-react': typeof mxreact;
    'prop-types': typeof PropTypes;
    '@material-ui/core': typeof MUICore;
    '@material-ui/core/SvgIcon': import("@material-ui/core/OverridableComponent").OverridableComponent<MUICore.SvgIconTypeMap<{}, "svg">>;
    '@material-ui/core/utils': typeof MUIUtils;
    '@material-ui/lab': typeof MUILab;
    '@material-ui/data-grid': typeof MUIDataGrid;
    '@material-ui/core/colors': typeof MUIColors;
    '@material-ui/core/styles': typeof MUIStyles;
    '@material-ui/core/Box': React.ComponentType<MUICore.BoxProps>;
    '@material-ui/core/Button': MUICore.ExtendButtonBase<MUICore.ButtonTypeMap<{}, "button">>;
    '@material-ui/core/ButtonGroup': import("@material-ui/core/OverridableComponent").OverridableComponent<MUICore.ButtonGroupTypeMap<{}, "div">>;
    '@material-ui/core/Card': typeof MUICore.Card;
    '@material-ui/core/CardContent': import("@material-ui/core/OverridableComponent").OverridableComponent<MUICore.CardContentTypeMap<{}, "div">>;
    '@material-ui/core/Container': import("@material-ui/core/OverridableComponent").OverridableComponent<MUICore.ContainerTypeMap<{}, "div">>;
    '@material-ui/core/Checkbox': typeof MUICore.Checkbox;
    '@material-ui/core/Dialog': typeof MUICore.Dialog;
    '@material-ui/core/FormGroup': typeof MUICore.FormGroup;
    '@material-ui/core/FormLabel': import("@material-ui/core/OverridableComponent").OverridableComponent<MUICore.FormLabelTypeMap<{}, "label">>;
    '@material-ui/core/FormControl': import("@material-ui/core/OverridableComponent").OverridableComponent<MUICore.FormControlTypeMap<{}, "div">>;
    '@material-ui/core/FormControlLabel': typeof MUICore.FormControlLabel;
    '@material-ui/core/Grid': import("@material-ui/core/OverridableComponent").OverridableComponent<MUICore.GridTypeMap<{}, "div">>;
    '@material-ui/core/Icon': import("@material-ui/core/OverridableComponent").OverridableComponent<MUICore.IconTypeMap<{}, "span">>;
    '@material-ui/core/IconButton': MUICore.ExtendButtonBase<MUICore.IconButtonTypeMap<{}, "button">>;
    '@material-ui/core/InputAdornment': import("@material-ui/core/OverridableComponent").OverridableComponent<MUICore.InputAdornmentTypeMap<{}, "div">>;
    '@material-ui/core/LinearProgress': typeof MUICore.LinearProgress;
    '@material-ui/core/ListItemIcon': typeof MUICore.ListItemIcon;
    '@material-ui/core/ListItemText': typeof MUICore.ListItemText;
    '@material-ui/core/Menu': typeof MUICore.Menu;
    '@material-ui/core/MenuItem': import("@material-ui/core/OverridableComponent").OverridableComponent<MUICore.MenuItemTypeMap<{
        button: false;
    }, "li">> & ((props: {
        href: string;
    } & {
        button?: true | undefined;
    } & {
        alignItems?: "center" | "flex-start" | undefined;
        autoFocus?: boolean | undefined;
        button?: boolean | undefined;
        ContainerComponent?: "object" | "summary" | "small" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "caption" | "abbr" | "address" | "article" | "aside" | "b" | "bdi" | "bdo" | "big" | "blockquote" | "cite" | "code" | "col" | "colgroup" | "dd" | "del" | "details" | "dfn" | "div" | "dt" | "em" | "embed" | "figcaption" | "figure" | "footer" | "head" | "header" | "hgroup" | "hr" | "i" | "iframe" | "img" | "input" | "kbd" | "keygen" | "legend" | "main" | "mark" | "menu" | "menuitem" | "meter" | "nav" | "noindex" | "noscript" | "output" | "p" | "picture" | "rp" | "rt" | "ruby" | "s" | "samp" | "section" | "span" | "strong" | "sub" | "sup" | "table" | "tbody" | "td" | "tfoot" | "th" | "thead" | "time" | "tr" | "u" | "var" | "wbr" | "webview" | React.ComponentClass<React.HTMLAttributes<HTMLDivElement>, any> | React.FunctionComponent<React.HTMLAttributes<HTMLDivElement>> | undefined;
        ContainerProps?: React.HTMLAttributes<HTMLDivElement> | undefined;
        dense?: boolean | undefined;
        disabled?: boolean | undefined;
        disableGutters?: boolean | undefined;
        divider?: boolean | undefined;
        focusVisibleClassName?: string | undefined;
        selected?: boolean | undefined;
    } & {
        action?: ((instance: MUICore.ButtonBaseActions | null) => void) | React.RefObject<MUICore.ButtonBaseActions> | null | undefined;
        buttonRef?: ((instance: unknown) => void) | React.RefObject<unknown> | null | undefined;
        centerRipple?: boolean | undefined;
        children?: React.ReactNode;
        disabled?: boolean | undefined;
        disableRipple?: boolean | undefined;
        disableTouchRipple?: boolean | undefined;
        focusRipple?: boolean | undefined;
        focusVisibleClassName?: string | undefined;
        onFocusVisible?: ((event: React.FocusEvent<any>) => void) | undefined;
        tabIndex?: string | number | undefined;
        TouchRippleProps?: Partial<import("@material-ui/core/ButtonBase/TouchRipple").TouchRippleProps> | undefined;
    } & import("@material-ui/core/OverridableComponent").CommonProps<MUICore.ExtendButtonBaseTypeMap<MUICore.MenuItemTypeMap<{
        button?: true | undefined;
    }, "li">>> & Pick<Pick<React.DetailedHTMLProps<React.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>, "id" | "type" | "defaultValue" | "key" | "prefix" | "slot" | "style" | "title" | "className" | "defaultChecked" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "hidden" | "lang" | "placeholder" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "color" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "children" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "href" | "download" | "hrefLang" | "media" | "ping" | "rel" | "target" | "referrerPolicy"> & {
        ref?: ((instance: HTMLAnchorElement | null) => void) | React.RefObject<HTMLAnchorElement> | null | undefined;
    }, "id" | "type" | "defaultValue" | "key" | "prefix" | "ref" | "slot" | "title" | "defaultChecked" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "hidden" | "lang" | "placeholder" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "color" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "children" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "href" | "download" | "hrefLang" | "media" | "ping" | "rel" | "target" | "referrerPolicy">) => JSX.Element) & import("@material-ui/core/OverridableComponent").OverridableComponent<MUICore.ExtendButtonBaseTypeMap<MUICore.MenuItemTypeMap<{
        button?: true | undefined;
    }, "li">>>;
    '@material-ui/core/RadioGroup': typeof MUICore.RadioGroup;
    '@material-ui/core/Radio': typeof MUICore.Radio;
    '@material-ui/core/Select': typeof MUICore.Select;
    '@material-ui/core/Snackbar': typeof MUICore.Snackbar;
    '@material-ui/core/SnackbarContent': typeof MUICore.SnackbarContent;
    '@material-ui/core/TextField': typeof MUICore.TextField;
    '@material-ui/core/Tooltip': typeof MUICore.Tooltip;
    '@material-ui/core/Typography': import("@material-ui/core/OverridableComponent").OverridableComponent<MUICore.TypographyTypeMap<{}, "span">>;
    '@material-ui/lab/ToggleButton': MUICore.ExtendButtonBase<MUILab.ToggleButtonTypeMap<{}, "button">>;
    '@material-ui/lab/ToggleButtonGroup': typeof MUILab.ToggleButtonGroup;
    '@jbrowse/core/Plugin': typeof Plugin;
    '@jbrowse/core/pluggableElementTypes/ViewType': typeof ViewType;
    '@jbrowse/core/pluggableElementTypes/AdapterType': typeof AdapterType;
    '@jbrowse/core/pluggableElementTypes/DisplayType': typeof DisplayType;
    '@jbrowse/core/pluggableElementTypes/TrackType': typeof TrackType;
    '@jbrowse/core/pluggableElementTypes/WidgetType': typeof WidgetType;
    '@jbrowse/core/pluggableElementTypes/models': typeof pluggableElementTypeModels;
    '@jbrowse/core/pluggableElementTypes/renderers/ServerSideRendererType': typeof ServerSideRendererType;
    '@jbrowse/core/pluggableElementTypes/renderers/CircularChordRendererType': typeof CircularChordRendererType;
    '@jbrowse/core/pluggableElementTypes/renderers/BoxRendererType': typeof BoxRendererType;
    '@jbrowse/core/pluggableElementTypes/renderers/FeatureRendererType': typeof FeatureRendererType;
    '@jbrowse/core/pluggableElementTypes/renderers/RendererType': typeof RendererType;
    '@jbrowse/core/configuration': typeof Configuration;
    '@jbrowse/core/util/types/mst': typeof mstTypes;
    '@jbrowse/core/ui': typeof coreUi;
    '@jbrowse/core/util': typeof coreUtil;
    '@jbrowse/core/util/color': typeof coreColor;
    '@jbrowse/core/util/tracks': typeof trackUtils;
    '@jbrowse/core/util/Base1DViewModel': mst.IModelType<{
        displayedRegions: mst.IArrayType<mst.IModelType<{
            refName: mst.ISimpleType<string>;
            start: mst.ISimpleType<number>;
            end: mst.ISimpleType<number>;
            reversed: mst.IOptionalIType<mst.ISimpleType<boolean>, [undefined]>;
        } & {
            assemblyName: mst.ISimpleType<string>;
        }, {
            setRefName(newRefName: string): void;
        }, mst._NotCustomized, mst._NotCustomized>>;
        bpPerPx: mst.IType<number | undefined, number, number>;
        offsetPx: mst.IType<number | undefined, number, number>;
        interRegionPaddingWidth: mst.IOptionalIType<mst.ISimpleType<number>, [undefined]>;
        minimumBlockWidth: mst.IOptionalIType<mst.ISimpleType<number>, [undefined]>;
    }, {
        features: import("../util/simpleFeature").Feature[] | undefined;
        volatileWidth: number;
    } & {
        setDisplayedRegions(regions: coreUtil.Region[]): void;
        setBpPerPx(val: number): void;
        setVolatileWidth(width: number): void;
    } & {
        readonly width: number;
        readonly displayedRegionsTotalPx: number;
        readonly maxOffset: number;
        readonly minOffset: number;
        readonly totalBp: number;
        bpToPx({ refName, coord, regionNumber, }: {
            refName: string;
            coord: number;
            regionNumber?: number | undefined;
        }): number | undefined;
        pxToBp(px: number): {
            oob: boolean;
            coord: number;
            offset: number;
            index: number;
            refName: string;
            start: number;
            end: number;
            reversed: boolean;
            assemblyName: string;
        } | {
            coord: number;
            index: number;
            start: number;
            refName: string;
            oob: boolean;
            assemblyName: string;
            offset: number;
            reversed: boolean;
        };
    } & {
        readonly dynamicBlocks: import("../util/blockTypes").BlockSet;
        readonly staticBlocks: import("../util/blockTypes").BlockSet;
        readonly currBp: number;
    } & {
        setFeatures(features: import("../util/simpleFeature").Feature[]): void;
        zoomToDisplayedRegions(leftPx: import("../util/Base1DViewModel").BpOffset | undefined, rightPx: import("../util/Base1DViewModel").BpOffset | undefined): void;
        showAllRegions(): void;
        moveTo(start: import("../util/Base1DViewModel").BpOffset, end: import("../util/Base1DViewModel").BpOffset): void;
        zoomOut(): void;
        zoomIn(): void;
        zoomTo(newBpPerPx: number, offset?: number): void;
        scroll(distance: number): number;
    }, mst._NotCustomized, mst._NotCustomized>;
    '@jbrowse/core/util/io': typeof coreIo;
    '@jbrowse/core/util/mst-reflection': typeof coreMstReflection;
    '@jbrowse/core/util/rxjs': typeof rxjs;
    '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail': typeof BaseFeatureDetail;
    '@jbrowse/core/data_adapters/BaseAdapter': typeof BaseAdapterExports;
};
export default libs;
