"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/* eslint-disable no-underscore-dangle */

/**
 * Heavily based on [quick-lru](https://www.npmjs.com/package/quick-lru)
 * (quick-lru didn't work for us because the export wouldn't compile in Webpack
 * properly)
 */
var QuickLRU = /*#__PURE__*/function () {
  function QuickLRU() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck2.default)(this, QuickLRU);

    if (!(options.maxSize && options.maxSize > 0)) {
      throw new TypeError('`maxSize` must be a number greater than 0');
    }

    this.maxSize = options.maxSize;
    this.cache = new Map();
    this.oldCache = new Map();
    this._size = 0;
  }

  (0, _createClass2.default)(QuickLRU, [{
    key: "_set",
    value: function _set(key, value) {
      this.cache.set(key, value);
      this._size += 1;

      if (this._size >= this.maxSize) {
        this._size = 0;
        this.oldCache = this.cache;
        this.cache = new Map();
      }
    }
  }, {
    key: "get",
    value: function get(key) {
      if (this.cache.has(key)) {
        return this.cache.get(key);
      }

      if (this.oldCache.has(key)) {
        var value = this.oldCache.get(key);
        this.oldCache.delete(key);

        this._set(key, value);

        return value;
      }

      return undefined;
    }
  }, {
    key: "set",
    value: function set(key, value) {
      if (this.cache.has(key)) {
        this.cache.set(key, value);
      } else {
        this._set(key, value);
      }

      return this;
    }
  }, {
    key: "has",
    value: function has(key) {
      return this.cache.has(key) || this.oldCache.has(key);
    }
  }, {
    key: "peek",
    value: function peek(key) {
      if (this.cache.has(key)) {
        return this.cache.get(key);
      }

      if (this.oldCache.has(key)) {
        return this.oldCache.get(key);
      }

      return undefined;
    }
  }, {
    key: "delete",
    value: function _delete(key) {
      var deleted = this.cache.delete(key);

      if (deleted) {
        this._size -= 1;
      }

      return this.oldCache.delete(key) || deleted;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.cache.clear();
      this.oldCache.clear();
      this._size = 0;
    }
  }, {
    key: "keys",
    value: /*#__PURE__*/regeneratorRuntime.mark(function keys() {
      var _iterator, _step, _step$value, key;

      return regeneratorRuntime.wrap(function keys$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _iterator = _createForOfIteratorHelper(this);
              _context.prev = 1;

              _iterator.s();

            case 3:
              if ((_step = _iterator.n()).done) {
                _context.next = 9;
                break;
              }

              _step$value = (0, _slicedToArray2.default)(_step.value, 1), key = _step$value[0];
              _context.next = 7;
              return key;

            case 7:
              _context.next = 3;
              break;

            case 9:
              _context.next = 14;
              break;

            case 11:
              _context.prev = 11;
              _context.t0 = _context["catch"](1);

              _iterator.e(_context.t0);

            case 14:
              _context.prev = 14;

              _iterator.f();

              return _context.finish(14);

            case 17:
            case "end":
              return _context.stop();
          }
        }
      }, keys, this, [[1, 11, 14, 17]]);
    })
  }, {
    key: "values",
    value: /*#__PURE__*/regeneratorRuntime.mark(function values() {
      var _iterator2, _step2, _step2$value, value;

      return regeneratorRuntime.wrap(function values$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _iterator2 = _createForOfIteratorHelper(this);
              _context2.prev = 1;

              _iterator2.s();

            case 3:
              if ((_step2 = _iterator2.n()).done) {
                _context2.next = 9;
                break;
              }

              _step2$value = (0, _slicedToArray2.default)(_step2.value, 2), value = _step2$value[1];
              _context2.next = 7;
              return value;

            case 7:
              _context2.next = 3;
              break;

            case 9:
              _context2.next = 14;
              break;

            case 11:
              _context2.prev = 11;
              _context2.t0 = _context2["catch"](1);

              _iterator2.e(_context2.t0);

            case 14:
              _context2.prev = 14;

              _iterator2.f();

              return _context2.finish(14);

            case 17:
            case "end":
              return _context2.stop();
          }
        }
      }, values, this, [[1, 11, 14, 17]]);
    })
  }, {
    key: Symbol.iterator,
    value: /*#__PURE__*/regeneratorRuntime.mark(function value() {
      var _iterator3, _step3, item, _iterator4, _step4, _item, _item2, key;

      return regeneratorRuntime.wrap(function value$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _iterator3 = _createForOfIteratorHelper(this.cache);
              _context3.prev = 1;

              _iterator3.s();

            case 3:
              if ((_step3 = _iterator3.n()).done) {
                _context3.next = 9;
                break;
              }

              item = _step3.value;
              _context3.next = 7;
              return item;

            case 7:
              _context3.next = 3;
              break;

            case 9:
              _context3.next = 14;
              break;

            case 11:
              _context3.prev = 11;
              _context3.t0 = _context3["catch"](1);

              _iterator3.e(_context3.t0);

            case 14:
              _context3.prev = 14;

              _iterator3.f();

              return _context3.finish(14);

            case 17:
              _iterator4 = _createForOfIteratorHelper(this.oldCache);
              _context3.prev = 18;

              _iterator4.s();

            case 20:
              if ((_step4 = _iterator4.n()).done) {
                _context3.next = 28;
                break;
              }

              _item = _step4.value;
              _item2 = (0, _slicedToArray2.default)(_item, 1), key = _item2[0];

              if (this.cache.has(key)) {
                _context3.next = 26;
                break;
              }

              _context3.next = 26;
              return _item;

            case 26:
              _context3.next = 20;
              break;

            case 28:
              _context3.next = 33;
              break;

            case 30:
              _context3.prev = 30;
              _context3.t1 = _context3["catch"](18);

              _iterator4.e(_context3.t1);

            case 33:
              _context3.prev = 33;

              _iterator4.f();

              return _context3.finish(33);

            case 36:
            case "end":
              return _context3.stop();
          }
        }
      }, value, this, [[1, 11, 14, 17], [18, 30, 33, 36]]);
    })
  }, {
    key: "size",
    get: function get() {
      var oldCacheSize = 0;

      var _iterator5 = _createForOfIteratorHelper(this.oldCache.keys()),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var key = _step5.value;

          if (!this.cache.has(key)) {
            oldCacheSize += 1;
          }
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }

      return this._size + oldCacheSize;
    }
  }]);
  return QuickLRU;
}();

var _default = QuickLRU;
exports.default = _default;