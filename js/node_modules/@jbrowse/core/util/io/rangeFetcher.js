"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clearCache = clearCache;
exports.openUrl = openUrl;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _httpRangeFetcher = require("http-range-fetcher");

var _buffer = require("buffer");

var _genericFilehandle = require("generic-filehandle");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// function unReplacePath() {
//   throw new Error('unimplemented') // TODO
// }
function getfetch(url) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return fetch(url, _objectSpread({
    method: 'GET',
    credentials: 'same-origin'
  }, opts));
}

function fetchBinaryRange(_x, _x2, _x3) {
  return _fetchBinaryRange.apply(this, arguments);
}

function _fetchBinaryRange() {
  _fetchBinaryRange = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee(url, start, end) {
    var options,
        requestDate,
        requestHeaders,
        res,
        responseDate,
        headers,
        _iterator,
        _step,
        _step$value,
        k,
        v,
        arrayBuffer,
        _args = arguments;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            options = _args.length > 3 && _args[3] !== undefined ? _args[3] : {};
            requestDate = new Date();
            requestHeaders = _objectSpread(_objectSpread({}, options.headers), {}, {
              range: "bytes=".concat(start, "-").concat(end)
            });
            _context.next = 5;
            return getfetch(url, _objectSpread(_objectSpread({}, options), {}, {
              headers: requestHeaders // onRetry: ({ retriesLeft }: { retriesLeft: number }) => {
              //   console.warn(
              //     `${url} bytes ${start}-${end} request failed, retrying (${retriesLeft} retries left)`,
              //   )
              // },

            }));

          case 5:
            res = _context.sent;
            responseDate = new Date();

            if (!(res.status !== 206 && res.status !== 200)) {
              _context.next = 9;
              break;
            }

            throw new Error("HTTP ".concat(res.status, " when fetching ").concat(url, " bytes ").concat(start, "-").concat(end));

          case 9:
            // translate the Headers object into a regular key -> value object.
            // will miss duplicate headers of course
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            headers = {};
            _iterator = _createForOfIteratorHelper(res.headers.entries());

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                _step$value = (0, _slicedToArray2.default)(_step.value, 2), k = _step$value[0], v = _step$value[1];
                headers[k] = v;
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }

            if (!(res.status === 200)) {
              _context.next = 14;
              break;
            }

            throw new Error("HTTP ".concat(res.status, " when fetching ").concat(url, " bytes ").concat(start, "-").concat(end));

          case 14:
            _context.next = 16;
            return res.arrayBuffer();

          case 16:
            arrayBuffer = _context.sent;
            return _context.abrupt("return", {
              headers: headers,
              requestDate: requestDate,
              responseDate: responseDate,
              buffer: _buffer.Buffer.from(arrayBuffer)
            });

          case 18:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _fetchBinaryRange.apply(this, arguments);
}

var globalRangeCache = new _httpRangeFetcher.HttpRangeFetcher({
  fetch: fetchBinaryRange,
  size: 500 * 1024 * 1024,
  // 500MB
  chunkSize: Math.pow(2, 17),
  // 128KB
  maxFetchSize: 100 * 1024 * 1024,
  minimumTTL: 300000000
});

function globalCacheFetch(_x4, _x5) {
  return _globalCacheFetch.apply(this, arguments);
}

function _globalCacheFetch() {
  _globalCacheFetch = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(url, opts) {
    var requestHeaders, range, _ref, _ref2, rangeParse, _rangeParse, start, end, s, e, response, headers;

    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            // if it is a range request, route it through the global range cache
            requestHeaders = opts && opts.headers;

            if (requestHeaders) {
              if (requestHeaders instanceof Headers) {
                range = requestHeaders.get('range');
              } else if (Array.isArray(requestHeaders)) {
                ;
                _ref = requestHeaders.find(function (_ref3) {
                  var _ref4 = (0, _slicedToArray2.default)(_ref3, 1),
                      key = _ref4[0];

                  return key === 'range';
                }) || [undefined, undefined];
                _ref2 = (0, _slicedToArray2.default)(_ref, 2);
                range = _ref2[1];
              } else {
                range = requestHeaders.range;
              }
            }

            if (!range) {
              _context2.next = 13;
              break;
            }

            rangeParse = /bytes=(\d+)-(\d+)/.exec(range);

            if (!rangeParse) {
              _context2.next = 13;
              break;
            }

            _rangeParse = (0, _slicedToArray2.default)(rangeParse, 3), start = _rangeParse[1], end = _rangeParse[2];
            s = parseInt(start, 10);
            e = parseInt(end, 10);
            _context2.next = 10;
            return globalRangeCache.getRange(url, s, e - s + 1, {
              signal: opts && opts.signal
            });

          case 10:
            response = _context2.sent;
            headers = response.headers;
            return _context2.abrupt("return", new Response(response.buffer, {
              status: 206,
              headers: headers
            }));

          case 13:
            return _context2.abrupt("return", getfetch(url, opts));

          case 14:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _globalCacheFetch.apply(this, arguments);
}

function clearCache() {
  globalRangeCache.reset();
}

function openUrl(url) {
  return new _genericFilehandle.RemoteFile(String(url), {
    fetch: globalCacheFetch
  });
}