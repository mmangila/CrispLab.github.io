"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _wrapNativeSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapNativeSuper"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _fileUriToPath = _interopRequireDefault(require("file-uri-to-path"));

var _ElectronLocalFile = _interopRequireDefault(require("./ElectronLocalFile"));

var _index = require("../index");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

// eslint-disable-next-line @typescript-eslint/no-explicit-any
var _ref = typeof window !== 'undefined' ? window : {},
    electron = _ref.electron;

var ElectronRemoteFileError = /*#__PURE__*/function (_Error) {
  (0, _inherits2.default)(ElectronRemoteFileError, _Error);

  var _super = _createSuper(ElectronRemoteFileError);

  function ElectronRemoteFileError() {
    var _this;

    (0, _classCallCheck2.default)(this, ElectronRemoteFileError);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "status", void 0);
    return _this;
  }

  return ElectronRemoteFileError;
}( /*#__PURE__*/(0, _wrapNativeSuper2.default)(Error));

var ElectronRemoteFile = /*#__PURE__*/function () {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  function ElectronRemoteFile(source) {
    var _this2 = this;

    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _classCallCheck2.default)(this, ElectronRemoteFile);
    (0, _defineProperty2.default)(this, "url", void 0);
    (0, _defineProperty2.default)(this, "_stat", void 0);
    (0, _defineProperty2.default)(this, "fetch", void 0);
    (0, _defineProperty2.default)(this, "baseOverrides", {});
    (0, _defineProperty2.default)(this, "nodeFetchFallback", false);
    (0, _defineProperty2.default)(this, "ipcRenderer", void 0);
    (0, _defineProperty2.default)(this, "nodeFetch", /*#__PURE__*/function () {
      var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee(input, init) {
        var serializedResponse, buffer, headers, status, statusText, response;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (init) {
                  init.signal = undefined;
                }

                _context.next = 3;
                return _this2.ipcRenderer.invoke('fetch', input, init);

              case 3:
                serializedResponse = _context.sent;
                buffer = serializedResponse.buffer, headers = serializedResponse.headers, status = serializedResponse.status, statusText = serializedResponse.statusText;
                response = new Response(buffer, {
                  status: status,
                  statusText: statusText,
                  headers: headers
                });
                return _context.abrupt("return", response);

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x, _x2) {
        return _ref2.apply(this, arguments);
      };
    }());
    var ipcRenderer;

    if (electron) {
      ipcRenderer = electron.ipcRenderer;
    }

    if (!ipcRenderer) {
      throw new Error('Cannot use ElectronLocalFile without ipcRenderer from electron');
    }

    this.ipcRenderer = ipcRenderer;
    this.url = source; // if it is a file URL, monkey-patch ourselves to act like a LocalFile

    if (source.startsWith('file://')) {
      var path = (0, _fileUriToPath.default)(source);

      if (!path) {
        throw new TypeError('invalid file url');
      }

      var localFile = new _ElectronLocalFile.default(path);
      this.read = localFile.read.bind(localFile);
      this.readFile = localFile.readFile.bind(localFile);
      this.stat = localFile.stat.bind(localFile);
      return;
    }

    var fetcharg = opts.fetch || window.fetch;

    if (!fetch) {
      throw new TypeError("no fetch function supplied, and none found in global environment");
    }

    this.fetch = fetcharg;

    if (opts.overrides) {
      this.baseOverrides = opts.overrides;
    }
  }

  (0, _createClass2.default)(ElectronRemoteFile, [{
    key: "getBufferFromResponse",
    value: function () {
      var _getBufferFromResponse = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(response) {
        var resp;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!(typeof response.buffer === 'function')) {
                  _context2.next = 2;
                  break;
                }

                return _context2.abrupt("return", response.buffer());

              case 2:
                if (!(typeof response.arrayBuffer === 'function')) {
                  _context2.next = 7;
                  break;
                }

                _context2.next = 5;
                return response.arrayBuffer();

              case 5:
                resp = _context2.sent;
                return _context2.abrupt("return", Buffer.from(resp));

              case 7:
                throw new TypeError('invalid HTTP response object, has no buffer method, and no arrayBuffer method');

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function getBufferFromResponse(_x3) {
        return _getBufferFromResponse.apply(this, arguments);
      }

      return getBufferFromResponse;
    }()
  }, {
    key: "getFetch",
    value: function () {
      var _getFetch = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(opts) {
        var myfetch, _opts$headers, headers, signal, _opts$overrides, overrides, requestOptions, response, contentRange, sizeMatch, contentLength;

        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (this.fetch) {
                  _context3.next = 2;
                  break;
                }

                throw new Error('a fetch function must be available unless using a file:// url');

              case 2:
                if (this.url) {
                  _context3.next = 4;
                  break;
                }

                throw new Error('no URL specified');

              case 4:
                myfetch = this.nodeFetchFallback ? this.nodeFetch : this.fetch;
                _opts$headers = opts.headers, headers = _opts$headers === void 0 ? {} : _opts$headers, signal = opts.signal, _opts$overrides = opts.overrides, overrides = _opts$overrides === void 0 ? {} : _opts$overrides;
                requestOptions = _objectSpread(_objectSpread({
                  headers: headers,
                  method: 'GET',
                  redirect: 'follow',
                  mode: 'cors',
                  signal: signal
                }, this.baseOverrides), overrides);
                _context3.prev = 7;
                _context3.next = 10;
                return myfetch(this.url, requestOptions);

              case 10:
                response = _context3.sent;
                _context3.next = 22;
                break;

              case 13:
                _context3.prev = 13;
                _context3.t0 = _context3["catch"](7);

                if ((0, _index.isAbortException)(_context3.t0)) {
                  _context3.next = 21;
                  break;
                }

                if (!this.nodeFetchFallback) {
                  _context3.next = 18;
                  break;
                }

                throw _context3.t0;

              case 18:
                console.warn('received error, falling back to node-fetch', _context3.t0);
                this.nodeFetchFallback = true;
                return _context3.abrupt("return", this.getFetch(opts));

              case 21:
                throw _context3.t0;

              case 22:
                if (!this._stat) {
                  // try to parse out the size of the remote file
                  if (requestOptions.headers && requestOptions.headers.range) {
                    contentRange = response.headers.get('content-range');
                    sizeMatch = /\/(\d+)$/.exec(contentRange || '');

                    if (sizeMatch && sizeMatch[1]) {
                      this._stat = {
                        size: parseInt(sizeMatch[1], 10)
                      };
                    }
                  } else {
                    contentLength = response.headers.get('content-length');

                    if (contentLength) {
                      this._stat = {
                        size: parseInt(contentLength, 10)
                      };
                    }
                  }
                }

                return _context3.abrupt("return", response);

              case 24:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this, [[7, 13]]);
      }));

      function getFetch(_x4) {
        return _getFetch.apply(this, arguments);
      }

      return getFetch;
    }()
  }, {
    key: "headFetch",
    value: function () {
      var _headFetch = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                return _context4.abrupt("return", this.getFetch({
                  overrides: {
                    method: 'HEAD'
                  }
                }));

              case 1:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function headFetch() {
        return _headFetch.apply(this, arguments);
      }

      return headFetch;
    }()
  }, {
    key: "read",
    value: function () {
      var _read = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(buffer) {
        var offset,
            length,
            position,
            opts,
            response,
            responseData,
            bytesCopied,
            _args5 = arguments;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                offset = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : 0;
                length = _args5.length > 2 ? _args5[2] : undefined;
                position = _args5.length > 3 && _args5[3] !== undefined ? _args5[3] : 0;
                opts = _args5.length > 4 && _args5[4] !== undefined ? _args5[4] : {};
                opts.headers = opts.headers || {};

                if (length < Infinity) {
                  opts.headers.range = "bytes=".concat(position, "-").concat(position + length);
                } else if (length === Infinity && position !== 0) {
                  opts.headers.range = "bytes=".concat(position, "-");
                }

                _context5.next = 8;
                return this.getFetch(opts);

              case 8:
                response = _context5.sent;

                if (!(response.status === 200 && position === 0 || response.status === 206)) {
                  _context5.next = 15;
                  break;
                }

                _context5.next = 12;
                return this.getBufferFromResponse(response);

              case 12:
                responseData = _context5.sent;
                bytesCopied = responseData.copy(buffer, offset, 0, Math.min(length, responseData.length));
                return _context5.abrupt("return", {
                  bytesRead: bytesCopied,
                  buffer: buffer
                });

              case 15:
                throw new Error("HTTP ".concat(response.status, " fetching ").concat(this.url));

              case 16:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function read(_x5) {
        return _read.apply(this, arguments);
      }

      return read;
    }()
  }, {
    key: "readFile",
    value: function () {
      var _readFile = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
        var options,
            encoding,
            opts,
            response,
            err,
            _args6 = arguments;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                options = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : {};

                if (typeof options === 'string') {
                  encoding = options;
                  opts = {};
                } else {
                  encoding = options.encoding;
                  opts = options;
                  delete opts.encoding;
                }

                _context6.next = 4;
                return this.getFetch(opts);

              case 4:
                response = _context6.sent;

                if (!(response.status !== 200)) {
                  _context6.next = 9;
                  break;
                }

                err = new ElectronRemoteFileError("HTTP ".concat(response.status, " fetching ").concat(this.url));
                err.status = response.status;
                throw err;

              case 9:
                if (!(encoding === 'utf8')) {
                  _context6.next = 11;
                  break;
                }

                return _context6.abrupt("return", response.text());

              case 11:
                if (!encoding) {
                  _context6.next = 13;
                  break;
                }

                throw new Error("unsupported encoding: ".concat(encoding));

              case 13:
                return _context6.abrupt("return", this.getBufferFromResponse(response));

              case 14:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function readFile() {
        return _readFile.apply(this, arguments);
      }

      return readFile;
    }()
  }, {
    key: "stat",
    value: function () {
      var _stat = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                if (this._stat) {
                  _context7.next = 3;
                  break;
                }

                _context7.next = 3;
                return this.headFetch();

              case 3:
                if (this._stat) {
                  _context7.next = 6;
                  break;
                }

                _context7.next = 6;
                return this.read(Buffer.allocUnsafe(10), 0, 10, 0);

              case 6:
                if (this._stat) {
                  _context7.next = 8;
                  break;
                }

                throw new Error("unable to determine size of file at ".concat(this.url));

              case 8:
                return _context7.abrupt("return", this._stat);

              case 9:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function stat() {
        return _stat.apply(this, arguments);
      }

      return stat;
    }()
  }]);
  return ElectronRemoteFile;
}();

exports.default = ElectronRemoteFile;