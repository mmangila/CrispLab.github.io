"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.openLocation = openLocation;
exports.openUrl = void 0;

var _genericFilehandle = require("generic-filehandle");

var _ElectronLocalFile = _interopRequireDefault(require("./ElectronLocalFile"));

var _ElectronRemoteFile = _interopRequireDefault(require("./ElectronRemoteFile"));

var _rangeFetcher = require("./rangeFetcher");

var _tracks = require("../tracks");

// this is recommended in a later comment in https://github.com/electron/electron/issues/2288
// for detecting electron in a renderer process, which is the one that has node enabled for us
// const isElectron = process.versions.electron
// const i2 = process.versions.hasOwnProperty('electron')
var isElectron = /electron/i.test(typeof navigator !== 'undefined' ? navigator.userAgent : '');

var openUrl = function openUrl(arg) {
  return isElectron ? new _ElectronRemoteFile.default(arg) : (0, _rangeFetcher.openUrl)(arg);
};

exports.openUrl = openUrl;

function isUriLocation(location) {
  return 'uri' in location;
}

function isLocalPathLocation(location) {
  return 'localPath' in location;
}

function isBlobLocation(location) {
  return 'blobId' in location;
}

function openLocation(location) {
  if (!location) {
    throw new Error('must provide a location to openLocation');
  }

  if (isElectron) {
    if (isUriLocation(location)) {
      if (!location.uri) {
        throw new Error('No URI provided');
      }

      return new _ElectronRemoteFile.default(location.uri);
    }

    if (isLocalPathLocation(location)) {
      if (!location.localPath) {
        throw new Error('No local path provided');
      }

      return new _ElectronLocalFile.default(location.localPath);
    }
  } else {
    if (isUriLocation(location)) {
      if (!location.uri) {
        throw new Error('No URI provided');
      }

      return openUrl(location.baseUri ? new URL(location.uri, location.baseUri).href : location.uri);
    }

    if (isLocalPathLocation(location)) {
      if (!location.localPath) {
        throw new Error('No local path provided');
      }

      return new _genericFilehandle.LocalFile(location.localPath);
    }
  }

  if (isBlobLocation(location)) {
    // special case where blob is not directly stored on the model, use a getter
    var blob = (0, _tracks.getBlob)(location.blobId);

    if (!blob) {
      throw new Error("file (\"".concat(location.name, "\") was opened locally from a previous session. To restore it, go to track settings and reopen the file"));
    }

    return new _genericFilehandle.BlobFile(blob);
  }

  throw new Error('invalid fileLocation');
}