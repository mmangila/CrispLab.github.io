"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

// eslint-disable-next-line @typescript-eslint/no-explicit-any
var _ref = typeof window !== 'undefined' ? window : {},
    electron = _ref.electron;

var ElectronLocalFile = /*#__PURE__*/function () {
  function ElectronLocalFile(source) {
    (0, _classCallCheck2.default)(this, ElectronLocalFile);
    (0, _defineProperty2.default)(this, "filename", void 0);
    (0, _defineProperty2.default)(this, "fd", void 0);
    (0, _defineProperty2.default)(this, "ipcRenderer", void 0);
    var ipcRenderer;

    if (electron) {
      ipcRenderer = electron.ipcRenderer;
    }

    if (!ipcRenderer) {
      throw new Error('Cannot use ElectronLocalFile without ipcRenderer from electron');
    }

    this.ipcRenderer = ipcRenderer;
    this.filename = source;
  }

  (0, _createClass2.default)(ElectronLocalFile, [{
    key: "getFd",
    value: function () {
      var _getFd = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (this.filename) {
                  _context.next = 2;
                  break;
                }

                throw new Error('no file path specified');

              case 2:
                if (!this.fd) {
                  this.fd = this.ipcRenderer.invoke('open', this.filename, 'r');
                }

                return _context.abrupt("return", this.fd);

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getFd() {
        return _getFd.apply(this, arguments);
      }

      return getFd;
    }()
  }, {
    key: "read",
    value: function () {
      var _read = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(buffer) {
        var offset,
            length,
            position,
            fetchLength,
            fd,
            res,
            _args2 = arguments;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                offset = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : 0;
                length = _args2.length > 2 ? _args2[2] : undefined;
                position = _args2.length > 3 && _args2[3] !== undefined ? _args2[3] : 0;
                fetchLength = Math.min(buffer.length - offset, length);
                _context2.next = 6;
                return this.getFd();

              case 6:
                fd = _context2.sent;
                _context2.next = 9;
                return this.ipcRenderer.invoke('read', fd, buffer, offset, fetchLength, position);

              case 9:
                res = _context2.sent;
                // TODO: This looks like a buffer, but fails Buffer.isBuffer(), so we have
                // to coerce it. Why?
                res.buffer = Buffer.from(res.buffer); // Copy into input buffer to match node's fs.promises.read() behavior.

                res.buffer.copy(buffer);
                return _context2.abrupt("return", res);

              case 13:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function read(_x) {
        return _read.apply(this, arguments);
      }

      return read;
    }()
  }, {
    key: "readFile",
    value: function () {
      var _readFile = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
        var _,
            result,
            _args3 = arguments;

        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _ = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};

                if (this.filename) {
                  _context3.next = 3;
                  break;
                }

                throw new Error('no file path specified');

              case 3:
                _context3.next = 5;
                return this.ipcRenderer.invoke('readFile', this.filename);

              case 5:
                result = _context3.sent;
                return _context3.abrupt("return", result.byteLength !== undefined ? Buffer.from(result) : result);

              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function readFile() {
        return _readFile.apply(this, arguments);
      }

      return readFile;
    }() // todo memoize

  }, {
    key: "stat",
    value: function () {
      var _stat = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.t0 = this.ipcRenderer;
                _context4.next = 3;
                return this.getFd();

              case 3:
                _context4.t1 = _context4.sent;
                return _context4.abrupt("return", _context4.t0.invoke.call(_context4.t0, 'stat', _context4.t1));

              case 5:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function stat() {
        return _stat.apply(this, arguments);
      }

      return stat;
    }()
  }]);
  return ElectronLocalFile;
}();

exports.default = ElectronLocalFile;