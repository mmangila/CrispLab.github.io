"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InterRegionPaddingBlock = exports.ElidedBlock = exports.ContentBlock = exports.BaseBlock = exports.BlockSet = void 0;

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var BlockSet = /*#__PURE__*/function () {
  function BlockSet() {
    var blocks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    (0, _classCallCheck2.default)(this, BlockSet);
    (0, _defineProperty2.default)(this, "blocks", []);
    this.blocks = blocks;
  }

  (0, _createClass2.default)(BlockSet, [{
    key: "push",
    value: function push(block) {
      if (block instanceof ElidedBlock) {
        if (this.blocks.length) {
          var lastBlock = this.blocks[this.blocks.length - 1];

          if (lastBlock instanceof ElidedBlock) {
            lastBlock.push(block);
            return;
          }
        }
      }

      this.blocks.push(block);
    }
  }, {
    key: "getBlocks",
    value: function getBlocks() {
      return this.blocks;
    }
  }, {
    key: "getRegions",
    value: function getRegions() {
      return this.blocks.map(function (block) {
        return block.toRegion();
      });
    }
  }, {
    key: "map",
    value: function map(func, thisarg) {
      return this.blocks.map(func, thisarg);
    }
  }, {
    key: "forEach",
    value: function forEach(func, thisarg) {
      return this.blocks.forEach(func, thisarg);
    }
  }, {
    key: "length",
    get: function get() {
      return this.blocks.length;
    }
  }, {
    key: "totalWidthPx",
    get: function get() {
      return this.blocks.length ? this.blocks.map(function (blocks) {
        return blocks.widthPx;
      }).reduce(function (a, b) {
        return a + b;
      }) : 0;
    }
  }, {
    key: "totalWidthPxWithoutBorders",
    get: function get() {
      return this.blocks.length ? this.blocks.filter(function (block) {
        return block.variant !== 'boundary';
      }).map(function (blocks) {
        return blocks.widthPx;
      }).reduce(function (a, b) {
        return a + b;
      }) : 0;
    }
  }, {
    key: "offsetPx",
    get: function get() {
      return this.blocks.length ? this.blocks[0].offsetPx : 0;
    }
  }, {
    key: "contentBlocks",
    get: function get() {
      return this.blocks.filter(function (block) {
        return block instanceof ContentBlock;
      });
    }
  }, {
    key: "totalBp",
    get: function get() {
      return this.contentBlocks.map(function (block) {
        return block.end - block.start;
      }).reduce(function (a, b) {
        return a + b;
      }, 0);
    }
  }]);
  return BlockSet;
}();

exports.BlockSet = BlockSet;

var BaseBlock = /*#__PURE__*/function () {
  /**
   * a block that should be shown as filled with data
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  function BaseBlock(data) {
    (0, _classCallCheck2.default)(this, BaseBlock);
    (0, _defineProperty2.default)(this, "refName", void 0);
    (0, _defineProperty2.default)(this, "start", void 0);
    (0, _defineProperty2.default)(this, "end", void 0);
    (0, _defineProperty2.default)(this, "assemblyName", void 0);
    (0, _defineProperty2.default)(this, "key", void 0);
    (0, _defineProperty2.default)(this, "offsetPx", void 0);
    Object.assign(this, data);
    this.assemblyName = data.assemblyName;
    this.refName = data.refName;
    this.start = data.start;
    this.end = data.end;
    this.key = data.key;
    this.offsetPx = data.offsetPx;
  }
  /**
   * rename the reference sequence of this block and return a new one
   *
   * @param refName -
   * @returns either a new block with a renamed reference sequence,
   * or the same block, if the ref name is not actually different
   */


  (0, _createClass2.default)(BaseBlock, [{
    key: "renameReference",
    value: function renameReference(refName) {
      if (this.refName && refName !== this.refName) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return new this.constructor(_objectSpread(_objectSpread({}, this), {}, {
          refName: refName
        }));
      }

      return this;
    }
  }, {
    key: "toRegion",
    value: function toRegion() {
      return {
        refName: this.refName,
        start: this.start,
        end: this.end,
        assemblyName: this.assemblyName,
        reversed: this.reversed
      };
    }
  }]);
  return BaseBlock;
}();

exports.BaseBlock = BaseBlock;

var ContentBlock = /*#__PURE__*/function (_BaseBlock) {
  (0, _inherits2.default)(ContentBlock, _BaseBlock);

  var _super = _createSuper(ContentBlock);

  function ContentBlock() {
    (0, _classCallCheck2.default)(this, ContentBlock);
    return _super.apply(this, arguments);
  }

  return ContentBlock;
}(BaseBlock);
/**
 * marker block representing one or more blocks that are
 * too small to be shown at the current zoom level
 */


exports.ContentBlock = ContentBlock;

var ElidedBlock = /*#__PURE__*/function (_BaseBlock2) {
  (0, _inherits2.default)(ElidedBlock, _BaseBlock2);

  var _super2 = _createSuper(ElidedBlock);

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  function ElidedBlock(data) {
    var _this;

    (0, _classCallCheck2.default)(this, ElidedBlock);
    _this = _super2.call(this, data);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "widthPx", void 0);
    _this.widthPx = data.widthPx;
    return _this;
  }

  (0, _createClass2.default)(ElidedBlock, [{
    key: "push",
    value: function push(otherBlock) {
      this.elidedBlockCount += 1;

      if (otherBlock) {
        this.refName = '';
        this.start = 0;
        this.end = 0;
        this.widthPx += otherBlock.widthPx;
      }
    }
  }]);
  return ElidedBlock;
}(BaseBlock);
/**
 * marker block that sits between two different displayed regions
 * and provides a thick border between them
 */


exports.ElidedBlock = ElidedBlock;

var InterRegionPaddingBlock = /*#__PURE__*/function (_BaseBlock3) {
  (0, _inherits2.default)(InterRegionPaddingBlock, _BaseBlock3);

  var _super3 = _createSuper(InterRegionPaddingBlock);

  function InterRegionPaddingBlock() {
    (0, _classCallCheck2.default)(this, InterRegionPaddingBlock);
    return _super3.apply(this, arguments);
  }

  return InterRegionPaddingBlock;
}(BaseBlock);

exports.InterRegionPaddingBlock = InterRegionPaddingBlock;