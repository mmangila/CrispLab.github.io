"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calcStdFromSums = calcStdFromSums;
exports.rectifyStats = rectifyStats;
exports.calcPerBaseStats = calcPerBaseStats;
exports.scoresToStats = scoresToStats;
exports.blankStats = blankStats;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _operators = require("rxjs/operators");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/*
 * calculate standard deviation using the 'shortcut method' that accepts
 * the sum and the sum squares of the elements
 *
 * @param sum - sum(i, 1..n)
 * @param sumSquares - sum(i^2, 1..n)
 * @param n - number of elements
 * @param population - boolean: use population instead of sample correction
 * @return the estimated std deviation
 */
function calcStdFromSums(sum, sumSquares, n) {
  var population = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

  if (n === 0) {
    return 0;
  }

  var variance;

  if (population) {
    variance = sumSquares / n - sum * sum / (n * n);
  } else {
    // sample correction is n-1
    variance = sumSquares - sum * sum / n;

    if (n > 1) {
      variance /= n - 1;
    }
  }

  return variance < 0 ? 0 : Math.sqrt(variance);
}
/*
 * @param stats - a summary stats object with scoreSum, featureCount, scoreSumSquares, and basesCovered
 * @return - a summary stats object with scoreMean, scoreStdDev, and featureDensity added
 */


function rectifyStats(s) {
  return _objectSpread(_objectSpread({}, s), {}, {
    scoreMean: (s.scoreSum || 0) / (s.featureCount || s.basesCovered || 1),
    scoreStdDev: calcStdFromSums(s.scoreSum, s.scoreSumSquares, s.featureCount || s.basesCovered),
    featureDensity: (s.featureCount || 1) / s.basesCovered
  });
}
/*
 * calculates per-base scores for variable width features over a region
 * @param region - object contains start, end
 * @param features - list of features with start, end, score
 * @return array of numeric scores
 */


function calcPerBaseStats(region, features) {
  var start = region.start,
      end = region.end;
  var scores = [];
  var feats = features.sort(function (a, b) {
    return a.get('start') - b.get('start');
  });
  var pos = start;
  var currentFeat = 0;
  var i = 0;

  while (pos < end) {
    while (currentFeat < feats.length && pos >= feats[currentFeat].get('end')) {
      currentFeat += 1;
    }

    var f = feats[currentFeat];

    if (!f) {
      scores[i] = 0;
    } else if (pos >= f.get('start') && pos < f.get('end')) {
      scores[i] = f.get('score');
    } else {
      scores[i] = 0;
    }

    i += 1;
    pos += 1;
  }

  return scores;
}
/*
 * transform a list of scores to summary statistics
 * @param region - object with start, end
 * @param feats - array of features which are possibly summary features
 * @return - object with scoreMax, scoreMin, scoreSum, scoreSumSquares, etc
 */


function scoresToStats(_x, _x2) {
  return _scoresToStats.apply(this, arguments);
}

function _scoresToStats() {
  _scoresToStats = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee(region, features) {
    var start, end, _yield$features$pipe$, scoreMin, scoreMax, scoreSum, scoreSumSquares, featureCount;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            start = region.start, end = region.end;
            _context.next = 3;
            return features.pipe((0, _operators.reduce)(function (seed, f) {
              var score = f.get('score');
              seed.scoreMax = Math.max(seed.scoreMax, f.get('summary') ? f.get('maxScore') : score);
              seed.scoreMin = Math.min(seed.scoreMin, f.get('summary') ? f.get('minScore') : score);
              seed.scoreSum += score;
              seed.scoreSumSquares += score * score;
              seed.featureCount += 1;
              return seed;
            }, {
              scoreMin: Number.MAX_VALUE,
              scoreMax: Number.MIN_VALUE,
              scoreSum: 0,
              scoreSumSquares: 0,
              featureCount: 0
            })).toPromise();

          case 3:
            _yield$features$pipe$ = _context.sent;
            scoreMin = _yield$features$pipe$.scoreMin;
            scoreMax = _yield$features$pipe$.scoreMax;
            scoreSum = _yield$features$pipe$.scoreSum;
            scoreSumSquares = _yield$features$pipe$.scoreSumSquares;
            featureCount = _yield$features$pipe$.featureCount;
            return _context.abrupt("return", rectifyStats({
              scoreMax: scoreMax,
              scoreMin: scoreMin,
              scoreSum: scoreSum,
              scoreSumSquares: scoreSumSquares,
              featureCount: featureCount,
              basesCovered: end - start + 1
            }));

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _scoresToStats.apply(this, arguments);
}

function blankStats() {
  return {
    scoreMin: 0,
    scoreMax: 0,
    scoreMean: 0,
    scoreStdDev: 0,
    scoreSum: 0,
    scoreSumSquares: 0,
    featureCount: 0,
    featureDensity: 0,
    basesCovered: 0
  };
}