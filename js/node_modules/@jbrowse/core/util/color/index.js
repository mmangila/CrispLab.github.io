"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.contrastingTextColor = contrastingTextColor;
exports.emphasize = emphasize;
exports.makeContrasting = makeContrasting;
Object.defineProperty(exports, "namedColorToHex", {
  enumerable: true,
  get: function get() {
    return _cssColorsLevel.namedColorToHex;
  }
});
Object.defineProperty(exports, "isNamedColor", {
  enumerable: true,
  get: function get() {
    return _cssColorsLevel.isNamedColor;
  }
});

var _colorManipulator = require("@material-ui/core/styles/colorManipulator");

var _cssColorsLevel = require("./cssColorsLevel4");

/**
 * Algorithmically pick a contrasting text color that will
 * be visible on top of the given background color. Either
 * black or white.
 *
 * @param color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(),
 *  hsl(), hsla(), or named color
 * @returns 'black' or 'white'
 */
function contrastingTextColor(color) {
  var luminance = getLuminance(color);
  return luminance > 0.5 ? 'black' : 'white';
}
/**
 * The relative brightness of any point in a color space,
 * normalized to 0 for darkest black and 1 for lightest white.
 * Uses MUI's `getLuminance`, but adds support for named colors
 *
 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 *
 * @param color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(),
 *  hsl(), hsla(), or named color
 * @returns The relative brightness of the color in the range 0 - 1
 */


function getLuminance(color) {
  var convertedColor = (0, _cssColorsLevel.namedColorToHex)(color);
  return (0, _colorManipulator.getLuminance)(convertedColor || color);
}
/**
 * Darken or lighten a color, depending on its luminance.
 * Light colors are darkened, dark colors are lightened.
 * Uses MUI's `emphasize`, but adds support for named colors
 *
 * @param color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(),
 * hsl(), hsla(), or named color
 * @param coefficient - multiplier in the range 0 - 1, defaults to 0.15
 * @returns A CSS color string. Hex input values are returned as rgb
 */


function emphasize(color) {
  var coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.15;
  var convertedColor = (0, _cssColorsLevel.namedColorToHex)(color);
  return (0, _colorManipulator.emphasize)(convertedColor || color, coefficient);
}

function makeContrasting(foreground) {
  var background = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'white';
  var minContrastRatio = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3;
  var convertedForeground = (0, _cssColorsLevel.namedColorToHex)(foreground) || foreground;
  var convertedBackground = (0, _cssColorsLevel.namedColorToHex)(background) || background;
  var backgroundLuminance = getLuminance(convertedBackground);
  var contrastRatio = (0, _colorManipulator.getContrastRatio)(convertedForeground, convertedBackground);
  var originalColor = convertedForeground;
  var coefficient = 0.05;

  while (contrastRatio < minContrastRatio) {
    convertedForeground = backgroundLuminance > 0.5 ? (0, _colorManipulator.darken)(originalColor, coefficient) : (0, _colorManipulator.lighten)(originalColor, coefficient);
    coefficient += 0.05;
    contrastRatio = (0, _colorManipulator.getContrastRatio)(convertedForeground, convertedBackground);
  }

  return convertedForeground;
}