"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _Symbol$iterator;

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

_Symbol$iterator = Symbol.iterator;

// takes an array or Map or Set (anything iterable with values()) of Maps
// and lets you query them as one Map
var CompositeMap = /*#__PURE__*/function () {
  function CompositeMap(submaps) {
    (0, _classCallCheck2.default)(this, CompositeMap);
    (0, _defineProperty2.default)(this, "submaps", void 0);
    this.submaps = submaps;
  }

  (0, _createClass2.default)(CompositeMap, [{
    key: "has",
    value: function has(id) {
      var _iterator = _createForOfIteratorHelper(this.submaps.values()),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var submap = _step.value;

          if (submap.has(id)) {
            return true;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return false;
    }
  }, {
    key: "get",
    value: function get(id) {
      var _iterator2 = _createForOfIteratorHelper(this.submaps.values()),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var submap = _step2.value;

          if (submap.has(id)) {
            return submap.get(id);
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      return undefined;
    }
  }, {
    key: "values",
    value: /*#__PURE__*/regeneratorRuntime.mark(function values() {
      var _iterator3, _step3, key;

      return regeneratorRuntime.wrap(function values$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _iterator3 = _createForOfIteratorHelper(this.keys());
              _context.prev = 1;

              _iterator3.s();

            case 3:
              if ((_step3 = _iterator3.n()).done) {
                _context.next = 9;
                break;
              }

              key = _step3.value;
              _context.next = 7;
              return this.get(key);

            case 7:
              _context.next = 3;
              break;

            case 9:
              _context.next = 14;
              break;

            case 11:
              _context.prev = 11;
              _context.t0 = _context["catch"](1);

              _iterator3.e(_context.t0);

            case 14:
              _context.prev = 14;

              _iterator3.f();

              return _context.finish(14);

            case 17:
            case "end":
              return _context.stop();
          }
        }
      }, values, this, [[1, 11, 14, 17]]);
    })
  }, {
    key: "keys",
    value: /*#__PURE__*/regeneratorRuntime.mark(function keys() {
      var keys, _iterator4, _step4, submap, _iterator6, _step6, key, _iterator5, _step5, _key;

      return regeneratorRuntime.wrap(function keys$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              keys = new Set();
              _iterator4 = _createForOfIteratorHelper(this.submaps.values());

              try {
                for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                  submap = _step4.value;
                  _iterator6 = _createForOfIteratorHelper(submap.keys());

                  try {
                    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                      key = _step6.value;
                      keys.add(key);
                    }
                  } catch (err) {
                    _iterator6.e(err);
                  } finally {
                    _iterator6.f();
                  }
                }
              } catch (err) {
                _iterator4.e(err);
              } finally {
                _iterator4.f();
              }

              _iterator5 = _createForOfIteratorHelper(keys);
              _context2.prev = 4;

              _iterator5.s();

            case 6:
              if ((_step5 = _iterator5.n()).done) {
                _context2.next = 12;
                break;
              }

              _key = _step5.value;
              _context2.next = 10;
              return _key;

            case 10:
              _context2.next = 6;
              break;

            case 12:
              _context2.next = 17;
              break;

            case 14:
              _context2.prev = 14;
              _context2.t0 = _context2["catch"](4);

              _iterator5.e(_context2.t0);

            case 17:
              _context2.prev = 17;

              _iterator5.f();

              return _context2.finish(17);

            case 20:
            case "end":
              return _context2.stop();
          }
        }
      }, keys, this, [[4, 14, 17, 20]]);
    })
  }, {
    key: "find",
    value: function find(f) {
      var _iterator7 = _createForOfIteratorHelper(this.submaps.values()),
          _step7;

      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var submap = _step7.value;

          var _iterator8 = _createForOfIteratorHelper(submap.values()),
              _step8;

          try {
            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
              var value = _step8.value;
              var found = f(value);

              if (found) {
                return value;
              }
            }
          } catch (err) {
            _iterator8.e(err);
          } finally {
            _iterator8.f();
          }
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }

      return undefined;
    }
  }, {
    key: _Symbol$iterator,
    value: /*#__PURE__*/regeneratorRuntime.mark(function value() {
      var _iterator9, _step9, key;

      return regeneratorRuntime.wrap(function value$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _iterator9 = _createForOfIteratorHelper(this.keys());
              _context3.prev = 1;

              _iterator9.s();

            case 3:
              if ((_step9 = _iterator9.n()).done) {
                _context3.next = 9;
                break;
              }

              key = _step9.value;
              _context3.next = 7;
              return [key, this.get(key)];

            case 7:
              _context3.next = 3;
              break;

            case 9:
              _context3.next = 14;
              break;

            case 11:
              _context3.prev = 11;
              _context3.t0 = _context3["catch"](1);

              _iterator9.e(_context3.t0);

            case 14:
              _context3.prev = 14;

              _iterator9.f();

              return _context3.finish(14);

            case 17:
            case "end":
              return _context3.stop();
          }
        }
      }, value, this, [[1, 11, 14, 17]]);
    })
  }, {
    key: "entries",
    value: /*#__PURE__*/regeneratorRuntime.mark(function entries() {
      var _iterator10, _step10, k;

      return regeneratorRuntime.wrap(function entries$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _iterator10 = _createForOfIteratorHelper(this.keys());
              _context4.prev = 1;

              _iterator10.s();

            case 3:
              if ((_step10 = _iterator10.n()).done) {
                _context4.next = 9;
                break;
              }

              k = _step10.value;
              _context4.next = 7;
              return [k, this.get(k)];

            case 7:
              _context4.next = 3;
              break;

            case 9:
              _context4.next = 14;
              break;

            case 11:
              _context4.prev = 11;
              _context4.t0 = _context4["catch"](1);

              _iterator10.e(_context4.t0);

            case 14:
              _context4.prev = 14;

              _iterator10.f();

              return _context4.finish(14);

            case 17:
            case "end":
              return _context4.stop();
          }
        }
      }, entries, this, [[1, 11, 14, 17]]);
    })
  }]);
  return CompositeMap;
}();

exports.default = CompositeMap;