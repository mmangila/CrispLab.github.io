/// <reference types="react" />
import { Instance, SnapshotIn, IAnyStateTreeNode } from 'mobx-state-tree';
import { AnyConfigurationModel } from '../../configuration/configurationSchema';
import assemblyManager from '../../assemblyManager';
import textSearchManager from '../../TextSearch/TextSearchManager';
import { MenuItem } from '../../ui';
import { NoAssemblyRegion as MUNoAssemblyRegion, Region as MUIRegion, LocalPathLocation as MULocalPathLocation, UriLocation as MUUriLocation, BlobLocation as MUBlobLocation } from './mst';
import RpcManager from '../../rpc/RpcManager';
import { Feature } from '../simpleFeature';
export * from './util';
/** abstract type for a model that contains multiple views */
export interface AbstractViewContainer {
    views: AbstractViewModel[];
    removeView(view: AbstractViewModel): void;
    addView(typeName: string, initialState: Record<string, unknown>): void;
}
export declare function isViewContainer(thing: unknown): thing is AbstractViewContainer;
export declare type NotificationLevel = 'error' | 'info' | 'warning' | 'success';
export declare type AssemblyManager = Instance<ReturnType<typeof assemblyManager>>;
export declare type TextSearchManager = Instance<ReturnType<typeof textSearchManager>>;
export interface BasePlugin {
    version?: string;
    name: string;
    url?: string;
}
export interface JBrowsePlugin {
    name: string;
    authors: string[];
    description: string;
    location: string;
    url: string;
    license: string;
    image?: string;
}
export declare type DialogComponentType = React.LazyExoticComponent<React.FC<any>> | React.FC<any>;
/** minimum interface that all session state models must implement */
export interface AbstractSessionModel extends AbstractViewContainer {
    setSelection(feature: Feature): void;
    clearSelection(): void;
    configuration: AnyConfigurationModel;
    rpcManager: RpcManager;
    assemblyNames: string[];
    assemblies: AnyConfigurationModel[];
    selection?: unknown;
    duplicateCurrentSession?(): void;
    notify(message: string, level?: NotificationLevel): void;
    assemblyManager: AssemblyManager;
    version: string;
    getTrackActionMenuItems?: Function;
    addAssembly?: Function;
    removeAssembly?: Function;
    textSearchManager?: TextSearchManager;
    connections: AnyConfigurationModel[];
    deleteConnection?: Function;
    sessionConnections?: AnyConfigurationModel[];
    connectionInstances?: {
        name: string;
    }[];
    makeConnection?: Function;
    adminMode?: boolean;
    showWidget?: Function;
    addWidget?: Function;
    addTrackConf?: Function;
    DialogComponent?: DialogComponentType;
    DialogProps: any;
    setDialogComponent: (dlg?: DialogComponentType, props?: any) => void;
}
export declare function isSessionModel(thing: unknown): thing is AbstractSessionModel;
/** abstract interface for a session allows editing configurations */
export interface SessionWithConfigEditing extends AbstractSessionModel {
    editConfiguration(configuration: AnyConfigurationModel): void;
}
export declare function isSessionModelWithConfigEditing(thing: unknown): thing is SessionWithConfigEditing;
/** abstract interface for a session that manages widgets */
export interface SessionWithWidgets extends AbstractSessionModel {
    visibleWidget?: {
        id: string;
    };
    widgets?: unknown[];
    addWidget(typeName: string, id: string, initialState?: Record<string, unknown>, configuration?: {
        type: string;
    }): void;
    showWidget(widget: unknown): void;
}
export declare function isSessionModelWithWidgets(thing: unknown): thing is SessionWithWidgets;
export interface SessionWithSessionPlugins extends AbstractSessionModel {
    sessionPlugins: JBrowsePlugin[];
    addSessionPlugin: Function;
    removeSessionPlugin: Function;
}
export declare function isSessionWithSessionPlugins(thing: unknown): thing is SessionWithSessionPlugins;
/** abstract interface for a session that manages a global selection */
export interface SelectionContainer extends AbstractSessionModel {
    selection?: unknown;
    setSelection(thing: unknown): void;
}
export declare function isSelectionContainer(thing: unknown): thing is SelectionContainer;
/** minimum interface that all view state models must implement */
export interface AbstractViewModel {
    id: string;
    type: string;
    width: number;
    setWidth(width: number): void;
}
export declare function isViewModel(thing: unknown): thing is AbstractViewModel;
declare type AbstractTrackModel = {};
export declare function isTrackModel(thing: unknown): thing is AbstractTrackModel;
export interface AbstractDisplayModel {
    id: string;
    parentTrack: AbstractTrackModel;
    renderDelay: number;
    rendererType: any;
    cannotBeRenderedReason?: string;
}
export declare function isDisplayModel(thing: unknown): thing is AbstractDisplayModel;
export interface TrackViewModel extends AbstractViewModel {
    showTrack(trackId: string): void;
    hideTrack(trackId: string): void;
}
export declare function isTrackViewModel(thing: unknown): thing is TrackViewModel;
/** minimum interface for the root MST model of a JBrowse app */
export interface AbstractRootModel {
    jbrowse: IAnyStateTreeNode;
    session?: AbstractSessionModel;
    setDefaultSession?(): void;
    adminMode?: boolean;
}
/** root model with more included for the heavier JBrowse web and desktop app */
export interface AppRootModel extends AbstractRootModel {
    isAssemblyEditing: boolean;
    isDefaultSessionEditing: boolean;
    setAssemblyEditing: (arg: boolean) => boolean;
    setDefaultSessionEditing: (arg: boolean) => boolean;
}
/** a root model that manages global menus */
export interface AbstractMenuManager {
    appendMenu(menuName: string): void;
    insertMenu(menuName: string, position: number): number;
    insertInMenu(menuName: string, menuItem: MenuItem, position: number): number;
    appendToMenu(menuName: string, menuItem: MenuItem): number;
    appendToSubMenu(menuPath: string[], menuItem: MenuItem): number;
    insertInSubMenu(menuPath: string[], menuItem: MenuItem, position: number): number;
}
export declare function isAbstractMenuManager(thing: unknown): thing is AbstractMenuManager;
export interface NoAssemblyRegion extends SnapshotIn<typeof MUNoAssemblyRegion> {
}
export interface Region extends SnapshotIn<typeof MUIRegion> {
}
export interface LocalPathLocation extends SnapshotIn<typeof MULocalPathLocation> {
}
export interface UriLocation extends SnapshotIn<typeof MUUriLocation> {
}
export interface BlobLocation extends SnapshotIn<typeof MUBlobLocation> {
}
export declare type FileLocation = LocalPathLocation | UriLocation | BlobLocation;
export declare type PreUriLocation = {
    uri: string;
};
export declare type PreLocalPathLocation = {
    localPath: string;
};
export declare type PreBlobLocation = {
    blob: File;
};
export declare type PreFileLocation = PreUriLocation | PreLocalPathLocation | PreBlobLocation;
