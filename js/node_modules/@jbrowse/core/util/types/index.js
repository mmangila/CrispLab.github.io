"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  isViewContainer: true,
  isSessionModel: true,
  isSessionModelWithConfigEditing: true,
  isSessionModelWithWidgets: true,
  isSessionWithSessionPlugins: true,
  isSelectionContainer: true,
  isViewModel: true,
  isTrackModel: true,
  isDisplayModel: true,
  isTrackViewModel: true,
  isAbstractMenuManager: true
};
exports.isViewContainer = isViewContainer;
exports.isSessionModel = isSessionModel;
exports.isSessionModelWithConfigEditing = isSessionModelWithConfigEditing;
exports.isSessionModelWithWidgets = isSessionModelWithWidgets;
exports.isSessionWithSessionPlugins = isSessionWithSessionPlugins;
exports.isSelectionContainer = isSelectionContainer;
exports.isViewModel = isViewModel;
exports.isTrackModel = isTrackModel;
exports.isDisplayModel = isDisplayModel;
exports.isTrackViewModel = isTrackViewModel;
exports.isAbstractMenuManager = isAbstractMenuManager;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _mobxStateTree = require("mobx-state-tree");

var _util = require("./util");

Object.keys(_util).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _util[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _util[key];
    }
  });
});

function isViewContainer(thing) {
  return (0, _mobxStateTree.isStateTreeNode)(thing) && 'removeView' in thing && 'addView' in thing && 'views' in thing;
}

function isSessionModel(thing) {
  return (0, _typeof2.default)(thing) === 'object' && thing !== null && 'rpcManager' in thing && 'configuration' in thing;
}
/** abstract interface for a session allows editing configurations */


function isSessionModelWithConfigEditing(thing) {
  return isSessionModel(thing) && 'editConfiguration' in thing;
}
/** abstract interface for a session that manages widgets */


function isSessionModelWithWidgets(thing) {
  return isSessionModel(thing) && 'widgets' in thing;
}

function isSessionWithSessionPlugins(thing) {
  return isSessionModel(thing) && 'sessionPlugins' in thing;
}
/** abstract interface for a session that manages a global selection */


function isSelectionContainer(thing) {
  return (0, _typeof2.default)(thing) === 'object' && thing !== null && 'selection' in thing && 'setSelection' in thing;
}
/** minimum interface that all view state models must implement */


function isViewModel(thing) {
  return (0, _typeof2.default)(thing) === 'object' && thing !== null && 'width' in thing && 'setWidth' in thing;
}

function isTrackModel(thing) {
  return (0, _typeof2.default)(thing) === 'object' && thing !== null && 'configuration' in thing && // @ts-ignore
  thing.configuration.trackId;
}

function isDisplayModel(thing) {
  return (0, _typeof2.default)(thing) === 'object' && thing !== null && 'configuration' in thing && // @ts-ignore
  thing.configuration.displayId;
}

function isTrackViewModel(thing) {
  return (0, _typeof2.default)(thing) === 'object' && thing !== null && 'showTrack' in thing && 'hideTrack' in thing;
}
/** minimum interface for the root MST model of a JBrowse app */


function isAbstractMenuManager(thing) {
  return (0, _typeof2.default)(thing) === 'object' && thing !== null && 'appendMenu' in thing && 'appendToSubMenu' in thing;
} // Empty interfaces required by mobx-state-tree
// See https://mobx-state-tree.js.org/tips/typescript#using-a-mst-type-at-design-time

/* eslint-disable @typescript-eslint/no-empty-interface */