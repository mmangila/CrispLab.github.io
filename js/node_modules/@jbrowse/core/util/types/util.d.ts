/// <reference types="react" />
import { IAnyModelType, Instance } from 'mobx-state-tree';
import PluginManager from '../../PluginManager';
/**
 * Obtain the return type of a constructor function type.
 * Differs from core Typescript InstanceType in that it returns never if not matched.
 */
export declare type InstanceTypeRestrictive<CONSTRUCTOR extends new (...args: any[]) => any> = CONSTRUCTOR extends new (...args: any[]) => infer CLASS ? CLASS : never;
/** extracts the class type from a factory function that returns a constructor */
export declare type ClassReturnedBy<FACT extends (pm: PluginManager) => any> = InstanceTypeRestrictive<ReturnType<FACT>>;
/** A react component with any props. Consider using something more specific if possible */
export declare type AnyReactComponentType = React.ComponentType<any>;
/** get the type that a predicate asserts */
export declare type TypeTestedByPredicate<PREDICATE extends (thing: any) => boolean> = PREDICATE extends (thing: any) => thing is infer TYPE ? TYPE : never;
/** get the type for an instance of an MST model in a PM factory function */
export declare type InstanceOfModelReturnedBy<FACTORY extends (pm: PluginManager) => IAnyModelType> = Instance<ReturnType<FACTORY>>;
