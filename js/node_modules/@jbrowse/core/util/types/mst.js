"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FileLocation = exports.UriLocation = exports.UriLocationRaw = exports.BlobLocation = exports.LocalPathLocation = exports.Region = exports.NoAssemblyRegion = exports.PropTypes = exports.ElementId = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _shortid = _interopRequireDefault(require("shortid"));

var _mobxStateTree = require("mobx-state-tree");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _mobxReact = require("mobx-react");

var ElementId = _mobxStateTree.types.optional(_mobxStateTree.types.identifier, _shortid.default.generate); // PropTypes that are useful when working with instances of these in react components


exports.ElementId = ElementId;
var PropTypes = {
  Region: _propTypes.default.shape({
    refName: _propTypes.default.string.isRequired,
    start: _propTypes.default.number.isRequired,
    end: _propTypes.default.number.isRequired
  }),
  ConfigSchema: _mobxReact.PropTypes.objectOrObservableObject,
  Feature: _propTypes.default.shape({
    get: _propTypes.default.func.isRequired,
    id: _propTypes.default.func.isRequired
  })
};
exports.PropTypes = PropTypes;

var NoAssemblyRegion = _mobxStateTree.types.model('NoAssemblyRegion', {
  refName: _mobxStateTree.types.string,
  start: _mobxStateTree.types.number,
  end: _mobxStateTree.types.number,
  reversed: _mobxStateTree.types.optional(_mobxStateTree.types.boolean, false)
}).actions(function (self) {
  return {
    setRefName: function setRefName(newRefName) {
      self.refName = newRefName;
    }
  };
});

exports.NoAssemblyRegion = NoAssemblyRegion;

var Region = _mobxStateTree.types.compose('Region', NoAssemblyRegion, _mobxStateTree.types.model({
  assemblyName: _mobxStateTree.types.string
}));

exports.Region = Region;

var LocalPathLocation = _mobxStateTree.types.model('LocalPathLocation', {
  localPath: _mobxStateTree.types.string // TODO: refine

});

exports.LocalPathLocation = LocalPathLocation;

var BlobLocation = _mobxStateTree.types.model('BlobLocation', {
  name: _mobxStateTree.types.string,
  // TODO: refine
  blobId: _mobxStateTree.types.string
});

exports.BlobLocation = BlobLocation;

var UriLocationRaw = _mobxStateTree.types.model('UriLocation', {
  uri: _mobxStateTree.types.string,
  // TODO: refine
  baseUri: _mobxStateTree.types.maybe(_mobxStateTree.types.string)
});

exports.UriLocationRaw = UriLocationRaw;

var UriLocation = _mobxStateTree.types.snapshotProcessor(UriLocationRaw, {
  postProcessor: function postProcessor(snap) {
    var baseUri = snap.baseUri,
        rest = (0, _objectWithoutProperties2.default)(snap, ["baseUri"]);

    if (!baseUri) {
      return rest;
    }

    return snap;
  }
});

exports.UriLocation = UriLocation;

var FileLocation = _mobxStateTree.types.union(LocalPathLocation, UriLocation, BlobLocation);

exports.FileLocation = FileLocation;