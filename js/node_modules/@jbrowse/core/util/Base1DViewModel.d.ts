import { Instance } from 'mobx-state-tree';
import { Feature } from './simpleFeature';
import { Region as IRegion } from './types';
export interface BpOffset {
    refName?: string;
    index: number;
    offset: number;
    start?: number;
    end?: number;
}
declare const Base1DView: import("mobx-state-tree").IModelType<{
    displayedRegions: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
        refName: import("mobx-state-tree").ISimpleType<string>;
        start: import("mobx-state-tree").ISimpleType<number>;
        end: import("mobx-state-tree").ISimpleType<number>;
        reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
    } & {
        assemblyName: import("mobx-state-tree").ISimpleType<string>;
    }, {
        setRefName(newRefName: string): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    bpPerPx: import("mobx-state-tree").IType<number | undefined, number, number>;
    offsetPx: import("mobx-state-tree").IType<number | undefined, number, number>;
    interRegionPaddingWidth: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
    minimumBlockWidth: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
}, {
    features: Feature[] | undefined;
    volatileWidth: number;
} & {
    setDisplayedRegions(regions: IRegion[]): void;
    setBpPerPx(val: number): void;
    setVolatileWidth(width: number): void;
} & {
    readonly width: number;
    readonly displayedRegionsTotalPx: number;
    readonly maxOffset: number;
    readonly minOffset: number;
    readonly totalBp: number;
    /**
     * calculates the Px at which coord is found.
     *
     * @param refName - string, refName of region
     * @param coord - number, bp to be translated to Px
     * @param regionNumber - number, index of displayedRegion in displayedRegions array
     */
    bpToPx({ refName, coord, regionNumber, }: {
        refName: string;
        coord: number;
        regionNumber?: number | undefined;
    }): number | undefined;
    pxToBp(px: number): {
        oob: boolean;
        coord: number;
        offset: number;
        index: number;
        refName: string;
        start: number;
        end: number;
        reversed: boolean;
        assemblyName: string;
    } | {
        coord: number;
        index: number;
        start: number;
        refName: string;
        oob: boolean;
        assemblyName: string;
        offset: number;
        reversed: boolean;
    };
} & {
    readonly dynamicBlocks: import("./blockTypes").BlockSet;
    readonly staticBlocks: import("./blockTypes").BlockSet;
    readonly currBp: number;
} & {
    setFeatures(features: Feature[]): void;
    zoomToDisplayedRegions(leftPx: BpOffset | undefined, rightPx: BpOffset | undefined): void;
    showAllRegions(): void;
    /**
     * offset is the base-pair-offset in the displayed region, index is the index of the
     * displayed region in the linear genome view
     *
     * @param start - object as `{start, end, offset, index}`
     * @param end - object as `{start, end, offset, index}`
     */
    moveTo(start: BpOffset, end: BpOffset): void;
    zoomOut(): void;
    zoomIn(): void;
    zoomTo(newBpPerPx: number, offset?: number): void;
    scroll(distance: number): number;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export declare type Base1DViewStateModel = typeof Base1DView;
export declare type Base1DViewModel = Instance<Base1DViewStateModel>;
export default Base1DView;
