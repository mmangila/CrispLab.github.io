"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _calculateStaticBlocks = _interopRequireDefault(require("./calculateStaticBlocks"));

describe('block calculation', function () {
  it('can calculate some blocks 1', function () {
    var blocks1 = (0, _calculateStaticBlocks.default)({
      bpPerPx: 1,
      width: 800,
      offsetPx: 0,
      displayedRegions: [{
        assemblyName: 'test',
        refName: 'ctgA',
        start: 0,
        end: 10000
      }],
      minimumBlockWidth: 20,
      interRegionPaddingWidth: 2
    });
    var blocks2 = (0, _calculateStaticBlocks.default)({
      bpPerPx: 1,
      width: 800,
      offsetPx: 0,
      displayedRegions: [{
        assemblyName: 'test',
        refName: 'ctgA',
        start: 0,
        end: 10000
      }],
      minimumBlockWidth: 20,
      interRegionPaddingWidth: 2
    });
    expect(blocks1).toMatchSnapshot();
    expect(blocks1).toEqual(blocks2);
  });
  it('can calculate some blocks 2', function () {
    var blocks = (0, _calculateStaticBlocks.default)({
      bpPerPx: 1,
      width: 800,
      offsetPx: 30,
      displayedRegions: [{
        assemblyName: 'test',
        refName: 'ctgA',
        start: 0,
        end: 100
      }, {
        assemblyName: 'test',
        refName: 'ctgB',
        start: 100,
        end: 200
      }],
      minimumBlockWidth: 20,
      interRegionPaddingWidth: 2
    });
    expect(blocks).toMatchSnapshot();
  });
  it('can calculate some blocks (should be empty because offscreen to the right)', function () {
    var blockSet = (0, _calculateStaticBlocks.default)({
      bpPerPx: 1,
      width: 800,
      offsetPx: 2000,
      displayedRegions: [{
        assemblyName: 'test',
        refName: 'ctgA',
        start: 0,
        end: 100
      }, {
        assemblyName: 'test',
        refName: 'ctgB',
        start: 100,
        end: 200
      }],
      minimumBlockWidth: 20,
      interRegionPaddingWidth: 2
    });
    expect(blockSet.getBlocks()).toEqual([]);
  });
  it('can calculate some blocks (should be empty because offscreen to the left)', function () {
    var blockSet = (0, _calculateStaticBlocks.default)({
      bpPerPx: 1,
      width: 800,
      offsetPx: -2000,
      displayedRegions: [{
        assemblyName: 'test',
        refName: 'ctgA',
        start: 0,
        end: 100
      }, {
        assemblyName: 'test',
        refName: 'ctgB',
        start: 100,
        end: 200
      }],
      minimumBlockWidth: 20,
      interRegionPaddingWidth: 2
    });
    expect(blockSet.getBlocks()).toEqual([]);
  });
  it('can calculate some blocks 5', function () {
    var blocks = (0, _calculateStaticBlocks.default)({
      bpPerPx: 1,
      width: 800,
      offsetPx: 5000,
      displayedRegions: [{
        assemblyName: 'test',
        refName: 'ctgA',
        start: 0,
        end: 10000
      }, {
        assemblyName: 'test',
        refName: 'ctgB',
        start: 100,
        end: 10000
      }],
      minimumBlockWidth: 20,
      interRegionPaddingWidth: 2
    });
    expect(blocks).toMatchSnapshot();
  });
  it('can calculate some blocks 6', function () {
    var blockSet = (0, _calculateStaticBlocks.default)({
      bpPerPx: 1,
      width: 800,
      offsetPx: 0,
      displayedRegions: [{
        assemblyName: 'test',
        refName: 'ctgA',
        start: 0,
        end: 200
      }, {
        assemblyName: 'test',
        refName: 'ctgB',
        start: 0,
        end: 1000
      }],
      minimumBlockWidth: 20,
      interRegionPaddingWidth: 2
    });
    expect(blockSet).toMatchSnapshot();
    expect(blockSet.blocks[1].offsetPx).toBe(0);
  });
  it('can calculate some blocks 7', function () {
    var blocks = (0, _calculateStaticBlocks.default)({
      bpPerPx: 1,
      width: 800,
      offsetPx: 801,
      displayedRegions: [{
        assemblyName: 'test',
        refName: 'ctgA',
        start: 0,
        end: 200
      }, {
        assemblyName: 'test',
        refName: 'ctgB',
        start: 0,
        end: 1000
      }],
      minimumBlockWidth: 20,
      interRegionPaddingWidth: 2
    });
    expect(blocks).toMatchSnapshot();
  });
  it('can calculate some blocks 8', function () {
    var blocks = (0, _calculateStaticBlocks.default)({
      bpPerPx: 1,
      width: 800,
      offsetPx: 1600,
      displayedRegions: [{
        assemblyName: 'test',
        refName: 'ctgA',
        start: 0,
        end: 200
      }, {
        assemblyName: 'test',
        refName: 'ctgB',
        start: 0,
        end: 10000000
      }],
      minimumBlockWidth: 20,
      interRegionPaddingWidth: 2
    });
    expect(blocks).toMatchSnapshot();
  });
  it('can calculate some blocks 9', function () {
    var blockSet = (0, _calculateStaticBlocks.default)({
      width: 800,
      offsetPx: 1069,
      bpPerPx: 2,
      displayedRegions: [{
        assemblyName: 'test',
        refName: 'ctgA',
        start: 0,
        end: 50000
      }, {
        assemblyName: 'test',
        refName: 'ctgB',
        start: 0,
        end: 300
      }],
      minimumBlockWidth: 20,
      interRegionPaddingWidth: 2
    });
    expect(blockSet).toMatchSnapshot();
  });
  it('can calculate some blocks 10', function () {
    var blockSet = (0, _calculateStaticBlocks.default)({
      width: 800,
      offsetPx: 0,
      bpPerPx: 0.05,
      displayedRegions: [{
        assemblyName: 'test',
        refName: 'ctgA',
        start: 100,
        end: 200
      }, {
        assemblyName: 'test',
        refName: 'ctgA',
        start: 300,
        end: 400
      }],
      minimumBlockWidth: 20,
      interRegionPaddingWidth: 2
    }); // console.log(JSON.stringify(blockSet.blocks, null, '  '))

    expect(blockSet.blocks[1].offsetPx).toBe(0);
    expect(blockSet.blocks).toMatchSnapshot();
  });
});
describe('reverse block calculation', function () {
  test('1', function () {
    var blocks = (0, _calculateStaticBlocks.default)({
      bpPerPx: 1,
      width: 800,
      offsetPx: 0,
      displayedRegions: [{
        assemblyName: 'test',
        refName: 'ctgA',
        start: 0,
        end: 10000,
        reversed: true
      }],
      minimumBlockWidth: 20,
      interRegionPaddingWidth: 2
    });
    expect(blocks).toMatchSnapshot();
  });
});
describe('reversed displayed regions', function () {
  test('without elided region', function () {
    var blocks = (0, _calculateStaticBlocks.default)({
      bpPerPx: 1,
      width: 800,
      offsetPx: 0,
      displayedRegions: [{
        assemblyName: 'test',
        refName: 'ctgA',
        start: 100,
        end: 200,
        reversed: true
      }, {
        assemblyName: 'test',
        refName: 'ctgA',
        start: 500,
        end: 600,
        reversed: true
      }],
      minimumBlockWidth: 20,
      interRegionPaddingWidth: 2
    });
    expect(blocks).toMatchSnapshot();
  });
  test('with elided region', function () {
    var blocks = (0, _calculateStaticBlocks.default)({
      bpPerPx: 1,
      width: 800,
      offsetPx: 0,
      minimumBlockWidth: 2,
      displayedRegions: [{
        assemblyName: 'test',
        refName: 'ctgA',
        start: 0,
        end: 1,
        reversed: true
      }, {
        assemblyName: 'test',
        refName: 'ctgA',
        start: 0,
        end: 10000,
        reversed: true
      }],
      interRegionPaddingWidth: 2
    }, true, true, 1, 800);
    expect(blocks).toMatchSnapshot();
  });
});