"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _jexl = _interopRequireDefault(require("jexl"));

function _default() {
  var j = new _jexl.default.Jexl(); // someday will make sure all of configs callbacks are added in, including
  // ones passed in
  // below are core functions

  j.addFunction('get', function (feature, data) {
    return feature.get(data);
  });
  j.addFunction('id', function (feature) {
    return feature.id();
  }); // let user cast a jexl type into a javascript type
  // eslint-disable-next-line @typescript-eslint/no-explicit-any

  j.addFunction('cast', function (arg) {
    return arg;
  }); // logging

  j.addFunction('log', function (thing) {
    // eslint-disable-next-line no-console
    console.log(thing);
    return thing;
  }); // math
  // addfunction added in jexl 2.3 but types/jexl still on 2.2

  j.addFunction('max', Math.max);
  j.addFunction('min', Math.min);
  j.addFunction('sqrt', Math.sqrt);
  j.addFunction('ceil', Math.ceil);
  j.addFunction('floor', Math.floor);
  j.addFunction('round', Math.round);
  j.addFunction('abs', Math.abs);
  j.addFunction('parseInt', Number.parseInt); // string

  j.addFunction('split', function (str, char) {
    return str.split(char);
  });
  j.addFunction('charAt', function (str, index) {
    return str.charAt(index);
  });
  j.addFunction('charCodeAt', function (str, index) {
    return str.charCodeAt(index);
  });
  j.addFunction('codePointAt', function (str, pos) {
    return str.codePointAt(pos);
  });
  j.addFunction('startsWith', function (str, searchStr, length) {
    return str.startsWith(searchStr, length);
  });
  j.addFunction('endsWith', function (str, searchStr, length) {
    return str.endsWith(searchStr, length);
  });
  j.addFunction('padEnd', function (str, targetLength, padString) {
    return str.padEnd(targetLength, padString);
  });
  j.addFunction('padStart', function (str, targetLength, fillString) {
    return str.padStart(targetLength, fillString);
  });
  j.addFunction('repeat', function (str, count) {
    return str.repeat(count);
  });
  j.addFunction('replace', function (str, match, newSubStr) {
    return str.replace(match, newSubStr);
  });
  j.addFunction('replaceAll', function (str, match, newSubStr) {
    return str.replaceAll(match, newSubStr);
  });
  j.addFunction('slice', function (str, start, end) {
    return str.slice(start, end);
  });
  j.addFunction('startsWith', function (str, searchStr, position) {
    return str.startsWith(searchStr, position);
  });
  j.addFunction('substring', function (str, start, end) {
    return str.substring(start, end);
  });
  j.addFunction('toLowerCase', function (str) {
    return str.toLowerCase();
  });
  j.addFunction('toUpperCase', function (str) {
    return str.toUpperCase();
  });
  j.addFunction('trim', function (str) {
    str.trim();
  });
  j.addFunction('trimEnd', function (str) {
    return str.trimEnd();
  });
  j.addFunction('trimStart', function (str) {
    return str.trimStart();
  });
  j.addFunction('getTag', function (feature, str) {
    var tags = feature.get('tags');
    return tags ? tags[str] : feature.get(str);
  });
  j.addBinaryOp('&', 15, function (a, b) {
    return a & b;
  });
  return j;
}