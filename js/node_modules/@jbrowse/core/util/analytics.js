"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.writeAWSAnalytics = writeAWSAnalytics;
exports.writeGAAnalytics = writeGAAnalytics;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _configuration = require("../configuration");

/* eslint-disable @typescript-eslint/no-explicit-any */
function writeAWSAnalytics(_x, _x2, _x3) {
  return _writeAWSAnalytics.apply(this, arguments);
}

function _writeAWSAnalytics() {
  _writeAWSAnalytics = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee(rootModel, initialTimeStamp, sessionQuery) {
    var url, multiAssemblyTracks, savedSessionCount, config, session, ver, tracks, assemblies, plugins, stats, qs;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            url = 'https://analytics.jbrowse.org/api/v1';
            multiAssemblyTracks = rootModel.jbrowse.tracks.filter(function (track) {
              return ((0, _configuration.readConfObject)(track, 'assemblyNames') || []).length > 1;
            }).length;
            savedSessionCount = Object.keys(localStorage).filter(function (name) {
              return name.includes('localSaved-');
            }).length;
            config = rootModel.jbrowse, session = rootModel.session, ver = rootModel.version;
            tracks = config.tracks, assemblies = config.assemblies, plugins = config.plugins; // stats to be recorded in db

            stats = {
              ver: ver,
              'plugins-count': (plugins === null || plugins === void 0 ? void 0 : plugins.length) || 0,
              'plugin-names': plugins === null || plugins === void 0 ? void 0 : plugins.map(function (p) {
                return p.name;
              }).join(','),
              'assemblies-count': assemblies.length,
              'tracks-count': tracks.length,
              'session-tracks-count': (session === null || session === void 0 ? void 0 : session.sessionTracks.length) || 0,
              'open-views': (session === null || session === void 0 ? void 0 : session.views.length) || 0,
              'synteny-tracks-count': multiAssemblyTracks,
              'saved-sessions-count': savedSessionCount,
              // field if existing session param in query before autogenerated param
              'existing-session-param-type': (sessionQuery === null || sessionQuery === void 0 ? void 0 : sessionQuery.split('-')[0]) || 'none',
              // screen geometry
              'scn-h': window.screen.height,
              'scn-w': window.screen.width,
              // window geometry
              'win-h': window.innerHeight,
              'win-w': window.innerWidth,
              electron: typeof window !== 'undefined' && Boolean(window.electron),
              loadTime: (Date.now() - initialTimeStamp) / 1000,
              jb2: true
            }; // stringifies the track type counts, gets processed in lambda

            tracks.forEach(function (track) {
              stats["track-types-".concat(track.type)] = stats["track-types-".concat(track.type)] + 1 || 1;
            }); // stringifies the session track type counts, gets processed in lambda

            session === null || session === void 0 ? void 0 : session.sessionTracks.forEach(function (track) {
              stats["sessionTrack-types-".concat(track.type)] = stats["sessionTrack-types-".concat(track.type)] + 1 || 1;
            }); // put stats into a query string for get request

            qs = Object.keys(stats).map(function (key) {
              return "".concat(key, "=").concat(stats[key]);
            }).join('&');
            return _context.abrupt("return", fetch("".concat(url, "?").concat(qs)));

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _writeAWSAnalytics.apply(this, arguments);
}

function writeGAAnalytics(_x4, _x5) {
  return _writeGAAnalytics.apply(this, arguments);
}

function _writeGAAnalytics() {
  _writeGAAnalytics = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(rootModel, initialTimeStamp) {
    var _rootModel$jbrowse$pl;

    var jbrowseUser, stats, analyticsScript, gaData, googleDimensions, analyticsScriptNode;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            jbrowseUser = 'UA-7115575-5';
            stats = {
              'tracks-count': rootModel.jbrowse.tracks.length,
              // this is all possible tracks
              ver: rootModel.version,
              electron: typeof window !== 'undefined' && Boolean(window.electron),
              loadTime: Date.now() - initialTimeStamp,
              pluginNames: ((_rootModel$jbrowse$pl = rootModel.jbrowse.plugins) === null || _rootModel$jbrowse$pl === void 0 ? void 0 : _rootModel$jbrowse$pl.map(function (plugin) {
                return plugin.name;
              })) || ''
            }; // create script

            analyticsScript = "(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){";
            analyticsScript += '(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),';
            analyticsScript += 'm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)';
            analyticsScript += "})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');";
            analyticsScript += "ga('create', '".concat(jbrowseUser, "', 'auto', 'jbrowseTracker');");
            gaData = {};
            googleDimensions = 'tracks-count ver electron loadTime pluginNames';
            googleDimensions.split(/\s+/).forEach(function (key, index) {
              gaData["dimension".concat(index + 1)] = stats[key];
            });
            gaData.metric1 = Math.round(stats.loadTime);
            analyticsScript += "ga('jbrowseTracker.send', 'pageview',".concat(JSON.stringify(gaData), ");");
            analyticsScriptNode = document.createElement('script');
            analyticsScriptNode.innerHTML = analyticsScript;
            document.getElementsByTagName('head')[0].appendChild(analyticsScriptNode);

          case 15:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _writeGAAnalytics.apply(this, arguments);
}