"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _jexlStrings = require("./jexlStrings");

var _simpleFeature = _interopRequireDefault(require("./simpleFeature"));

/* eslint-disable no-underscore-dangle */
describe('function string parsing', function () {
  it('can detect a jexl expression', function () {
    var str = 'jexl:a+b+c+5';
    expect(str.startsWith('jexl:')).toBeTruthy();
  });
  it('can create a jexl expression', function () {
    var str = 'jexl:a+b+c+5';
    var expr = (0, _jexlStrings.stringToJexlExpression)(str);
    expect(expr._exprStr).toEqual('a+b+c+5');
  });
  it('can create a jexl expression 2', function () {
    var str = 'jexl:\na+b+c+5';
    var expr = (0, _jexlStrings.stringToJexlExpression)(str);
    expect(expr._exprStr).toEqual('\na+b+c+5');
    var result = expr.evalSync({
      a: 5,
      b: 10,
      c: 15
    });
    expect(result).toEqual(35);
  });
  it('can use the loaded core helper functions to access feature info', function () {
    var feature = new _simpleFeature.default({
      uniqueId: 'jexlFeature',
      score: 10,
      start: 1,
      end: 9
    });
    expect((0, _jexlStrings.stringToJexlExpression)("jexl:get(feature,'score')").evalSync({
      feature: feature
    })).toEqual(10);
    expect((0, _jexlStrings.stringToJexlExpression)("jexl:get(feature,'uniqueId')").evalSync({
      feature: feature
    })).toBe('jexlFeature');
    expect((0, _jexlStrings.stringToJexlExpression)("jexl:get(feature,'end') - get(feature,'start') == 8").evalSync({
      feature: feature
    })).toBe(true);
  });
});