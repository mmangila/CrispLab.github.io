"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isFeature = isFeature;
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Abstract feature object
 */
function isFeature(thing) {
  return (0, _typeof2.default)(thing) === 'object' && thing !== null && typeof thing.get === 'function' && typeof thing.id === 'function';
}

function isSimpleFeatureSerialized(args) {
  return 'uniqueId' in args && (0, _typeof2.default)(args.data) !== 'object';
}
/**
 * Simple implementation of a feature object.
 */


var SimpleFeature = /*#__PURE__*/function () {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any

  /**
   * @param args - SimpleFeature args
   *
   * Note: args.data.subfeatures can be an array of these same args,
   * which will be inflated to more instances of this class.
   */
  function SimpleFeature(args) {
    var _this = this;

    (0, _classCallCheck2.default)(this, SimpleFeature);
    (0, _defineProperty2.default)(this, "data", void 0);
    (0, _defineProperty2.default)(this, "subfeatures", void 0);
    (0, _defineProperty2.default)(this, "parentHandle", void 0);
    (0, _defineProperty2.default)(this, "uniqueId", void 0);

    if (isSimpleFeatureSerialized(args)) {
      this.data = args;
    } else {
      this.data = args.data || {}; // load handle from args.parent (not args.data.parent)
      // this reason is because if args is an object, it likely isn't properly loaded with
      // parent as a Feature reference (probably a raw parent ID or something instead)

      this.parentHandle = args.parent;
    } // the feature id comes from
    // args.id, args.data.uniqueId, or args.uniqueId due to this initialization


    var id = isSimpleFeatureSerialized(args) ? args.uniqueId : args.id;

    if (id === undefined || id === null) {
      throw new Error('SimpleFeature requires a unique `id` or `data.uniqueId` attribute');
    }

    this.uniqueId = String(id);

    if (!(this.data.aliases || this.data.end - this.data.start >= 0)) {
      throw new Error("invalid feature data, end less than start. end: ".concat(this.data.end, " start: ").concat(this.data.start));
    }

    if (this.data.subfeatures) {
      var _this$data$subfeature;

      this.subfeatures = (_this$data$subfeature = this.data.subfeatures) === null || _this$data$subfeature === void 0 ? void 0 : _this$data$subfeature.map( // eslint-disable-next-line @typescript-eslint/no-explicit-any
      function (f, i) {
        return typeof f.get !== 'function' ? new SimpleFeature({
          id: f.uniqueId || "".concat(id, "-").concat(i),
          data: _objectSpread({
            strand: _this.data.strand
          }, f),
          parent: _this
        }) : f;
      });
    }
  }
  /**
   * Get a piece of data about the feature.  All features must have
   * 'start' and 'end', but everything else is optional.
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any


  (0, _createClass2.default)(SimpleFeature, [{
    key: "get",
    value: function get(name) {
      return name === 'subfeatures' ? this.subfeatures : this.data[name];
    }
    /**
     * Set an item of data.
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any

  }, {
    key: "set",
    value: function set(name, val) {
      this.data[name] = val;
    }
    /**
     * Get an array listing which data keys are present in this feature.
     */

  }, {
    key: "tags",
    value: function tags() {
      return Object.keys(this.data);
    }
    /**
     * Get the unique ID of this feature.
     */

  }, {
    key: "id",
    value: function id() {
      return this.uniqueId;
    }
    /**
     * Get this feature's parent feature, or undefined if none.
     */

  }, {
    key: "parent",
    value: function parent() {
      return this.parentHandle;
    }
    /**
     * Get an array of child features, or undefined if none.
     */

  }, {
    key: "children",
    value: function children() {
      return this.get('subfeatures');
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var d = _objectSpread(_objectSpread({}, this.data), {}, {
        uniqueId: this.id()
      });

      var p = this.parent();

      if (p) {
        d.parentId = p.id();
      }

      var c = this.children();

      if (c) {
        d.subfeatures = c.map(function (child) {
          return child.toJSON();
        });
      }

      return d;
    }
  }], [{
    key: "fromJSON",
    value: function fromJSON(json) {
      return new SimpleFeature(_objectSpread({}, json));
    }
  }]);
  return SimpleFeature;
}();

exports.default = SimpleFeature;