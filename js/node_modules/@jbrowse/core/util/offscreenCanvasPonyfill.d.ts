export let createCanvas: any;
export let createImageBitmap: any;
export let ImageBitmapType: any;
export class PonyfillOffscreenContext {
    constructor(width: any, height: any);
    width: any;
    height: any;
    commands: any[];
    currentFont: string;
    set strokeStyle(arg: any);
    currentStrokeStyle: any;
    set fillStyle(arg: any);
    currentFillStyle: any;
    set font(arg: any);
    arc(...args: any[]): void;
    arcTo(...args: any[]): void;
    beginPath(...args: any[]): void;
    clearRect(...args: any[]): void;
    clip(...args: any[]): void;
    closePath(...args: any[]): void;
    createLinearGradient(...args: any[]): void;
    createPattern(...args: any[]): void;
    createRadialGradient(...args: any[]): void;
    drawFocusIfNeeded(...args: any[]): void;
    drawImage(...args: any[]): void;
    ellipse(...args: any[]): void;
    fill(...args: any[]): void;
    fillRect(...args: any[]): void;
    fillText(...args: any[]): void;
    lineTo(...args: any[]): void;
    measureText(text: any): {
        width: number;
        height: number;
    };
    moveTo(...args: any[]): void;
    quadraticCurveTo(...args: any[]): void;
    rect(...args: any[]): void;
    restore(...args: any[]): void;
    rotate(...args: any[]): void;
    save(...args: any[]): void;
    setLineDash(...args: any[]): void;
    setTransform(...args: any[]): void;
    scale(...args: any[]): void;
    stroke(...args: any[]): void;
    strokeRect(...args: any[]): void;
    strokeText(...args: any[]): void;
    transform(...args: any[]): void;
    translate(...args: any[]): void;
}
export class PonyfillOffscreenCanvas {
    constructor(width: any, height: any);
    width: any;
    height: any;
    getContext(type: any): PonyfillOffscreenContext;
    context: PonyfillOffscreenContext | undefined;
    getSerializedSvg(): JSX.Element;
}
