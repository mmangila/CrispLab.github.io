"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _calculateDynamicBlocks = _interopRequireDefault(require("./calculateDynamicBlocks"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var ctgA = {
  assemblyName: 'test',
  refName: 'ctgA',
  start: 0,
  end: 50000
};
test('one', function () {
  expect((0, _calculateDynamicBlocks.default)({
    offsetPx: 0,
    width: 200,
    displayedRegions: [ctgA],
    bpPerPx: 1,
    minimumBlockWidth: 20,
    interRegionPaddingWidth: 2
  }).getBlocks()).toMatchSnapshot();
});
test('two', function () {
  expect((0, _calculateDynamicBlocks.default)({
    offsetPx: 0,
    width: 200,
    displayedRegions: [_objectSpread(_objectSpread({}, ctgA), {}, {
      reversed: true
    })],
    bpPerPx: 1,
    minimumBlockWidth: 20,
    interRegionPaddingWidth: 2
  }).getBlocks()).toMatchSnapshot();
});
test('three', function () {
  expect((0, _calculateDynamicBlocks.default)({
    offsetPx: -100,
    width: 200,
    displayedRegions: [_objectSpread(_objectSpread({}, ctgA), {}, {
      reversed: true
    })],
    bpPerPx: 1,
    minimumBlockWidth: 20,
    interRegionPaddingWidth: 2
  }).getBlocks()).toMatchSnapshot();
});
test('four', function () {
  expect((0, _calculateDynamicBlocks.default)({
    offsetPx: -100,
    width: 350,
    displayedRegions: [ctgA],
    bpPerPx: 1,
    minimumBlockWidth: 20,
    interRegionPaddingWidth: 2
  }).getBlocks()).toMatchSnapshot();
});
test('five', function () {
  expect((0, _calculateDynamicBlocks.default)({
    offsetPx: 521,
    width: 927,
    displayedRegions: [_objectSpread(_objectSpread({}, ctgA), {}, {
      reversed: false
    })],
    bpPerPx: 0.05,
    minimumBlockWidth: 20,
    interRegionPaddingWidth: 2
  }).getBlocks()).toMatchSnapshot();
});