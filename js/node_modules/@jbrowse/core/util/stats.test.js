"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _simpleFeature = _interopRequireDefault(require("@jbrowse/core/util/simpleFeature"));

var _rxjs = require("rxjs");

var _stats = require("./stats");

test('calc std', function () {
  var s = [1, 2, 3];
  var sum = s.reduce(function (a, b) {
    return a + b;
  });
  var sumSq = s.reduce(function (a, b) {
    return a + b * b;
  });
  expect((0, _stats.calcStdFromSums)(sum, sumSq, s.length, true)).toBeCloseTo(0.8164965809); // calculated from a webapp

  expect((0, _stats.calcStdFromSums)(sum, sumSq, s.length, false)).toBeCloseTo(1); // calculated from a webapp

  expect((0, _stats.calcStdFromSums)(100, 100, 0)).toEqual(0); // fake thing where list "n" is 0

  expect((0, _stats.calcStdFromSums)(100000, 100, 5)).toEqual(0); // fake thing where sumSq probably wrong
});
test('test rectify', function () {
  // mean of 0 bases covered = 0
  expect((0, _stats.rectifyStats)({
    basesCovered: 0
  }).scoreMean).toEqual(0);
  var s = (0, _stats.rectifyStats)({
    featureCount: 10,
    scoreSum: 1000
  });
  expect(s.scoreMean).toEqual(100);
  expect(s.featureCount).toEqual(10);
  expect((0, _stats.rectifyStats)({
    featureCount: 3,
    scoreSum: 6,
    scoreSumSquares: 14
  }).scoreStdDev).toEqual(1); // calculated from a webapp about sample standard deviations
});
test('scores to stats', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
  var ret;
  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return (0, _stats.scoresToStats)({
            refName: 'ctgA',
            start: 0,
            end: 2
          }, (0, _rxjs.from)([new _simpleFeature.default({
            id: 1,
            data: {
              start: 0,
              end: 1,
              score: 1
            }
          }), new _simpleFeature.default({
            id: 2,
            data: {
              start: 1,
              end: 2,
              score: 2
            }
          }), new _simpleFeature.default({
            id: 3,
            data: {
              start: 2,
              end: 3,
              score: 3
            }
          })]));

        case 2:
          ret = _context.sent;
          expect(ret.scoreMean).toEqual(2);
          expect(ret.featureDensity).toEqual(1);
          expect(ret.scoreMax).toEqual(3);
          expect(ret.scoreMin).toEqual(1);
          expect(ret.scoreStdDev).toEqual(1); // calculated from a webapp

        case 8:
        case "end":
          return _context.stop();
      }
    }
  }, _callee);
}))); // peter TODO: fix this test

test('calc per base stats', function () {
  // one score at start
  expect((0, _stats.calcPerBaseStats)({
    refName: 'ctgA',
    start: 0,
    end: 9
  }, [new _simpleFeature.default({
    id: 1,
    data: {
      start: 0,
      end: 1,
      score: 10
    }
  })])).toEqual([10, 0, 0, 0, 0, 0, 0, 0, 0]); // multiple features

  expect((0, _stats.calcPerBaseStats)({
    refName: 'ctgA',
    start: 0,
    end: 9
  }, [new _simpleFeature.default({
    id: 1,
    data: {
      start: 0,
      end: 1,
      score: 10
    }
  }), new _simpleFeature.default({
    id: 2,
    data: {
      start: 8,
      end: 9,
      score: 10
    }
  })])).toEqual([10, 0, 0, 0, 0, 0, 0, 0, 10]); // multiple features

  expect((0, _stats.calcPerBaseStats)({
    refName: 'ctgA',
    start: 15,
    end: 30
  }, [new _simpleFeature.default({
    id: 1,
    data: {
      start: 10,
      end: 20,
      score: 10
    }
  }), new _simpleFeature.default({
    id: 2,
    data: {
      start: 25,
      end: 26,
      score: 10
    }
  })])).toEqual([10, 10, 10, 10, 10, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0]); // feature starts before region

  expect((0, _stats.calcPerBaseStats)({
    refName: 'ctgA',
    start: 10,
    end: 19
  }, [new _simpleFeature.default({
    id: 1,
    data: {
      start: 5,
      end: 15,
      score: 10
    }
  }), new _simpleFeature.default({
    id: 1,
    data: {
      start: 18,
      end: 26,
      score: 10
    }
  })])).toEqual([10, 10, 10, 10, 10, 0, 0, 0, 10]);
});