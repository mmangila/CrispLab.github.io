"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/* eslint-disable @typescript-eslint/no-explicit-any */
var MultiLayout = /*#__PURE__*/function () {
  /**
   * layout class that just keeps a number of named sub-layouts.
   * basically just a fancier
   * `{ layout1: new GranularRectLayout(), layout2: new GranularRectLayout() ...}`
   */
  function MultiLayout(SubLayoutClass) {
    var layoutArgs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _classCallCheck2.default)(this, MultiLayout);
    (0, _defineProperty2.default)(this, "subLayouts", new Map());
    (0, _defineProperty2.default)(this, "SubLayoutClass", void 0);
    (0, _defineProperty2.default)(this, "subLayoutConstructorArgs", {});
    this.subLayouts = new Map();
    this.SubLayoutClass = SubLayoutClass;
    this.subLayoutConstructorArgs = layoutArgs;
  }

  (0, _createClass2.default)(MultiLayout, [{
    key: "getSublayout",
    value: function getSublayout(layoutName) {
      var subLayout = this.subLayouts.get(layoutName);

      if (subLayout === undefined) {
        subLayout = new this.SubLayoutClass(this.subLayoutConstructorArgs);
        this.subLayouts.set(layoutName, subLayout);
        return subLayout;
      }

      return subLayout;
    }
  }, {
    key: "addRect",
    value: function addRect(layoutName, id, left, right, height) {
      var data = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
      return this.getSublayout(layoutName).addRect(id, left, right, height, data);
    }
  }, {
    key: "discardRange",
    value: function discardRange(layoutName, left, right) {
      var layout = this.subLayouts.get(layoutName);
      return layout && layout.discardRange(left, right);
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var data = {};

      var _iterator = _createForOfIteratorHelper(this.subLayouts.entries()),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _step$value = (0, _slicedToArray2.default)(_step.value, 2),
              layoutName = _step$value[0],
              sublayout = _step$value[1];

          data[layoutName] = sublayout.toJSON();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return data;
    }
  }]);
  return MultiLayout;
}();

exports.default = MultiLayout;