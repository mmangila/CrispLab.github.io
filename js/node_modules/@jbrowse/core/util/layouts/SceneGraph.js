"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _ = require("..");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var SceneGraph = /*#__PURE__*/function () {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any

  /**
   * note: all coordinates are inter-base or inter-pixel coordinates
   */
  function SceneGraph(name, left, top, width, height, // eslint-disable-next-line @typescript-eslint/no-explicit-any
  data) {
    (0, _classCallCheck2.default)(this, SceneGraph);
    (0, _defineProperty2.default)(this, "name", void 0);
    (0, _defineProperty2.default)(this, "left", void 0);
    (0, _defineProperty2.default)(this, "top", void 0);
    (0, _defineProperty2.default)(this, "width", void 0);
    (0, _defineProperty2.default)(this, "height", void 0);
    (0, _defineProperty2.default)(this, "data", void 0);
    (0, _defineProperty2.default)(this, "children", void 0);
    (0, _defineProperty2.default)(this, "absoluteCache", void 0);
    (0, _defineProperty2.default)(this, "parent", void 0);

    if (_.inDevelopment && (typeof name !== 'string' || typeof left !== 'number' || Number.isNaN(left) || typeof top !== 'number' || Number.isNaN(top) || typeof width !== 'number' || Number.isNaN(width) || typeof height !== 'number' || Number.isNaN(height))) {
      throw new TypeError('invalid SceneGraph arguments');
    }

    this.name = name;
    this.left = left;
    this.top = top;
    this.width = width;
    this.height = height;
    this.data = data;
    this.children = new Map();
    this.absoluteCache = {
      dirty: true
    };
  }

  (0, _createClass2.default)(SceneGraph, [{
    key: "addChild",
    value: function addChild(nameOrSceneGraph, left, top, width, height, // eslint-disable-next-line @typescript-eslint/no-explicit-any
    data) {
      var child;

      if (nameOrSceneGraph instanceof SceneGraph) {
        child = nameOrSceneGraph;
      } else {
        child = new SceneGraph(nameOrSceneGraph, left, top, width, height, data);
      }

      if (!(child instanceof SceneGraph)) {
        throw new TypeError('argument to addChild must be an array or a SceneGraph');
      }

      if (this.children.has(child.name)) {
        throw new Error("child named \"".concat(child.name, "\" already exists"));
      } // update the bounds to match the child


      child.parent = this;
      var _child$absolute = child.absolute,
          childLeft = _child$absolute.left,
          childRight = _child$absolute.right,
          childTop = _child$absolute.top,
          childBottom = _child$absolute.bottom;

      if (childLeft !== undefined && childRight !== undefined && childTop !== undefined && childBottom !== undefined) {
        this.expand(childLeft, childRight, childTop, childBottom);
        this.children.set(child.name, child);
      }

      return child;
    }
  }, {
    key: "getSubRecord",
    value: function getSubRecord(name) {
      return this.children.get(name);
    }
    /**
     * if the record does not already cover the given
     * absolute extents, extend it to cover them
     *
     * @param left -
     * @param right -
     * @param top -
     * @param bottom -
     */

  }, {
    key: "expand",
    value: function expand(newLeft, newRight, newTop, newBottom) {
      var _this$absolute = this.absolute,
          left = _this$absolute.left,
          right = _this$absolute.right,
          top = _this$absolute.top,
          bottom = _this$absolute.bottom;

      if (left !== undefined && newLeft < left) {
        var diff = left - newLeft;
        this.width += diff;
        this.left -= diff;
      }

      if (right !== undefined && newRight > right) {
        this.width += newRight - right;
      }

      if (top !== undefined && newTop < top) {
        var _diff = top - newTop;

        this.height += _diff;
        this.top -= _diff;
      }

      if (bottom !== undefined && newBottom > bottom) {
        this.height += newBottom - bottom;
      }

      if (this.parent) {
        this.parent.expand(newLeft, newRight, newTop, newBottom);
      }

      this.absoluteCache.dirty = true;
    }
  }, {
    key: "bottom",
    get: function get() {
      return this.top + this.height;
    }
  }, {
    key: "right",
    get: function get() {
      return this.left + this.width;
    }
  }, {
    key: "walkParents",
    value: function walkParents(callback) {
      if (this.parent) {
        callback(this.parent);
        this.parent.walkParents(callback);
      }
    }
  }, {
    key: "walkChildren",
    value: function walkChildren(callback) {
      var _iterator = _createForOfIteratorHelper(this.children.values()),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var sub = _step.value;
          callback(sub);
          sub.walkChildren(callback);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "absolute",
    get: function get() {
      if (this.absoluteCache.dirty) {
        var xOffset = 0;
        var yOffset = 0;
        this.walkParents(function (node) {
          xOffset += node.left;
          yOffset += node.top;
        });
        this.absoluteCache = {
          dirty: false,
          left: this.left + xOffset,
          right: this.right + xOffset,
          top: this.top + yOffset,
          bottom: this.bottom + yOffset,
          width: this.width,
          height: this.height
        };
      }

      return this.absoluteCache;
    }
  }, {
    key: "move",
    value: function move(x, y) {
      this.left += x;
      this.top += y;
      this.absoluteCache.dirty = true;
      this.walkChildren(function (c) {
        c.absoluteCache.dirty = true;
      });
      var _this$absolute2 = this.absolute,
          left = _this$absolute2.left,
          right = _this$absolute2.right,
          top = _this$absolute2.top,
          bottom = _this$absolute2.bottom;

      if (left !== undefined && right !== undefined && top !== undefined && bottom !== undefined) {
        this.expand(left, right, top, bottom);
      }
    }
  }]);
  return SceneGraph;
}();

exports.default = SceneGraph;