"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _ = require("..");

var _rbush = _interopRequireDefault(require("rbush"));

var PrecomputedLayout = /*#__PURE__*/function () {
  function PrecomputedLayout(_ref) {
    var rectangles = _ref.rectangles,
        totalHeight = _ref.totalHeight,
        maxHeightReached = _ref.maxHeightReached;
    (0, _classCallCheck2.default)(this, PrecomputedLayout);
    (0, _defineProperty2.default)(this, "rectangles", void 0);
    (0, _defineProperty2.default)(this, "totalHeight", void 0);
    (0, _defineProperty2.default)(this, "maxHeightReached", void 0);
    (0, _defineProperty2.default)(this, "rbush", void 0);
    this.rectangles = new Map(Object.entries(rectangles)); // rectangles is of the form "featureId": [leftPx, topPx, rightPx, bottomPx]

    this.totalHeight = totalHeight;
    this.maxHeightReached = maxHeightReached;
    this.rbush = new _rbush.default();

    for (var _i = 0, _Object$entries = Object.entries(rectangles); _i < _Object$entries.length; _i++) {
      var _Object$entries$_i = (0, _slicedToArray2.default)(_Object$entries[_i], 2),
          key = _Object$entries$_i[0],
          layout = _Object$entries$_i[1];

      this.rbush.insert({
        minX: layout[0],
        minY: layout[1],
        maxX: layout[2],
        maxY: layout[3],
        name: key
      });
    }
  }

  (0, _createClass2.default)(PrecomputedLayout, [{
    key: "addRect",
    value: function addRect(id) {
      var rect = this.rectangles.get(id);

      if (!rect) {
        throw new Error("id ".concat(id, " not found in precomputed feature layout"));
      } // left, top, right, bottom


      return rect[1];
    }
    /**
     * returns a Map of `feature id -> rectangle`
     */

  }, {
    key: "getRectangles",
    value: function getRectangles() {
      return this.rectangles;
    }
  }, {
    key: "getTotalHeight",
    value: function getTotalHeight() {
      return this.totalHeight;
    }
  }, {
    key: "collides",
    value: function collides(_rect, _top) {
      throw new Error('Method not implemented.');
    }
  }, {
    key: "getByCoord",
    value: function getByCoord(x, y) {
      var rect = {
        minX: x,
        minY: y,
        maxX: x + 1,
        maxY: y + 1
      };
      return this.rbush.collides(rect) ? this.rbush.search(rect)[0].name : undefined;
    }
  }, {
    key: "getByID",
    value: function getByID(id) {
      return this.rectangles.get(id);
    }
  }, {
    key: "addRectToBitmap",
    value: function addRectToBitmap(_rect, _data) {
      throw new Error('Method not implemented.');
    }
  }, {
    key: "discardRange",
    value: function discardRange(_left, _right) {
      throw new Error('Method not implemented.');
    }
  }, {
    key: "serializeRegion",
    value: function serializeRegion(_region) {
      throw new Error('Method not implemented.');
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return {
        rectangles: (0, _.objectFromEntries)(this.rectangles),
        totalHeight: this.totalHeight,
        maxHeightReached: false
      };
    }
  }]);
  return PrecomputedLayout;
}();

exports.default = PrecomputedLayout;