"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.renderToAbstractCanvas = renderToAbstractCanvas;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _react = _interopRequireDefault(require("react"));

var _offscreenCanvasPonyfill = require("./offscreenCanvasPonyfill");

var _ = require(".");

function renderToAbstractCanvas(_x, _x2, _x3, _x4) {
  return _renderToAbstractCanvas.apply(this, arguments);
}

function _renderToAbstractCanvas() {
  _renderToAbstractCanvas = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee(width, height, opts, cb) {
    var exportSVG, _opts$highResolutionS, highResolutionScaling, fakeCanvas, fakeCtx, scale, _canvas, _ctx, canvas, ctx;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            exportSVG = opts.exportSVG, _opts$highResolutionS = opts.highResolutionScaling, highResolutionScaling = _opts$highResolutionS === void 0 ? 1 : _opts$highResolutionS;

            if (!(exportSVG && !exportSVG.rasterizeLayers)) {
              _context.next = 7;
              break;
            }

            fakeCanvas = new _offscreenCanvasPonyfill.PonyfillOffscreenCanvas(width, height);
            fakeCtx = fakeCanvas.getContext('2d');
            _context.next = 6;
            return cb(fakeCtx);

          case 6:
            return _context.abrupt("return", {
              reactElement: fakeCanvas.getSerializedSvg()
            });

          case 7:
            if (!(exportSVG && exportSVG.rasterizeLayers)) {
              _context.next = 32;
              break;
            }

            scale = 4;
            _canvas = (0, _offscreenCanvasPonyfill.createCanvas)(Math.ceil(width * scale), height * scale);
            _ctx = _canvas.getContext('2d');

            _ctx.scale(scale, scale);

            _context.next = 14;
            return cb(_ctx);

          case 14:
            _context.t0 = _react.default;
            _context.t1 = width;
            _context.t2 = height;

            if (!_canvas.convertToBlob) {
              _context.next = 27;
              break;
            }

            _context.t4 = _.blobToDataURL;
            _context.next = 21;
            return _canvas.convertToBlob({
              type: 'image/png'
            });

          case 21:
            _context.t5 = _context.sent;
            _context.next = 24;
            return (0, _context.t4)(_context.t5);

          case 24:
            _context.t3 = _context.sent;
            _context.next = 28;
            break;

          case 27:
            _context.t3 = _canvas.toDataURL();

          case 28:
            _context.t6 = _context.t3;
            _context.t7 = {
              width: _context.t1,
              height: _context.t2,
              xlinkHref: _context.t6
            };
            _context.t8 = _context.t0.createElement.call(_context.t0, "image", _context.t7);
            return _context.abrupt("return", {
              reactElement: _context.t8
            });

          case 32:
            canvas = (0, _offscreenCanvasPonyfill.createCanvas)(Math.ceil(width * highResolutionScaling), height * highResolutionScaling);
            ctx = canvas.getContext('2d');
            ctx.scale(highResolutionScaling, highResolutionScaling);
            _context.next = 37;
            return cb(ctx);

          case 37:
            _context.next = 39;
            return (0, _offscreenCanvasPonyfill.createImageBitmap)(canvas);

          case 39:
            _context.t9 = _context.sent;
            return _context.abrupt("return", {
              imageData: _context.t9
            });

          case 41:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _renderToAbstractCanvas.apply(this, arguments);
}