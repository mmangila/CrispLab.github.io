"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stringToJexlExpression = stringToJexlExpression;

var _jexl = _interopRequireDefault(require("./jexl"));

// eslint-disable-next-line @typescript-eslint/no-explicit-any
var compilationCache = {}; // revert function strings back to main, create a different file for jexlStrings.ts
// pass the jexl property of the pluginManager as a param

/**
 * compile a jexlExpression to a string
 *
 * @param str - string of code like `jexl:...`
 * @param options -
 */

function stringToJexlExpression(str, // eslint-disable-next-line @typescript-eslint/no-explicit-any
jexl) {
  var cacheKey = "nosig|".concat(str);

  if (!compilationCache[cacheKey]) {
    var match = str.startsWith('jexl:');

    if (!match) {
      throw new Error('string does not appear to be in jexl format');
    }

    var code = str.split('jexl:')[1];
    var compiled = jexl ? jexl.compile("".concat(code)) : (0, _jexl.default)().compile("".concat(code));
    compilationCache[cacheKey] = compiled;
  }

  return compilationCache[cacheKey];
}