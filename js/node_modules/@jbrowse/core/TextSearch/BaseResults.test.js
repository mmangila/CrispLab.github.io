"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _BaseResults = _interopRequireWildcard(require("./BaseResults"));

test('create BaseResult', function () {
  var baseResult = new _BaseResults.default({
    label: 'chr1'
  });
  expect(baseResult.getLabel()).toEqual('chr1');
  expect(baseResult.getLocation()).toEqual('chr1');
});
test('create LocationResult', function () {
  var locationResult = new _BaseResults.LocStringResult({
    label: 'location result',
    locString: 'chr1:1-900'
  });
  expect(locationResult.getLabel()).toEqual('location result');
  expect(locationResult.getLocation()).toEqual('chr1:1-900');
});
test('create RefSequenceResult', function () {
  var refSeqResult = new _BaseResults.RefSequenceResult({
    refName: 'chr1',
    label: 'chromosome 1'
  });
  expect(refSeqResult.getLabel()).toEqual('chromosome 1');
  expect(refSeqResult.getLocation()).toEqual('chr1');
});
test('can update score of result and throw appropriate errors', function () {
  var refSeqResult = new _BaseResults.RefSequenceResult({
    refName: 'chr1',
    label: 'chromosome 1'
  });
  expect(refSeqResult.getScore()).toBe(1);
  refSeqResult.updateScore(1000);
  expect(refSeqResult.getScore()).toBe(1000);
  expect(function () {
    new _BaseResults.RefSequenceResult({
      label: 'chromosome 1'
    });
  }).toThrow('must provide refName');
  expect(function () {
    new _BaseResults.LocStringResult({
      label: 'chromosome 1'
    });
  }).toThrow('must provide locString');
});