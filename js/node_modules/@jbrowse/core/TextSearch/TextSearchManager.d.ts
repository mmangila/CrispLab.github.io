import BaseResult from './BaseResults';
import { AnyConfigurationModel } from '../configuration/configurationSchema';
import PluginManager from '../PluginManager';
import QuickLRU from '../util/QuickLRU';
import { SearchType, BaseTextSearchAdapter } from '../data_adapters/BaseAdapter';
export interface BaseArgs {
    searchType: SearchType;
    queryString: string;
    signal?: AbortSignal;
    limit?: number;
    pageNumber?: number;
}
export interface SearchScope {
    includeAggregateIndexes: boolean;
    assemblyName: string;
    tracks?: Array<string>;
}
declare const _default: (pluginManager: PluginManager) => {
    new (): {
        adapterCache: QuickLRU;
        textSearchAdapters: BaseTextSearchAdapter[];
        /**
         * Instantiate/initialize list of relevant adapters
         */
        loadTextSearchAdapters(searchScope: SearchScope): BaseTextSearchAdapter[];
        /**
         * Returns list of relevant text search adapters to use
         * @param args - search options/arguments include: search query
         */
        relevantAdapters(searchScope: SearchScope): (import("mobx-state-tree").ModelInstanceTypeProps<Record<string, any>> & {
            setSubschema(slotName: string, data: import("mobx-state-tree").ModelPropertiesDeclaration | import("../configuration/configurationSchema").AnyConfigurationSchemaType): any;
        } & import("mobx-state-tree").IStateTreeNode<import("../configuration/configurationSchema").AnyConfigurationSchemaType>)[];
        getAdaptersWithAssembly(searchScopeAssemblyName: string, adapterList: AnyConfigurationModel[]): (import("mobx-state-tree").ModelInstanceTypeProps<Record<string, any>> & {
            setSubschema(slotName: string, data: import("mobx-state-tree").ModelPropertiesDeclaration | import("../configuration/configurationSchema").AnyConfigurationSchemaType): any;
        } & import("mobx-state-tree").IStateTreeNode<import("../configuration/configurationSchema").AnyConfigurationSchemaType>)[];
        /**
         * Returns list of relevant results given a search query and options
         * @param args - search options/arguments include: search query
         * limit of results to return, searchType...preffix | full | exact", etc.
         */
        search(args: BaseArgs, searchScope: SearchScope, rankSearchResults: (results: BaseResult[]) => BaseResult[]): Promise<BaseResult[]>;
        /**
         * Returns array of revelevant and sorted results
         * @param results - array of results from all text search adapters
         * @param rankSearchResults - function that updates results scores
         * based on more relevance
         */
        sortResults(results: BaseResult[], rankSearchResults: (results: BaseResult[]) => BaseResult[]): BaseResult[];
    };
};
export default _default;
