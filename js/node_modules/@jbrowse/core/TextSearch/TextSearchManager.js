"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _QuickLRU = _interopRequireDefault(require("../util/QuickLRU"));

var _configuration = require("../configuration");

/*  text-searching controller */
var _default = function _default(pluginManager) {
  var _temp;

  return _temp = /*#__PURE__*/function () {
    function TextSearchManager() {
      (0, _classCallCheck2.default)(this, TextSearchManager);
      (0, _defineProperty2.default)(this, "adapterCache", void 0);
      (0, _defineProperty2.default)(this, "textSearchAdapters", void 0);
      this.textSearchAdapters = [];
      this.adapterCache = new _QuickLRU.default({
        maxSize: 15
      });
    }
    /**
     * Instantiate/initialize list of relevant adapters
     */


    (0, _createClass2.default)(TextSearchManager, [{
      key: "loadTextSearchAdapters",
      value: function loadTextSearchAdapters(searchScope) {
        var _this = this;

        var adaptersToUse = []; // initialize relevant adapters

        this.relevantAdapters(searchScope).forEach(function (adapterConfig) {
          var adapterId = (0, _configuration.readConfObject)(adapterConfig, 'textSearchAdapterId');

          if (_this.adapterCache.has(adapterId)) {
            var adapterFromCache = _this.adapterCache.get(adapterId);

            adaptersToUse.push(adapterFromCache);
          } else {
            var textSearchAdapterType = pluginManager.getTextSearchAdapterType(adapterConfig.type);
            var textSearchAdapter = new textSearchAdapterType.AdapterClass(adapterConfig);

            _this.adapterCache.set(adapterId, textSearchAdapter);

            adaptersToUse.push(textSearchAdapter);
          }
        });
        return adaptersToUse;
      }
      /**
       * Returns list of relevant text search adapters to use
       * @param args - search options/arguments include: search query
       */

    }, {
      key: "relevantAdapters",
      value: function relevantAdapters(searchScope) {
        var _pluginManager$rootMo;

        // Note: (in the future we can add a condition to check if not aggregate
        // only return track text search adapters that cover relevant tracks,
        // for now only returning text search adapters that cover configured assemblies)
        // root level adapters and track adapters
        var _ref = (_pluginManager$rootMo = pluginManager.rootModel // eslint-disable-next-line @typescript-eslint/no-explicit-any
        ) === null || _pluginManager$rootMo === void 0 ? void 0 : _pluginManager$rootMo. // eslint-disable-next-line @typescript-eslint/no-explicit-any
        jbrowse,
            aggregateTextSearchAdapters = _ref.aggregateTextSearchAdapters,
            tracks = _ref.tracks;

        var trackTextSearchAdapters = [];
        tracks.forEach(function (trackConfig) {
          var trackTextSearchAdapter = trackConfig.textSearchAdapter;

          if (trackTextSearchAdapter.textSearchAdapterId !== 'placeholderId') {
            trackTextSearchAdapters.push(trackTextSearchAdapter);
          }
        }); // get adapters that cover assemblies

        var rootTextSearchAdapters = this.getAdaptersWithAssembly(searchScope.assemblyName, aggregateTextSearchAdapters);
        trackTextSearchAdapters = this.getAdaptersWithAssembly(searchScope.assemblyName, trackTextSearchAdapters);
        return rootTextSearchAdapters.concat(trackTextSearchAdapters);
      }
    }, {
      key: "getAdaptersWithAssembly",
      value: function getAdaptersWithAssembly(searchScopeAssemblyName, adapterList) {
        var adaptersWithAssemblies = adapterList.filter(function (adapterConfig) {
          var adapterAssemblies = (0, _configuration.readConfObject)(adapterConfig, 'assemblies');
          return adapterAssemblies === null || adapterAssemblies === void 0 ? void 0 : adapterAssemblies.includes(searchScopeAssemblyName);
        });
        return adaptersWithAssemblies;
      }
      /**
       * Returns list of relevant results given a search query and options
       * @param args - search options/arguments include: search query
       * limit of results to return, searchType...preffix | full | exact", etc.
       */

    }, {
      key: "search",
      value: function () {
        var _search = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(args, searchScope, rankSearchResults) {
          var results, relevantResults;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  // determine list of relevant adapters based on scope
                  this.textSearchAdapters = this.loadTextSearchAdapters(searchScope);
                  _context2.next = 3;
                  return Promise.all(this.textSearchAdapters.map( /*#__PURE__*/function () {
                    var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee(adapter) {
                      var currentResults;
                      return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              _context.next = 2;
                              return adapter.searchIndex(args);

                            case 2:
                              currentResults = _context.sent;
                              return _context.abrupt("return", currentResults);

                            case 4:
                            case "end":
                              return _context.stop();
                          }
                        }
                      }, _callee);
                    }));

                    return function (_x4) {
                      return _ref2.apply(this, arguments);
                    };
                  }()));

                case 3:
                  results = _context2.sent;
                  // aggregate and return relevant results
                  relevantResults = this.sortResults(results.flat(), rankSearchResults);

                  if (!(args.limit && relevantResults.length > 0)) {
                    _context2.next = 7;
                    break;
                  }

                  return _context2.abrupt("return", relevantResults.slice(0, args.limit));

                case 7:
                  return _context2.abrupt("return", relevantResults);

                case 8:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function search(_x, _x2, _x3) {
          return _search.apply(this, arguments);
        }

        return search;
      }()
      /**
       * Returns array of revelevant and sorted results
       * @param results - array of results from all text search adapters
       * @param rankSearchResults - function that updates results scores
       * based on more relevance
       */

    }, {
      key: "sortResults",
      value: function sortResults(results, rankSearchResults) {
        // first sort results in alphabetical order
        var sortedResults = results.sort(function (a, b) {
          return -b.getLabel().localeCompare(a.getLabel());
        }); // sort results based on score

        var sortedScoredResults = rankSearchResults(sortedResults).sort(function (result1, result2) {
          if (result1.getScore() < result2.getScore()) {
            return 1;
          }

          if (result1.getScore() > result2.getScore()) {
            return -1;
          }

          return 0;
        });
        return sortedScoredResults;
      }
    }]);
    return TextSearchManager;
  }(), _temp;
};

exports.default = _default;