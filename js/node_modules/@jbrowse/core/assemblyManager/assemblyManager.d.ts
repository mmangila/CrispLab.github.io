import { IAnyType, Instance } from 'mobx-state-tree';
import PluginManager from '../PluginManager';
export default function assemblyManagerFactory(assemblyConfigType: IAnyType, pluginManager: PluginManager): import("mobx-state-tree").IModelType<{
    assemblies: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
        configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<IAnyType>>;
    }, {
        regions: {
            start: number;
            end: number;
            refName: string;
            assemblyName: string;
        }[] | undefined;
        refNameAliases: {
            [key: string]: string;
        } | undefined;
    } & {
        readonly initialized: boolean;
        readonly name: string;
        readonly aliases: string[];
        hasName(name: string): boolean;
        readonly allAliases: string[];
        readonly refNames: string[] | undefined;
        readonly allRefNames: string[] | undefined;
        readonly rpcManager: any;
        readonly refNameColors: string[];
    } & {
        getCanonicalRefName(refName: string): string;
        getRefNameColor(refName: string): string | undefined;
        isValidRefName(refName: string): boolean;
    } & {
        setLoading(): void;
        setLoaded({ adapterRegionsWithAssembly, refNameAliases, }: {
            adapterRegionsWithAssembly: import("../util").Region[];
            refNameAliases: Record<string, string>;
        }): void;
        setError(error: Error): void;
        setRegions(regions: import("../util").Region[]): void;
        setRefNameAliases(refNameAliases: Record<string, string>): void;
        afterAttach(): void;
    } & {
        getAdapterMapEntry(adapterConf: unknown, options: import("./assembly").BaseOptions): Promise<{
            forwardMap: Record<string, string>;
            reverseMap: Record<string, string>;
        }>;
        getRefNameMapForAdapter(adapterConf: unknown, opts: import("./assembly").BaseOptions): Promise<Record<string, string>>;
        getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("./assembly").BaseOptions): Promise<Record<string, string>>;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
}, {
    get(assemblyName: string): (import("mobx-state-tree").ModelInstanceTypeProps<{
        configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<IAnyType>>;
    }> & {
        regions: {
            start: number;
            end: number;
            refName: string;
            assemblyName: string;
        }[] | undefined;
        refNameAliases: {
            [key: string]: string;
        } | undefined;
    } & {
        readonly initialized: boolean;
        readonly name: string;
        readonly aliases: string[];
        hasName(name: string): boolean;
        readonly allAliases: string[];
        readonly refNames: string[] | undefined;
        readonly allRefNames: string[] | undefined;
        readonly rpcManager: any;
        readonly refNameColors: string[];
    } & {
        getCanonicalRefName(refName: string): string;
        getRefNameColor(refName: string): string | undefined;
        isValidRefName(refName: string): boolean;
    } & {
        setLoading(): void;
        setLoaded({ adapterRegionsWithAssembly, refNameAliases, }: {
            adapterRegionsWithAssembly: import("../util").Region[];
            refNameAliases: Record<string, string>;
        }): void;
        setError(error: Error): void;
        setRegions(regions: import("../util").Region[]): void;
        setRefNameAliases(refNameAliases: Record<string, string>): void;
        afterAttach(): void;
    } & {
        getAdapterMapEntry(adapterConf: unknown, options: import("./assembly").BaseOptions): Promise<{
            forwardMap: Record<string, string>;
            reverseMap: Record<string, string>;
        }>;
        getRefNameMapForAdapter(adapterConf: unknown, opts: import("./assembly").BaseOptions): Promise<Record<string, string>>;
        getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("./assembly").BaseOptions): Promise<Record<string, string>>;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<IAnyType>>;
    }, {
        regions: {
            start: number;
            end: number;
            refName: string;
            assemblyName: string;
        }[] | undefined;
        refNameAliases: {
            [key: string]: string;
        } | undefined;
    } & {
        readonly initialized: boolean;
        readonly name: string;
        readonly aliases: string[];
        hasName(name: string): boolean;
        readonly allAliases: string[];
        readonly refNames: string[] | undefined;
        readonly allRefNames: string[] | undefined;
        readonly rpcManager: any;
        readonly refNameColors: string[];
    } & {
        getCanonicalRefName(refName: string): string;
        getRefNameColor(refName: string): string | undefined;
        isValidRefName(refName: string): boolean;
    } & {
        setLoading(): void;
        setLoaded({ adapterRegionsWithAssembly, refNameAliases, }: {
            adapterRegionsWithAssembly: import("../util").Region[];
            refNameAliases: Record<string, string>;
        }): void;
        setError(error: Error): void;
        setRegions(regions: import("../util").Region[]): void;
        setRefNameAliases(refNameAliases: Record<string, string>): void;
        afterAttach(): void;
    } & {
        getAdapterMapEntry(adapterConf: unknown, options: import("./assembly").BaseOptions): Promise<{
            forwardMap: Record<string, string>;
            reverseMap: Record<string, string>;
        }>;
        getRefNameMapForAdapter(adapterConf: unknown, opts: import("./assembly").BaseOptions): Promise<Record<string, string>>;
        getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("./assembly").BaseOptions): Promise<Record<string, string>>;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
    readonly assemblyList: (import("mobx-state-tree").ModelInstanceTypeProps<Record<string, any>> & {
        setSubschema(slotName: string, data: import("mobx-state-tree").ModelPropertiesDeclaration | import("../configuration/configurationSchema").AnyConfigurationSchemaType): any;
    } & import("mobx-state-tree").IStateTreeNode<import("../configuration/configurationSchema").AnyConfigurationSchemaType> & {
        name: string;
    })[];
    readonly rpcManager: any;
    readonly pluginManager: any;
    readonly allPossibleRefNames: string[] | undefined;
} & {
    waitForAssembly(assemblyName: string): Promise<(import("mobx-state-tree").ModelInstanceTypeProps<{
        configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<IAnyType>>;
    }> & {
        regions: {
            start: number;
            end: number;
            refName: string;
            assemblyName: string;
        }[] | undefined;
        refNameAliases: {
            [key: string]: string;
        } | undefined;
    } & {
        readonly initialized: boolean;
        readonly name: string;
        readonly aliases: string[];
        hasName(name: string): boolean;
        readonly allAliases: string[];
        readonly refNames: string[] | undefined;
        readonly allRefNames: string[] | undefined;
        readonly rpcManager: any;
        readonly refNameColors: string[];
    } & {
        getCanonicalRefName(refName: string): string;
        getRefNameColor(refName: string): string | undefined;
        isValidRefName(refName: string): boolean;
    } & {
        setLoading(): void;
        setLoaded({ adapterRegionsWithAssembly, refNameAliases, }: {
            adapterRegionsWithAssembly: import("../util").Region[];
            refNameAliases: Record<string, string>;
        }): void;
        setError(error: Error): void;
        setRegions(regions: import("../util").Region[]): void;
        setRefNameAliases(refNameAliases: Record<string, string>): void;
        afterAttach(): void;
    } & {
        getAdapterMapEntry(adapterConf: unknown, options: import("./assembly").BaseOptions): Promise<{
            forwardMap: Record<string, string>;
            reverseMap: Record<string, string>;
        }>;
        getRefNameMapForAdapter(adapterConf: unknown, opts: import("./assembly").BaseOptions): Promise<Record<string, string>>;
        getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("./assembly").BaseOptions): Promise<Record<string, string>>;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<IAnyType>>;
    }, {
        regions: {
            start: number;
            end: number;
            refName: string;
            assemblyName: string;
        }[] | undefined;
        refNameAliases: {
            [key: string]: string;
        } | undefined;
    } & {
        readonly initialized: boolean;
        readonly name: string;
        readonly aliases: string[];
        hasName(name: string): boolean;
        readonly allAliases: string[];
        readonly refNames: string[] | undefined;
        readonly allRefNames: string[] | undefined;
        readonly rpcManager: any;
        readonly refNameColors: string[];
    } & {
        getCanonicalRefName(refName: string): string;
        getRefNameColor(refName: string): string | undefined;
        isValidRefName(refName: string): boolean;
    } & {
        setLoading(): void;
        setLoaded({ adapterRegionsWithAssembly, refNameAliases, }: {
            adapterRegionsWithAssembly: import("../util").Region[];
            refNameAliases: Record<string, string>;
        }): void;
        setError(error: Error): void;
        setRegions(regions: import("../util").Region[]): void;
        setRefNameAliases(refNameAliases: Record<string, string>): void;
        afterAttach(): void;
    } & {
        getAdapterMapEntry(adapterConf: unknown, options: import("./assembly").BaseOptions): Promise<{
            forwardMap: Record<string, string>;
            reverseMap: Record<string, string>;
        }>;
        getRefNameMapForAdapter(adapterConf: unknown, opts: import("./assembly").BaseOptions): Promise<Record<string, string>>;
        getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("./assembly").BaseOptions): Promise<Record<string, string>>;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined>;
    getRefNameMapForAdapter(adapterConf: unknown, assemblyName: string, opts: {
        signal?: AbortSignal;
        sessionId: string;
    }): Promise<Record<string, string> | undefined>;
    getReverseRefNameMapForAdapter(adapterConf: unknown, assemblyName: string, opts: {
        signal?: AbortSignal;
        sessionId: string;
    }): Promise<Record<string, string> | undefined>;
    isValidRefName(refName: string, assemblyName?: string | undefined): boolean;
} & {
    removeAssembly(asm: import("mobx-state-tree").ModelInstanceTypeProps<{
        configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<IAnyType>>;
    }> & {
        regions: {
            start: number;
            end: number;
            refName: string;
            assemblyName: string;
        }[] | undefined;
        refNameAliases: {
            [key: string]: string;
        } | undefined;
    } & {
        readonly initialized: boolean;
        readonly name: string;
        readonly aliases: string[];
        hasName(name: string): boolean;
        readonly allAliases: string[];
        readonly refNames: string[] | undefined;
        readonly allRefNames: string[] | undefined;
        readonly rpcManager: any;
        readonly refNameColors: string[];
    } & {
        getCanonicalRefName(refName: string): string;
        getRefNameColor(refName: string): string | undefined;
        isValidRefName(refName: string): boolean;
    } & {
        setLoading(): void;
        setLoaded({ adapterRegionsWithAssembly, refNameAliases, }: {
            adapterRegionsWithAssembly: import("../util").Region[];
            refNameAliases: Record<string, string>;
        }): void;
        setError(error: Error): void;
        setRegions(regions: import("../util").Region[]): void;
        setRefNameAliases(refNameAliases: Record<string, string>): void;
        afterAttach(): void;
    } & {
        getAdapterMapEntry(adapterConf: unknown, options: import("./assembly").BaseOptions): Promise<{
            forwardMap: Record<string, string>;
            reverseMap: Record<string, string>;
        }>;
        getRefNameMapForAdapter(adapterConf: unknown, opts: import("./assembly").BaseOptions): Promise<Record<string, string>>;
        getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("./assembly").BaseOptions): Promise<Record<string, string>>;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<IAnyType>>;
    }, {
        regions: {
            start: number;
            end: number;
            refName: string;
            assemblyName: string;
        }[] | undefined;
        refNameAliases: {
            [key: string]: string;
        } | undefined;
    } & {
        readonly initialized: boolean;
        readonly name: string;
        readonly aliases: string[];
        hasName(name: string): boolean;
        readonly allAliases: string[];
        readonly refNames: string[] | undefined;
        readonly allRefNames: string[] | undefined;
        readonly rpcManager: any;
        readonly refNameColors: string[];
    } & {
        getCanonicalRefName(refName: string): string;
        getRefNameColor(refName: string): string | undefined;
        isValidRefName(refName: string): boolean;
    } & {
        setLoading(): void;
        setLoaded({ adapterRegionsWithAssembly, refNameAliases, }: {
            adapterRegionsWithAssembly: import("../util").Region[];
            refNameAliases: Record<string, string>;
        }): void;
        setError(error: Error): void;
        setRegions(regions: import("../util").Region[]): void;
        setRefNameAliases(refNameAliases: Record<string, string>): void;
        afterAttach(): void;
    } & {
        getAdapterMapEntry(adapterConf: unknown, options: import("./assembly").BaseOptions): Promise<{
            forwardMap: Record<string, string>;
            reverseMap: Record<string, string>;
        }>;
        getRefNameMapForAdapter(adapterConf: unknown, opts: import("./assembly").BaseOptions): Promise<Record<string, string>>;
        getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("./assembly").BaseOptions): Promise<Record<string, string>>;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>): void;
    afterAttach(): void;
    addAssembly(assemblyConfig: Instance<typeof assemblyConfigType> | string): void;
    replaceAssembly(idx: number, assemblyConfig: Instance<typeof assemblyConfigType> | string): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
