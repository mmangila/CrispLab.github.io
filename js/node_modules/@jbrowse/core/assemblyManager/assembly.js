"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = assemblyFactory;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _jsonStableStringify = _interopRequireDefault(require("json-stable-stringify"));

var _mobxStateTree = require("mobx-state-tree");

var _abortablePromiseCache = _interopRequireDefault(require("abortable-promise-cache"));

var _configuration = require("../configuration");

var _util = require("../util");

var _QuickLRU = _interopRequireDefault(require("../util/QuickLRU"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// Based on the UCSC Genome Browser chromosome color palette:
// https://github.com/ucscGenomeBrowser/kent/blob/a50ed53aff81d6fb3e34e6913ce18578292bc24e/src/hg/inc/chromColors.h
// Some colors darkened to have at least a 3:1 contrast ratio on a white
// background
var refNameColors = ['rgb(153, 102, 0)', 'rgb(102, 102, 0)', 'rgb(153, 153, 30)', 'rgb(204, 0, 0)', 'rgb(255, 0, 0)', 'rgb(255, 0, 204)', 'rgb(165, 132, 132)', // originally 'rgb(255, 204, 204)'
'rgb(204, 122, 0)', // originally rgb(255, 153, 0)'
'rgb(178, 142, 0)', // originally 'rgb(255, 204, 0)'
'rgb(153, 153, 0)', // originally 'rgb(255, 255, 0)'
'rgb(122, 153, 0)', // originally 'rgb(204, 255, 0)'
'rgb(0, 165, 0)', // originally 'rgb(0, 255, 0)'
'rgb(53, 128, 0)', 'rgb(0, 0, 204)', 'rgb(96, 145, 242)', // originally 'rgb(102, 153, 255)'
'rgb(107, 142, 178)', // originally 'rgb(153, 204, 255)'
'rgb(0, 165, 165)', // originally 'rgb(0, 255, 255)'
'rgb(122, 153, 153)', // originally 'rgb(204, 255, 255)'
'rgb(153, 0, 204)', 'rgb(204, 51, 255)', 'rgb(173, 130, 216)', // originally 'rgb(204, 153, 255)'
'rgb(102, 102, 102)', 'rgb(145, 145, 145)', // originally 'rgb(153, 153, 153)'
'rgb(142, 142, 142)', // originally 'rgb(204, 204, 204)'
'rgb(142, 142, 107)', // originally 'rgb(204, 204, 153)'
'rgb(96, 163, 48)' // originally 'rgb(121, 204, 61)'
];

function loadRefNameMap(_x, _x2, _x3, _x4) {
  return _loadRefNameMap.apply(this, arguments);
}

function _loadRefNameMap() {
  _loadRefNameMap = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assembly, adapterConf, options, signal) {
    var sessionId, refNames, refNameMap, refNameAliases, reversed, _i, _Object$entries, _Object$entries$_i, canonicalName, adapterName;

    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            sessionId = options.sessionId;
            _context4.next = 3;
            return (0, _util.when)(function () {
              return Boolean(assembly.regions && assembly.refNameAliases);
            }, {
              signal: signal,
              name: 'when assembly ready'
            });

          case 3:
            _context4.next = 5;
            return assembly.rpcManager.call(sessionId, 'CoreGetRefNames', _objectSpread({
              adapterConfig: adapterConf,
              signal: signal
            }, options), {
              timeout: 1000000
            });

          case 5:
            refNames = _context4.sent;
            refNameMap = {};
            refNameAliases = assembly.refNameAliases;

            if (refNameAliases) {
              _context4.next = 10;
              break;
            }

            throw new Error("error loading assembly ".concat(assembly.name, "'s refNameAliases"));

          case 10:
            refNames.forEach(function (refName) {
              checkRefName(refName);
              var canon = assembly.getCanonicalRefName(refName);

              if (canon) {
                refNameMap[canon] = refName;
              }
            }); // make the reversed map too

            reversed = {};

            for (_i = 0, _Object$entries = Object.entries(refNameMap); _i < _Object$entries.length; _i++) {
              _Object$entries$_i = (0, _slicedToArray2.default)(_Object$entries[_i], 2), canonicalName = _Object$entries$_i[0], adapterName = _Object$entries$_i[1];
              reversed[adapterName] = canonicalName;
            }

            return _context4.abrupt("return", {
              forwardMap: refNameMap,
              reverseMap: reversed
            });

          case 14:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _loadRefNameMap.apply(this, arguments);
}

function checkRefName(refName) {
  // Valid refName pattern from https://samtools.github.io/hts-specs/SAMv1.pdf
  if (!refName.match(/[0-9A-Za-z!#$%&+./:;?@^_|~-][0-9A-Za-z!#$%&*+./:;=?@^_|~-]*/)) {
    throw new Error("Encountered invalid refName: \"".concat(refName, "\""));
  }
}

function getAdapterId(adapterConf) {
  return (0, _jsonStableStringify.default)(adapterConf);
}

function assemblyFactory(assemblyConfigType, pluginManager) {
  var adapterLoads = new _abortablePromiseCache.default({
    cache: new _QuickLRU.default({
      maxSize: 1000
    }),
    fill: function fill(args, abortSignal, statusCallback) {
      return (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var adapterConf, self, options;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                adapterConf = args.adapterConf, self = args.self, options = args.options;
                return _context.abrupt("return", loadRefNameMap(self, adapterConf, _objectSpread(_objectSpread({}, options), {}, {
                  statusCallback: statusCallback
                }), abortSignal));

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
    }
  });
  return _mobxStateTree.types.model({
    configuration: _mobxStateTree.types.safeReference(assemblyConfigType)
  }).volatile(function () {
    return {
      regions: undefined,
      refNameAliases: undefined
    };
  }).views(function (self) {
    return {
      get initialized() {
        return Boolean(self.refNameAliases);
      },

      get name() {
        return (0, _configuration.readConfObject)(self.configuration, 'name');
      },

      get aliases() {
        return (0, _configuration.readConfObject)(self.configuration, 'aliases');
      },

      hasName: function hasName(name) {
        return this.name === name || this.aliases.includes(name);
      },

      get allAliases() {
        return [this.name].concat((0, _toConsumableArray2.default)(this.aliases));
      },

      get refNames() {
        return self.regions && self.regions.map(function (region) {
          return region.refName;
        });
      },

      get allRefNames() {
        if (!self.refNameAliases) {
          return undefined;
        }

        return Object.keys(self.refNameAliases);
      },

      get rpcManager() {
        return (0, _mobxStateTree.getParent)(self, 2).rpcManager;
      },

      get refNameColors() {
        var colors = (0, _configuration.readConfObject)(self.configuration, 'refNameColors');

        if (colors.length === 0) {
          return refNameColors;
        }

        return colors;
      }

    };
  }).views(function (self) {
    return {
      getCanonicalRefName: function getCanonicalRefName(refName) {
        if (!self.refNameAliases) {
          throw new Error('aliases not loaded, we expect them to be loaded before getCanonicalRefName can be called');
        }

        return self.refNameAliases[refName];
      },
      getRefNameColor: function getRefNameColor(refName) {
        var _self$refNames;

        var idx = (_self$refNames = self.refNames) === null || _self$refNames === void 0 ? void 0 : _self$refNames.findIndex(function (r) {
          return r === refName;
        });

        if (idx === undefined || idx === -1) {
          return undefined;
        }

        return self.refNameColors[idx % self.refNameColors.length];
      },
      isValidRefName: function isValidRefName(refName) {
        if (!self.refNameAliases) {
          throw new Error('isValidRefName cannot be called yet, the assembly has not finished loading');
        }

        return !!this.getCanonicalRefName(refName);
      }
    };
  }).actions(function (self) {
    return {
      setLoading: function setLoading() {},
      setLoaded: function setLoaded(_ref) {
        var adapterRegionsWithAssembly = _ref.adapterRegionsWithAssembly,
            refNameAliases = _ref.refNameAliases;
        this.setRegions(adapterRegionsWithAssembly);
        this.setRefNameAliases(refNameAliases);
      },
      setError: function setError(error) {
        if (!(0, _mobxStateTree.getParent)(self, 3).isAssemblyEditing) {
          (0, _mobxStateTree.getParent)(self, 3).setError(error);
        }
      },
      setRegions: function setRegions(regions) {
        self.regions = regions;
      },
      setRefNameAliases: function setRefNameAliases(refNameAliases) {
        self.refNameAliases = refNameAliases;
      },
      afterAttach: function afterAttach() {
        (0, _util.makeAbortableReaction)( // eslint-disable-next-line @typescript-eslint/no-explicit-any
        self, // @ts-ignore
        makeLoadAssemblyData(pluginManager), loadAssemblyReaction, {
          name: "".concat(self.name, " assembly loading"),
          fireImmediately: true
        }, this.setLoading, this.setLoaded, this.setError);
      }
    };
  }).views(function (self) {
    return {
      getAdapterMapEntry: function getAdapterMapEntry(adapterConf, options) {
        var signal = options.signal,
            statusCallback = options.statusCallback,
            rest = (0, _objectWithoutProperties2.default)(options, ["signal", "statusCallback"]);

        if (!options.sessionId) {
          throw new Error('sessionId is required');
        }

        var adapterId = getAdapterId(adapterConf);
        return adapterLoads.get(adapterId, {
          adapterConf: adapterConf,
          self: self,
          options: rest
        }, signal, statusCallback);
      },

      /**
       * get Map of `canonical-name -> adapter-specific-name`
       */
      getRefNameMapForAdapter: function getRefNameMapForAdapter(adapterConf, opts) {
        var _this = this;

        return (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          var map;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  if (!(!opts || !opts.sessionId)) {
                    _context2.next = 2;
                    break;
                  }

                  throw new Error('sessionId is required');

                case 2:
                  _context2.next = 4;
                  return _this.getAdapterMapEntry(adapterConf, opts);

                case 4:
                  map = _context2.sent;
                  return _context2.abrupt("return", map.forwardMap);

                case 6:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }))();
      },

      /**
       * get Map of `adapter-specific-name -> canonical-name`
       */
      getReverseRefNameMapForAdapter: function getReverseRefNameMapForAdapter(adapterConf, opts) {
        var _this2 = this;

        return (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
          var map;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.next = 2;
                  return _this2.getAdapterMapEntry(adapterConf, opts);

                case 2:
                  map = _context3.sent;
                  return _context3.abrupt("return", map.reverseMap);

                case 4:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3);
        }))();
      }
    };
  });
}

function makeLoadAssemblyData(pluginManager) {
  return function (self) {
    if (self.configuration) {
      var _self$configuration$r;

      // use full configuration instead of snapshot of the config, the
      // rpcManager normally receives a snapshot but we bypass rpcManager here
      // to avoid spinning up a webworker
      var sequenceAdapterConfig = self.configuration.sequence.adapter;
      var refNameAliasesAdapterConfig = (_self$configuration$r = self.configuration.refNameAliases) === null || _self$configuration$r === void 0 ? void 0 : _self$configuration$r.adapter;
      return {
        sequenceAdapterConfig: sequenceAdapterConfig,
        assemblyName: self.name,
        refNameAliasesAdapterConfig: refNameAliasesAdapterConfig,
        pluginManager: pluginManager
      };
    }

    return undefined;
  };
}

function loadAssemblyReaction(_x5, _x6) {
  return _loadAssemblyReaction.apply(this, arguments);
}

function _loadAssemblyReaction() {
  _loadAssemblyReaction = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(props, signal) {
    var sequenceAdapterConfig, assemblyName, refNameAliasesAdapterConfig, pluginManager, dataAdapterType, AdapterClass, getAdapterClass, CLASS, adapter, adapterRegions, adapterRegionsWithAssembly, refNameAliases, refAliasAdapterType, RefAdapterClass, getRefAdapterClass, REFCLASS, refNameAliasAdapter, refNameAliasesList;
    return regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (props) {
              _context5.next = 2;
              break;
            }

            return _context5.abrupt("return");

          case 2:
            sequenceAdapterConfig = props.sequenceAdapterConfig, assemblyName = props.assemblyName, refNameAliasesAdapterConfig = props.refNameAliasesAdapterConfig, pluginManager = props.pluginManager;
            dataAdapterType = pluginManager.getAdapterType(sequenceAdapterConfig.type);
            AdapterClass = dataAdapterType.AdapterClass, getAdapterClass = dataAdapterType.getAdapterClass;
            _context5.t0 = AdapterClass;

            if (_context5.t0) {
              _context5.next = 10;
              break;
            }

            _context5.next = 9;
            return getAdapterClass === null || getAdapterClass === void 0 ? void 0 : getAdapterClass();

          case 9:
            _context5.t0 = _context5.sent;

          case 10:
            CLASS = _context5.t0;

            if (CLASS) {
              _context5.next = 13;
              break;
            }

            throw new Error('Failed to get adapter class');

          case 13:
            adapter = new CLASS(sequenceAdapterConfig);
            _context5.next = 16;
            return adapter.getRegions({
              signal: signal
            });

          case 16:
            adapterRegions = _context5.sent;
            adapterRegionsWithAssembly = adapterRegions.map(function (adapterRegion) {
              var refName = adapterRegion.refName;
              checkRefName(refName);
              return _objectSpread(_objectSpread({}, adapterRegion), {}, {
                assemblyName: assemblyName
              });
            });
            refNameAliases = {};

            if (!refNameAliasesAdapterConfig) {
              _context5.next = 35;
              break;
            }

            refAliasAdapterType = pluginManager.getAdapterType(refNameAliasesAdapterConfig.type);
            RefAdapterClass = refAliasAdapterType.AdapterClass, getRefAdapterClass = refAliasAdapterType.getAdapterClass;
            _context5.t1 = RefAdapterClass;

            if (_context5.t1) {
              _context5.next = 27;
              break;
            }

            _context5.next = 26;
            return getRefAdapterClass === null || getRefAdapterClass === void 0 ? void 0 : getRefAdapterClass();

          case 26:
            _context5.t1 = _context5.sent;

          case 27:
            REFCLASS = _context5.t1;

            if (REFCLASS) {
              _context5.next = 30;
              break;
            }

            throw new Error('Failed to get REFCLASS');

          case 30:
            refNameAliasAdapter = new REFCLASS(refNameAliasesAdapterConfig);
            _context5.next = 33;
            return refNameAliasAdapter.getRefNameAliases({
              signal: signal
            });

          case 33:
            refNameAliasesList = _context5.sent;
            refNameAliasesList.forEach(function (_ref2) {
              var refName = _ref2.refName,
                  aliases = _ref2.aliases;
              aliases.forEach(function (alias) {
                checkRefName(alias);
                refNameAliases[alias] = refName;
              });
            });

          case 35:
            // add identity to the refNameAliases list
            adapterRegionsWithAssembly.forEach(function (region) {
              refNameAliases[region.refName] = region.refName;
            });
            return _context5.abrupt("return", {
              adapterRegionsWithAssembly: adapterRegionsWithAssembly,
              refNameAliases: refNameAliases
            });

          case 37:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _loadAssemblyReaction.apply(this, arguments);
}