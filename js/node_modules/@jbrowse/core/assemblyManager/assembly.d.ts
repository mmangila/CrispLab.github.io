import { IAnyType, Instance } from 'mobx-state-tree';
import PluginManager from '../PluginManager';
import { Region } from '../util/types';
declare type RefNameAliases = Record<string, string>;
export interface BaseOptions {
    signal?: AbortSignal;
    sessionId: string;
    statusCallback?: Function;
}
export default function assemblyFactory(assemblyConfigType: IAnyType, pluginManager: PluginManager): import("mobx-state-tree").IModelType<{
    configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<IAnyType>>;
}, {
    regions: {
        start: number;
        end: number;
        refName: string;
        assemblyName: string;
    }[] | undefined;
    refNameAliases: {
        [key: string]: string;
    } | undefined;
} & {
    readonly initialized: boolean;
    readonly name: string;
    readonly aliases: string[];
    hasName(name: string): boolean;
    readonly allAliases: string[];
    readonly refNames: string[] | undefined;
    readonly allRefNames: string[] | undefined;
    readonly rpcManager: any;
    readonly refNameColors: string[];
} & {
    getCanonicalRefName(refName: string): string;
    getRefNameColor(refName: string): string | undefined;
    isValidRefName(refName: string): boolean;
} & {
    setLoading(): void;
    setLoaded({ adapterRegionsWithAssembly, refNameAliases, }: {
        adapterRegionsWithAssembly: Region[];
        refNameAliases: RefNameAliases;
    }): void;
    setError(error: Error): void;
    setRegions(regions: Region[]): void;
    setRefNameAliases(refNameAliases: RefNameAliases): void;
    afterAttach(): void;
} & {
    getAdapterMapEntry(adapterConf: unknown, options: BaseOptions): Promise<{
        forwardMap: Record<string, string>;
        reverseMap: Record<string, string>;
    }>;
    /**
     * get Map of `canonical-name -> adapter-specific-name`
     */
    getRefNameMapForAdapter(adapterConf: unknown, opts: BaseOptions): Promise<Record<string, string>>;
    /**
     * get Map of `adapter-specific-name -> canonical-name`
     */
    getReverseRefNameMapForAdapter(adapterConf: unknown, opts: BaseOptions): Promise<Record<string, string>>;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export declare type Assembly = Instance<ReturnType<typeof assemblyFactory>>;
export {};
