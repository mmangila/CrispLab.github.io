"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NewFeatureRendererType = exports.default = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _operators = require("rxjs/operators");

var _util = require("../../util");

var _simpleFeature = _interopRequireDefault(require("../../util/simpleFeature"));

var _ServerSideRendererType = _interopRequireDefault(require("./ServerSideRendererType"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var FeatureRendererType = /*#__PURE__*/function (_ServerSideRendererTy) {
  (0, _inherits2.default)(FeatureRendererType, _ServerSideRendererTy);

  var _super = _createSuper(FeatureRendererType);

  function FeatureRendererType() {
    (0, _classCallCheck2.default)(this, FeatureRendererType);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(FeatureRendererType, [{
    key: "serializeArgsInClient",
    value:
    /**
     * replaces the `displayModel` param (which on the client is a MST model) with
     * a stub that only contains the `selectedFeature`, since this is the only
     * part of the track model that most renderers read. also serializes the
     * config and regions to JSON from MST objects.
     *
     * @param args - the arguments passed to render
     */
    function serializeArgsInClient(args) {
      var displayModel = args.displayModel,
          regions = args.regions;

      var serializedArgs = _objectSpread(_objectSpread({}, args), {}, {
        displayModel: displayModel && {
          id: displayModel.id,
          selectedFeatureId: displayModel.selectedFeatureId
        },
        regions: JSON.parse(JSON.stringify(regions))
      });

      return (0, _get2.default)((0, _getPrototypeOf2.default)(FeatureRendererType.prototype), "serializeArgsInClient", this).call(this, serializedArgs);
    }
    /**
     * Adds feature deserialization to base server-side result deserialization
     *
     * @param results - the results of the render
     * @param args - the arguments passed to render
     */

  }, {
    key: "deserializeResultsInClient",
    value: function deserializeResultsInClient(result, args) {
      var deserializedFeatures = new Map();
      result.features.forEach(function (j) {
        var f = _simpleFeature.default.fromJSON(j);

        deserializedFeatures.set(String(f.id()), f);
      });
      var deserialized = (0, _get2.default)((0, _getPrototypeOf2.default)(FeatureRendererType.prototype), "deserializeResultsInClient", this).call(this, _objectSpread(_objectSpread({}, result), {}, {
        features: deserializedFeatures
      }), args);
      return _objectSpread(_objectSpread({}, deserialized), {}, {
        blockKey: args.blockKey,
        features: deserializedFeatures
      });
    }
    /**
     * Adds feature serialization to base server-side result serialization
     *
     * @param results - object containing the results of calling the `render`
     * method
     * @param args - deserialized render args
     */

  }, {
    key: "serializeResultsInWorker",
    value: function serializeResultsInWorker(result, args) {
      var serialized = (0, _get2.default)((0, _getPrototypeOf2.default)(FeatureRendererType.prototype), "serializeResultsInWorker", this).call(this, result, args);
      return _objectSpread(_objectSpread({}, serialized), {}, {
        features: (0, _util.iterMap)(result.features.values(), function (f) {
          return f.toJSON();
        })
      });
    }
    /**
     * will expand if soft clipping or feature glyphs are shown
     *
     * @param region - rendering region
     * @param _renderArgs - render args, unused, may be used in deriving classes
     */

  }, {
    key: "getExpandedRegion",
    value: function getExpandedRegion(region, _renderArgs) {
      return region;
    }
    /**
     * use the dataAdapter to fetch the features to be rendered
     *
     * @param renderArgs -
     * @returns Map of features as `{ id => feature, ... }`
     */

  }, {
    key: "getFeatures",
    value: function () {
      var _getFeatures = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee(renderArgs) {
        var _this = this;

        var dataAdapter, signal, regions, features, requestRegions, region, featureObservable;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                dataAdapter = renderArgs.dataAdapter, signal = renderArgs.signal, regions = renderArgs.regions;
                features = new Map();

                if (!(!regions || regions.length === 0)) {
                  _context.next = 4;
                  break;
                }

                return _context.abrupt("return", features);

              case 4:
                requestRegions = regions.map(function (r) {
                  // make sure the requested region's start and end are integers, if
                  // there is a region specification.
                  var requestRegion = _objectSpread({}, r);

                  if (requestRegion.start) {
                    requestRegion.start = Math.floor(requestRegion.start);
                  }

                  if (requestRegion.end) {
                    requestRegion.end = Math.ceil(requestRegion.end);
                  }

                  return requestRegion;
                });
                region = requestRegions[0];
                featureObservable = requestRegions.length === 1 ? dataAdapter.getFeatures(this.getExpandedRegion(region, renderArgs), // @ts-ignore
                renderArgs) : // @ts-ignore
                dataAdapter.getFeaturesInMultipleRegions(requestRegions, renderArgs);
                _context.next = 9;
                return featureObservable.pipe((0, _operators.tap)(function () {
                  return (0, _util.checkAbortSignal)(signal);
                }), (0, _operators.filter)(function (feature) {
                  return _this.featurePassesFilters(renderArgs, feature);
                }), (0, _operators.tap)(function (feature) {
                  var id = feature.id();

                  if (!id) {
                    throw new Error("invalid feature id \"".concat(id, "\""));
                  }

                  features.set(id, feature);
                }), (0, _operators.ignoreElements)()).toPromise();

              case 9:
                return _context.abrupt("return", features);

              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getFeatures(_x) {
        return _getFeatures.apply(this, arguments);
      }

      return getFeatures;
    }()
    /**
     * @param renderArgs -
     * @param feature -
     * @returns true if this feature passes all configured filters
     */

  }, {
    key: "featurePassesFilters",
    value: function featurePassesFilters(renderArgs, feature) {
      if (!renderArgs.filters) {
        return true;
      }

      return renderArgs.filters.passes(feature, renderArgs);
    }
    /**
     * gets features and renders
     *
     * @param props - render args
     */

  }, {
    key: "render",
    value: function () {
      var _render = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(props) {
        var features, result;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.t0 = props.features;

                if (_context2.t0) {
                  _context2.next = 5;
                  break;
                }

                _context2.next = 4;
                return this.getFeatures(props);

              case 4:
                _context2.t0 = _context2.sent;

              case 5:
                features = _context2.t0;
                _context2.next = 8;
                return (0, _get2.default)((0, _getPrototypeOf2.default)(FeatureRendererType.prototype), "render", this).call(this, _objectSpread(_objectSpread({}, props), {}, {
                  features: features
                }));

              case 8:
                result = _context2.sent;
                return _context2.abrupt("return", _objectSpread(_objectSpread({}, result), {}, {
                  features: features
                }));

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function render(_x2) {
        return _render.apply(this, arguments);
      }

      return render;
    }()
  }]);
  return FeatureRendererType;
}(_ServerSideRendererType.default);

exports.default = FeatureRendererType;

var NewFeatureRendererType = /*#__PURE__*/function (_ServerSideRendererTy2) {
  (0, _inherits2.default)(NewFeatureRendererType, _ServerSideRendererTy2);

  var _super2 = _createSuper(NewFeatureRendererType);

  function NewFeatureRendererType() {
    (0, _classCallCheck2.default)(this, NewFeatureRendererType);
    return _super2.apply(this, arguments);
  }

  return NewFeatureRendererType;
}(_ServerSideRendererType.default);

exports.NewFeatureRendererType = NewFeatureRendererType;