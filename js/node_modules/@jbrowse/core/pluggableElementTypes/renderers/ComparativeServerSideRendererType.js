"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _operators = require("rxjs/operators");

var _ServerSideRendererType = _interopRequireDefault(require("./ServerSideRendererType"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var ComparativeServerSideRenderer = /*#__PURE__*/function (_ServerSideRenderer) {
  (0, _inherits2.default)(ComparativeServerSideRenderer, _ServerSideRenderer);

  var _super = _createSuper(ComparativeServerSideRenderer);

  function ComparativeServerSideRenderer() {
    (0, _classCallCheck2.default)(this, ComparativeServerSideRenderer);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(ComparativeServerSideRenderer, [{
    key: "serializeArgsInClient",
    value:
    /**
     * directly modifies the render arguments to prepare
     * them to be serialized and sent to the worker.
     *
     * the base class replaces the `displayModel` param
     * (which on the client is a MST model) with a stub
     * that only contains the `selectedFeature`, since
     * this is the only part of the track model that most
     * renderers read.
     *
     * @param args - the arguments passed to render
     * @returns the same object
     */
    function serializeArgsInClient(args) {
      var deserializedArgs = _objectSpread(_objectSpread({}, args), {}, {
        displayModel: {}
      });

      return (0, _get2.default)((0, _getPrototypeOf2.default)(ComparativeServerSideRenderer.prototype), "serializeArgsInClient", this).call(this, deserializedArgs);
    } // deserialize some of the results that came back from the worker

  }, {
    key: "deserializeResultsInClient",
    value: function deserializeResultsInClient(result, args) {
      var deserialized = (0, _get2.default)((0, _getPrototypeOf2.default)(ComparativeServerSideRenderer.prototype), "deserializeResultsInClient", this).call(this, result, args);
      return _objectSpread(_objectSpread({}, deserialized), {}, {
        blockKey: args.blockKey
      });
    }
    /**
     * Render method called on the client. Serializes args, then
     * calls `render` with the RPC manager.
     */

  }, {
    key: "renderInClient",
    value: function () {
      var _renderInClient = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee(rpcManager, args) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", rpcManager.call(args.sessionId, 'ComparativeRender', args));

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function renderInClient(_x, _x2) {
        return _renderInClient.apply(this, arguments);
      }

      return renderInClient;
    }()
    /**
     * @param renderArgs -
     * @param feature -
     * @returns true if this feature passes all configured filters
     */

  }, {
    key: "featurePassesFilters",
    value: function featurePassesFilters(renderArgs, feature) {
      if (!renderArgs.filters) {
        return true;
      }

      return renderArgs.filters.passes(feature, renderArgs);
    }
  }, {
    key: "getFeatures",
    value: function () {
      var _getFeatures = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(renderArgs) {
        var _this = this;

        var dataAdapter, signal, regions, requestRegions, featureObservable;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                dataAdapter = renderArgs.dataAdapter, signal = renderArgs.signal;
                regions = []; // @ts-ignore this is instantiated by the getFeatures call

                regions = renderArgs.regions;

                if (!(!regions || regions.length === 0)) {
                  _context2.next = 6;
                  break;
                }

                console.warn('no regions supplied to comparative renderer');
                return _context2.abrupt("return", []);

              case 6:
                requestRegions = regions.map(function (r) {
                  // make sure the requested region's start and end are integers, if
                  // there is a region specification.
                  var requestRegion = _objectSpread({}, r);

                  if (requestRegion.start) {
                    requestRegion.start = Math.floor(requestRegion.start);
                  }

                  if (requestRegion.end) {
                    requestRegion.end = Math.floor(requestRegion.end);
                  }

                  return requestRegion;
                }); // note that getFeaturesInMultipleRegions does not do glyph expansion

                featureObservable = dataAdapter.getFeaturesInMultipleRegions(requestRegions, {
                  signal: signal
                });
                return _context2.abrupt("return", featureObservable.pipe( // @ts-ignore
                (0, _operators.filter)(function (feature) {
                  return _this.featurePassesFilters(renderArgs, feature);
                }), (0, _operators.toArray)()).toPromise());

              case 9:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function getFeatures(_x3) {
        return _getFeatures.apply(this, arguments);
      }

      return getFeatures;
    }()
  }]);
  return ComparativeServerSideRenderer;
}(_ServerSideRendererType.default);

exports.default = ComparativeServerSideRenderer;