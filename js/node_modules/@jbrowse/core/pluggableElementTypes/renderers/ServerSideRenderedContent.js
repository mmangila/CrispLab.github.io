"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ServerSideRenderedContent;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _styles = require("@material-ui/core/styles");

var _react = _interopRequireWildcard(require("react"));

var _reactDom = require("react-dom");

var _ui = require("../../ui");

var _util = require("../../util");

function ServerSideRenderedContent(props) {
  var ssrContainerNode = (0, _react.useRef)(null);
  var theme = props.theme,
      html = props.html,
      RenderingComponent = props.RenderingComponent,
      rest = (0, _objectWithoutProperties2.default)(props, ["theme", "html", "RenderingComponent"]);
  var jbrowseTheme = (0, _ui.createJBrowseTheme)(theme);
  (0, _react.useEffect)(function () {
    var domNode = ssrContainerNode.current;

    function doHydrate() {
      if (domNode) {
        if (domNode) {
          (0, _reactDom.unmountComponentAtNode)(domNode);
        }

        domNode.innerHTML = html; // defer main-thread rendering and hydration for when
        // we have some free time. helps keep the framerate up.
        //
        // note: the timeout param to rIC below helps when you are doing
        // a long continuous scroll, it forces it to evaluate because
        // otherwise the continuous scroll would never give it time to do
        // so

        (0, _util.rIC)(function () {
          (0, _reactDom.hydrate)( /*#__PURE__*/_react.default.createElement(_styles.ThemeProvider, {
            theme: jbrowseTheme
          }, /*#__PURE__*/_react.default.createElement(RenderingComponent, rest)), domNode);
        }, {
          timeout: 300
        });
      }
    }

    doHydrate();
    return function () {
      if (domNode) {
        (0, _reactDom.unmountComponentAtNode)(domNode);
      }
    };
  }, [html, jbrowseTheme, rest]);
  return /*#__PURE__*/_react.default.createElement("div", {
    ref: ssrContainerNode,
    "data-html-size": html.length,
    className: "ssr-container"
  });
}