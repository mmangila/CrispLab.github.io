"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.LayoutSession = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _fastDeepEqual = _interopRequireDefault(require("fast-deep-equal"));

var _GranularRectLayout = _interopRequireDefault(require("../../util/layouts/GranularRectLayout"));

var _MultiLayout = _interopRequireDefault(require("../../util/layouts/MultiLayout"));

var _PrecomputedLayout = _interopRequireDefault(require("../../util/layouts/PrecomputedLayout"));

var _FeatureRendererType2 = _interopRequireDefault(require("./FeatureRendererType"));

var _configuration = require("../../configuration");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var LayoutSession = /*#__PURE__*/function () {
  function LayoutSession(args) {
    (0, _classCallCheck2.default)(this, LayoutSession);
    (0, _defineProperty2.default)(this, "config", void 0);
    (0, _defineProperty2.default)(this, "bpPerPx", void 0);
    (0, _defineProperty2.default)(this, "filters", void 0);
    (0, _defineProperty2.default)(this, "cachedLayout", void 0);
    this.config = args.config;

    if (!(0, _configuration.isConfigurationModel)(this.config)) {
      throw new Error('configuration required');
    }

    this.bpPerPx = args.bpPerPx;
    this.filters = args.filters;
    this.update(args);
  }

  (0, _createClass2.default)(LayoutSession, [{
    key: "update",
    value: function update(props) {
      Object.assign(this, props);
    }
  }, {
    key: "makeLayout",
    value: function makeLayout() {
      return new _MultiLayout.default(_GranularRectLayout.default, {
        maxHeight: (0, _configuration.readConfObject)(this.config, 'maxHeight'),
        displayMode: (0, _configuration.readConfObject)(this.config, 'displayMode'),
        pitchX: this.bpPerPx,
        pitchY: (0, _configuration.readConfObject)(this.config, 'noSpacing') ? 1 : 3
      });
    }
    /**
     * @param layout -
     * @returns true if the given layout is a valid one to use for this session
     */

  }, {
    key: "cachedLayoutIsValid",
    value: function cachedLayoutIsValid(cachedLayout) {
      return cachedLayout && cachedLayout.layout.subLayoutConstructorArgs.pitchX === this.bpPerPx && (0, _fastDeepEqual.default)((0, _configuration.readConfObject)(this.config), cachedLayout.config) && (0, _fastDeepEqual.default)(this.filters, cachedLayout.filters);
    }
  }, {
    key: "layout",
    get: function get() {
      if (!this.cachedLayout || !this.cachedLayoutIsValid(this.cachedLayout)) {
        this.cachedLayout = {
          layout: this.makeLayout(),
          config: (0, _configuration.readConfObject)(this.config),
          filters: this.filters
        };
      }

      return this.cachedLayout.layout;
    }
  }]);
  return LayoutSession;
}(); /// *****************************************************************************
/// *****************************************************************************
/// *****************************************************************************


exports.LayoutSession = LayoutSession;

var BoxRendererType = /*#__PURE__*/function (_FeatureRendererType) {
  (0, _inherits2.default)(BoxRendererType, _FeatureRendererType);

  var _super = _createSuper(BoxRendererType);

  function BoxRendererType() {
    var _this;

    (0, _classCallCheck2.default)(this, BoxRendererType);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "sessions", {});
    return _this;
  }

  (0, _createClass2.default)(BoxRendererType, [{
    key: "getWorkerSession",
    value: function getWorkerSession(props) {
      var sessionId = props.sessionId;

      if (!this.sessions[sessionId]) {
        this.sessions[sessionId] = this.createSession(props);
      }

      var session = this.sessions[sessionId];
      session.update(props);
      return session;
    } // expands region for glyphs to use

  }, {
    key: "getExpandedRegion",
    value: function getExpandedRegion(region, renderArgs) {
      if (!region) {
        return region;
      }

      var bpPerPx = renderArgs.bpPerPx,
          config = renderArgs.config;
      var maxFeatureGlyphExpansion = config === undefined ? 0 : (0, _configuration.readConfObject)(config, 'maxFeatureGlyphExpansion');

      if (!maxFeatureGlyphExpansion) {
        return region;
      }

      var bpExpansion = Math.round(maxFeatureGlyphExpansion * bpPerPx);
      return _objectSpread(_objectSpread({}, region), {}, {
        start: Math.floor(Math.max(region.start - bpExpansion, 0)),
        end: Math.ceil(region.end + bpExpansion)
      });
    }
  }, {
    key: "createSession",
    value: function createSession(props) {
      return new LayoutSession(props);
    }
  }, {
    key: "freeResourcesInClient",
    value: function () {
      var _freeResourcesInClient = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee(rpcManager, args) {
        var sessionId, regions, freed, session;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                sessionId = args.sessionId, regions = args.regions;
                freed = 0;
                session = this.sessions[sessionId];

                if (!regions && session) {
                  delete this.sessions[sessionId];
                  freed = 1;
                }

                if (session && regions) {
                  session.layout.discardRange(regions[0].refName, regions[0].start, regions[0].end);
                }

                _context.t0 = freed;
                _context.next = 8;
                return (0, _get2.default)((0, _getPrototypeOf2.default)(BoxRendererType.prototype), "freeResourcesInClient", this).call(this, rpcManager, args);

              case 8:
                _context.t1 = _context.sent;
                return _context.abrupt("return", _context.t0 + _context.t1);

              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function freeResourcesInClient(_x, _x2) {
        return _freeResourcesInClient.apply(this, arguments);
      }

      return freeResourcesInClient;
    }()
  }, {
    key: "deserializeLayoutInClient",
    value: function deserializeLayoutInClient(json) {
      return new _PrecomputedLayout.default(json);
    }
  }, {
    key: "deserializeResultsInClient",
    value: function deserializeResultsInClient(result, args) {
      var layout = this.deserializeLayoutInClient(result.layout);
      var deserialized = (0, _get2.default)((0, _getPrototypeOf2.default)(BoxRendererType.prototype), "deserializeResultsInClient", this).call(this, _objectSpread(_objectSpread({}, result), {}, {
        layout: layout
      }), args); // // debugging aid: check if there are features in `features` that are not in the layout
      // const featureIds1 = iterMap(deserialized.features.values(), f =>
      //   f.id(),
      // ).sort()
      // const featureIds2 = Object.keys(
      //   deserialized.layout.toJSON().rectangles,
      // ).sort()
      // if (
      //   featureIds1.length > featureIds2.length &&
      //   !deserialized.layout.maxHeightReached
      // )
      //   debugger

      return deserialized;
    }
  }, {
    key: "createLayoutInWorker",
    value: function createLayoutInWorker(args) {
      var regions = args.regions;
      var session = this.getWorkerSession(args);
      var subLayout = session.layout.getSublayout(regions[0].refName);
      return subLayout;
    }
  }, {
    key: "serializeResultsInWorker",
    value: function serializeResultsInWorker(results, args) {
      var serialized = (0, _get2.default)((0, _getPrototypeOf2.default)(BoxRendererType.prototype), "serializeResultsInWorker", this).call(this, results, args);

      var _args$regions = (0, _slicedToArray2.default)(args.regions, 1),
          region = _args$regions[0];

      serialized.layout = results.layout.serializeRegion(this.getExpandedRegion(region, args));

      if (serialized.layout.rectangles) {
        serialized.features = serialized.features.filter(function (f) {
          return Boolean(serialized.layout.rectangles[f.uniqueId]);
        });
      }

      serialized.maxHeightReached = serialized.layout.maxHeightReached;
      return serialized;
    }
    /**
     * gets layout and renders
     *
     * @param props - render args
     */

  }, {
    key: "render",
    value: function () {
      var _render = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(props) {
        var layout, result;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                layout = props.layout || this.createLayoutInWorker(props);
                _context2.next = 3;
                return (0, _get2.default)((0, _getPrototypeOf2.default)(BoxRendererType.prototype), "render", this).call(this, _objectSpread(_objectSpread({}, props), {}, {
                  layout: layout
                }));

              case 3:
                result = _context2.sent;
                return _context2.abrupt("return", _objectSpread(_objectSpread({}, result), {}, {
                  layout: layout
                }));

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function render(_x3) {
        return _render.apply(this, arguments);
      }

      return render;
    }()
  }]);
  return BoxRendererType;
}(_FeatureRendererType2.default);

exports.default = BoxRendererType;