import PluginManager from '../PluginManager';
import PluggableElementBase from './PluggableElementBase';
import { RemoteAbortSignal } from '../rpc/remoteAbortSignals';
export declare type RpcMethodConstructor = new (pm: PluginManager) => RpcMethodType;
export default abstract class RpcMethodType extends PluggableElementBase {
    pluginManager: PluginManager;
    name: string;
    constructor(pluginManager: PluginManager);
    serializeArguments(args: {}, _rpcDriverClassName: string): Promise<{}>;
    deserializeArguments<SERIALIZED extends {
        signal?: RemoteAbortSignal;
        blobMap?: Record<string, File>;
    }>(serializedArgs: SERIALIZED, _rpcDriverClassName: string): Promise<(SERIALIZED & {
        signal: AbortSignal;
    }) | (SERIALIZED & {
        signal: undefined;
    })>;
    abstract execute(serializedArgs: unknown, rpcDriverClassName: string): Promise<unknown>;
    serializeReturn(originalReturn: unknown, _args: unknown, _rpcDriverClassName: string): Promise<unknown>;
    deserializeReturn(serializedReturn: unknown, _args: unknown, _rpcDriverClassName: string): Promise<unknown>;
}
