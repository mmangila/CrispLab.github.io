"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createBaseTrackConfig = createBaseTrackConfig;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _mobxStateTree = require("mobx-state-tree");

var _configuration = require("../../configuration");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function createBaseTrackConfig(pluginManager) {
  return (0, _configuration.ConfigurationSchema)('BaseTrack', {
    name: {
      description: 'descriptive name of the track',
      type: 'string',
      defaultValue: 'Track'
    },
    assemblyNames: {
      description: 'name of the assembly (or assemblies) track belongs to',
      type: 'stringArray',
      defaultValue: ['assemblyName']
    },
    description: {
      description: 'a description of the track',
      type: 'string',
      defaultValue: ''
    },
    category: {
      description: 'the category and sub-categories of a track',
      type: 'stringArray',
      defaultValue: []
    },
    metadata: {
      type: 'frozen',
      description: 'anything to add about this track',
      defaultValue: {}
    },
    textSearchIndexingAttributes: {
      type: 'stringArray',
      description: 'list of which feature attributes to index for text searching',
      defaultValue: ['Name', 'ID', 'Description']
    },
    adapter: pluginManager.pluggableConfigSchemaType('adapter'),
    textSearchAdapter: pluginManager.pluggableConfigSchemaType('text search adapter'),
    displays: _mobxStateTree.types.array(pluginManager.pluggableConfigSchemaType('display')) // see corresponding entry in circular-view ChordTrack
    // no config slot editor exists for this at the time being
    // configRelationships: {
    //   type: 'configRelationships',
    //   model: types.array(
    //     types.model('Relationship', {
    //       type: types.string,
    //       target: types.maybe(types.reference(base)),
    //     }),
    //   ),
    //   defaultValue: [],
    // },

  }, {
    preProcessSnapshot: function preProcessSnapshot(s) {
      var snap = JSON.parse(JSON.stringify(s));
      var displayTypes = new Set();
      var _snap$displays = snap.displays,
          displays = _snap$displays === void 0 ? [] : _snap$displays;

      if (snap.trackId !== 'placeholderId') {
        // Gets the displays on the track snapshot and the possible displays
        // from the track type and adds any missing possible displays to the
        // snapshot
        displays.forEach(function (d) {
          return d && displayTypes.add(d.type);
        });
        var trackType = pluginManager.getTrackType(snap.type);
        trackType.displayTypes.forEach(function (displayType) {
          if (!displayTypes.has(displayType.name)) {
            displays.push({
              displayId: "".concat(snap.trackId, "-").concat(displayType.name),
              type: displayType.name
            });
          }
        });
      }

      return _objectSpread(_objectSpread({}, snap), {}, {
        displays: displays
      });
    },
    explicitIdentifier: 'trackId',
    explicitlyTyped: true,
    actions: function actions(self) {
      return {
        addDisplayConf: function addDisplayConf(displayConf) {
          var type = displayConf.type;

          if (!type) {
            throw new Error("unknown display type ".concat(type));
          }

          var display = self.displays.find(function (d) {
            return d && d.displayId === displayConf.displayId;
          });

          if (display) {
            return display;
          }

          var length = self.displays.push(displayConf);
          return self.displays[length - 1];
        }
      };
    }
  });
}