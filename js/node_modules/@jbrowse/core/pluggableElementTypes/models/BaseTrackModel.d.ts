import { Instance } from 'mobx-state-tree';
import { AnyConfigurationSchemaType } from '../../configuration/configurationSchema';
import PluginManager from '../../PluginManager';
import { MenuItem } from '../../ui';
export declare function createBaseTrackModel(pluginManager: PluginManager, trackType: string, baseTrackConfig: AnyConfigurationSchemaType): import("mobx-state-tree").IModelType<{
    id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    type: import("mobx-state-tree").ISimpleType<string>;
    configuration: import("mobx-state-tree").ITypeUnion<any, any, any>;
    displays: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
}, {
    readonly rpcSessionId: any;
    readonly name: any;
    readonly textSearchAdapter: any;
    /**
     * the PluggableElementType for the currently defined adapter
     */
    readonly adapterType: any;
    readonly viewMenuActions: MenuItem[];
    readonly canConfigure: any;
    readonly composedTrackMenuItems: MenuItem[];
} & {
    activateConfigurationUI(): void;
    showDisplay(displayId: string, initialSnapshot?: {}): void;
    hideDisplay(displayId: string): number;
    replaceDisplay(oldDisplayId: string, newDisplayId: string, initialSnapshot?: {}): void;
} & {
    readonly trackMenuItems: MenuItem[];
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export declare type BaseTrackStateModel = ReturnType<typeof createBaseTrackModel>;
export declare type BaseTrackModel = Instance<BaseTrackStateModel>;
