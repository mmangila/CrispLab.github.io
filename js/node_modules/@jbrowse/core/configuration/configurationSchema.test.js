"use strict";

var _mobxStateTree = require("mobx-state-tree");

var _configurationSchema = require("./configurationSchema");

var _util = require("./util");

var _ = require(".");

describe('configuration schemas', function () {
  test('can make a schema with a color', function () {
    var container = _mobxStateTree.types.model({
      configuration: (0, _configurationSchema.ConfigurationSchema)('Track', {
        backgroundColor: {
          description: "the track's background color",
          type: 'color',
          defaultValue: '#eee'
        },
        someInteger: {
          description: 'an integer slot',
          type: 'integer',
          defaultValue: 12
        }
      })
    });

    var model = container.create();
    expect((0, _util.isConfigurationModel)(model.configuration)).toBe(true);
    expect((0, _.getConf)(model, 'backgroundColor')).toBe('#eee');
    expect((0, _.getConf)(model, 'someInteger')).toBe(12);
    model.configuration.backgroundColor.set("jexl:'#'+a");
    expect((0, _.getConf)(model, 'backgroundColor', {
      a: 'zonk'
    })).toBe('#zonk');
    expect((0, _.getConf)(model, 'backgroundColor', {
      a: 'bar'
    })).toBe('#bar');
    model.configuration.backgroundColor.set('hoog');
    expect((0, _.getConf)(model, 'backgroundColor', {
      a: 'zonk'
    })).toBe('hoog');
    model.configuration.someInteger.set('jexl:5+a');
    expect((0, _.getConf)(model, 'someInteger', {
      a: 5
    })).toBe(10);
    model.configuration.someInteger.set(42);
    expect((0, _.getConf)(model, 'someInteger', {
      a: 5
    })).toBe(42);
  });
  test('can nest an array of configuration schemas', function () {
    var container = _mobxStateTree.types.model({
      configuration: (0, _configurationSchema.ConfigurationSchema)('Foo', {
        someInteger: {
          description: 'an integer slot',
          type: 'integer',
          defaultValue: 12
        },
        myArrayOfSubConfigurations: _mobxStateTree.types.array((0, _configurationSchema.ConfigurationSchema)('SubObject', {
          someNumber: {
            description: 'some number in a subconfiguration',
            type: 'number',
            defaultValue: 4.3
          }
        }))
      })
    });

    var model = container.create();
    expect((0, _.getConf)(model, 'someInteger')).toBe(12); // expect(getConf(model, 'myArrayOfSubConfigurations')).toBe(undefined)
  });
  test('can nest a single subconfiguration schema', function () {
    var container = _mobxStateTree.types.model({
      configuration: (0, _configurationSchema.ConfigurationSchema)('Foo', {
        someInteger: {
          description: 'an integer slot',
          type: 'integer',
          defaultValue: 12
        },
        mySubConfiguration: (0, _configurationSchema.ConfigurationSchema)('SubObject', {
          someNumber: {
            description: 'some number in a subconfiguration',
            type: 'number',
            defaultValue: 4.3
          }
        })
      })
    });

    var model = container.create();
    expect((0, _util.isConfigurationModel)(model.configuration)).toBe(true);
    expect((0, _.getConf)(model, 'someInteger')).toBe(12); // expect(getConf(model, 'mySubConfiguration.someNumber')).toBe(4.3)
  });
  test('can snapshot a simple schema', function () {
    var container = _mobxStateTree.types.model({
      configuration: (0, _configurationSchema.ConfigurationSchema)('Foo', {
        someInteger: {
          description: 'an integer slot',
          type: 'integer',
          defaultValue: 12
        }
      })
    });

    var model = container.create({
      configuration: {
        someInteger: 42
      }
    });
    expect((0, _.getConf)(model, 'someInteger')).toEqual(42);
    expect((0, _mobxStateTree.getSnapshot)(model)).toEqual({
      configuration: {
        someInteger: 42
      }
    });
    expect((0, _.getConf)(model, 'someInteger')).toEqual(42);
    var model2 = container.create({
      configuration: {}
    });
    expect((0, _mobxStateTree.getSnapshot)(model2)).toEqual({
      configuration: {}
    });
    expect((0, _.getConf)(model2, 'someInteger')).toEqual(12);
  });
  test('can snapshot a nested schema 1', function () {
    var container = _mobxStateTree.types.model({
      configuration: (0, _configurationSchema.ConfigurationSchema)('Foo', {
        someInteger: {
          description: 'an integer slot',
          type: 'integer',
          defaultValue: 12
        },
        mySubConfiguration: (0, _configurationSchema.ConfigurationSchema)('SubObject1', {
          someNumber: {
            description: 'some number in a subconfiguration',
            type: 'number',
            defaultValue: 4.3
          }
        }),
        myArrayOfSubConfigurations: _mobxStateTree.types.array((0, _configurationSchema.ConfigurationSchema)('SubObject2', {
          someNumber: {
            description: 'some number in a subconfiguration',
            type: 'number',
            defaultValue: 3.5
          }
        }))
      })
    });

    var model = container.create({
      configuration: {
        someInteger: 42,
        mySubConfiguration: {},
        myArrayOfSubConfigurations: [{
          someNumber: 3.5
        }, {
          someNumber: 11.1
        }]
      }
    });
    expect((0, _mobxStateTree.getSnapshot)(model)).toEqual({
      configuration: {
        someInteger: 42,
        // mySubConfiguration is set to the default, so doesn't appear in snapshot
        myArrayOfSubConfigurations: [{}, {
          someNumber: 11.1
        }]
      }
    });
  });
  test('can snapshot a nested schema 2', function () {
    var container = _mobxStateTree.types.model({
      configuration: (0, _configurationSchema.ConfigurationSchema)('Foo', {
        someInteger: {
          description: 'an integer slot',
          type: 'integer',
          defaultValue: 12
        },
        myConfigurationMap: _mobxStateTree.types.map((0, _configurationSchema.ConfigurationSchema)('MappedConfiguration', {
          mappedValue: {
            description: 'something in a mapped configuration',
            type: 'number',
            defaultValue: 101
          }
        })),
        mySubConfiguration: (0, _configurationSchema.ConfigurationSchema)('SubObject1', {
          someNumber: {
            description: 'some number in a subconfiguration',
            type: 'number',
            defaultValue: 4.3
          }
        }),
        myArrayOfSubConfigurations: _mobxStateTree.types.array((0, _configurationSchema.ConfigurationSchema)('SubObject2', {
          someNumber: {
            description: 'some number in a subconfiguration',
            type: 'number',
            defaultValue: 3.5
          }
        }))
      })
    });

    var model = container.create({
      configuration: {
        someInteger: 12,
        myConfigurationMap: {
          nog: {}
        },
        mySubConfiguration: {
          someNumber: 12
        }
      }
    });
    expect((0, _mobxStateTree.getSnapshot)(model)).toEqual({
      configuration: {
        myConfigurationMap: {
          nog: {}
        },
        mySubConfiguration: {
          someNumber: 12
        }
      }
    });
    expect((0, _.getConf)(model, ['mySubConfiguration', 'someNumber'])).toEqual(12);
  });
  test('re-check instantiation of slots (issue #797)', function () {
    var configSchema = (0, _configurationSchema.ConfigurationSchema)('Gff3TabixAdapter', {
      gffGzLocation: {
        type: 'fileLocation',
        defaultValue: {
          uri: '/path/to/my.gff.gz'
        }
      },
      index: (0, _configurationSchema.ConfigurationSchema)('Gff3TabixIndex', {
        indexType: {
          model: _mobxStateTree.types.enumeration('IndexType', ['TBI', 'CSI']),
          type: 'stringEnum',
          defaultValue: 'TBI'
        },
        location: {
          type: 'fileLocation',
          defaultValue: {
            uri: '/path/to/my.gff.gz.tbi'
          }
        }
      }),
      dontRedispatch: {
        type: 'stringArray',
        defaultValue: ['chromosome', 'region']
      },
      thisShouldGetInstantiated: {
        type: 'string',
        defaultValue: 'Not instantiated'
      }
    }, {
      explicitlyTyped: true
    });
    var tester = configSchema.create();
    expect((0, _.readConfObject)(tester, 'dontRedispatch')[0]).toBe('chromosome');
    expect((0, _.readConfObject)(tester, 'thisShouldGetInstantiated')).toBe('Not instantiated');
    expect((0, _.readConfObject)(tester, ['index', 'indexType'])).toBe('TBI');
  });
});