import { AnyConfigurationModel, AnyConfigurationSchemaType } from './configurationSchema';
/**
 * given a configuration model (an instance of a ConfigurationSchema),
 * read the configuration variable at the given path
 *
 * @param model - instance of ConfigurationSchema
 * @param slotPaths - array of paths to read
 * @param args - extra arguments e.g. for a feature callback,
 *  will be sent to each of the slotNames
 */
export declare function readConfObject(confObject: AnyConfigurationModel, slotPath?: string[] | string | undefined, args?: Record<string, any>): any;
/**
 * helper method for readConfObject, reads the config from a mst model
 *
 * @param model - object containing a 'configuration' member
 * @param slotPaths - array of paths to read
 * @param args - extra arguments e.g. for a feature callback,
 *   will be sent to each of the slotNames
 */
export declare function getConf(model: unknown, slotPath?: string[] | string | undefined, args?: Record<string, any>): any;
/**
 * given a union of explicitly typed configuration schema types,
 * extract an array of the type names contained in the union
 *
 * @param unionType -
 * @returns Array of type names contained in the union
 */
export declare function getTypeNamesFromExplicitlyTypedUnion(maybeUnionType: unknown): string[];
export declare function isBareConfigurationSchemaType(thing: unknown): thing is AnyConfigurationSchemaType;
export declare function isConfigurationSchemaType(thing: unknown): boolean;
export declare function isConfigurationModel(thing: unknown): thing is AnyConfigurationModel;
export declare function isConfigurationSlotType(thing: unknown): boolean;
