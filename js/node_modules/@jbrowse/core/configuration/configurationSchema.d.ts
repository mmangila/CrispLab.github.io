import { Instance, IAnyType, ModelPropertiesDeclaration } from 'mobx-state-tree';
import { ConfigSlotDefinition } from './configurationSlot';
export interface ConfigurationSchemaDefinition {
    [n: string]: ConfigSlotDefinition | ConfigurationSchemaDefinition | string | number | IAnyType;
}
interface ConfigurationSchemaOptions {
    explicitlyTyped?: boolean;
    explicitIdentifier?: string;
    implicitIdentifier?: string | boolean;
    baseConfiguration?: AnyConfigurationSchemaType;
    actions?: (self: unknown) => any;
    views?: (self: unknown) => any;
    extend?: (self: unknown) => any;
    preProcessSnapshot?: (snapshot: {}) => {};
}
declare function makeConfigurationSchemaModel<DEFINITION extends ConfigurationSchemaDefinition, OPTIONS extends ConfigurationSchemaOptions>(modelName: string, schemaDefinition: DEFINITION, options: OPTIONS): import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<Record<string, any>, {
    setSubschema(slotName: string, data: ModelPropertiesDeclaration | AnyConfigurationSchemaType): any;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
export interface AnyConfigurationSchemaType extends ReturnType<typeof makeConfigurationSchemaModel> {
    isJBrowseConfigurationSchema: boolean;
    jbrowseSchemaDefinition: ConfigurationSchemaDefinition;
    jbrowseSchemaOptions: ConfigurationSchemaOptions;
}
export declare type AnyConfigurationModel = Instance<AnyConfigurationSchemaType>;
export declare type ConfigurationModel<SCHEMA extends AnyConfigurationSchemaType> = Instance<SCHEMA>;
export declare function ConfigurationSchema<DEFINITION extends ConfigurationSchemaDefinition, OPTIONS extends ConfigurationSchemaOptions>(modelName: string, inputSchemaDefinition: DEFINITION, inputOptions?: OPTIONS): AnyConfigurationSchemaType;
export declare function ConfigurationReference(schemaType: IAnyType): import("mobx-state-tree").ITypeUnion<any, any, any>;
export {};
