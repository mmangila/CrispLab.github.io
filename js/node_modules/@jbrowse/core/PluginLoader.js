"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.PluginSourceConfigurationSchema = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _url = _interopRequireDefault(require("url"));

var _loadScript = _interopRequireDefault(require("load-script2"));

var _configuration = require("./configuration");

var _ReExports = _interopRequireDefault(require("./ReExports"));

/* eslint-disable no-restricted-globals */
var PluginSourceConfigurationSchema = (0, _configuration.ConfigurationSchema)('PluginSource', {
  name: {
    type: 'string',
    defaultValue: ''
  },
  url: {
    type: 'string',
    defaultValue: ''
  }
});
exports.PluginSourceConfigurationSchema = PluginSourceConfigurationSchema;

var PluginLoader = /*#__PURE__*/function () {
  function PluginLoader() {
    var pluginDefinitions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    (0, _classCallCheck2.default)(this, PluginLoader);
    (0, _defineProperty2.default)(this, "definitions", []);
    this.definitions = JSON.parse(JSON.stringify(pluginDefinitions));
  }

  (0, _createClass2.default)(PluginLoader, [{
    key: "loadScript",
    value: function loadScript(scriptUrl) {
      if (document && document.getElementsByTagName) {
        return (0, _loadScript.default)(scriptUrl);
      } // @ts-ignore


      if (self && self.importScripts) {
        return new Promise(function (resolve, reject) {
          try {
            // @ts-ignore
            self.importScripts(scriptUrl);
          } catch (error) {
            reject(error || new Error("failed to load ".concat(scriptUrl)));
            return;
          }

          resolve();
        });
      }

      throw new Error('cannot figure out how to load external JS scripts in this environment');
    }
  }, {
    key: "loadPlugin",
    value: function () {
      var _loadPlugin = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee(definition) {
        var parsedUrl, moduleName, umdName, scope, plugin;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                parsedUrl = _url.default.parse(definition.url);

                if (!(!parsedUrl.protocol || parsedUrl.protocol === 'http:' || parsedUrl.protocol === 'https:')) {
                  _context.next = 11;
                  break;
                }

                _context.next = 4;
                return this.loadScript(definition.url);

              case 4:
                moduleName = definition.name;
                umdName = "JBrowsePlugin".concat(moduleName); // Based on window-or-global
                // https://github.com/purposeindustries/window-or-global/blob/322abc71de0010c9e5d9d0729df40959e1ef8775/lib/index.js

                scope = (typeof self === "undefined" ? "undefined" : (0, _typeof2.default)(self)) === 'object' && self.self === self && self || (typeof global === "undefined" ? "undefined" : (0, _typeof2.default)(global)) === 'object' && global.global === global && global || this; // eslint-disable-next-line @typescript-eslint/no-explicit-any

                plugin = scope[umdName];

                if (plugin) {
                  _context.next = 10;
                  break;
                }

                throw new Error("plugin ".concat(moduleName, " failed to load, ").concat(scope.constructor.name, ".").concat(umdName, " is undefined"));

              case 10:
                return _context.abrupt("return", plugin.default);

              case 11:
                throw new Error("cannot load plugins using protocol \"".concat(parsedUrl.protocol, "\""));

              case 12:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function loadPlugin(_x) {
        return _loadPlugin.apply(this, arguments);
      }

      return loadPlugin;
    }()
  }, {
    key: "installGlobalReExports",
    value: function installGlobalReExports(target) {
      // @ts-ignore
      target.JBrowseExports = {};
      Object.entries(_ReExports.default).forEach(function (_ref) {
        var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
            moduleName = _ref2[0],
            module = _ref2[1];

        // @ts-ignore
        target.JBrowseExports[moduleName] = module;
      });
    }
  }, {
    key: "load",
    value: function () {
      var _load = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                return _context3.abrupt("return", Promise.all(this.definitions.map( /*#__PURE__*/function () {
                  var _ref3 = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(definition) {
                    return regeneratorRuntime.wrap(function _callee2$(_context2) {
                      while (1) {
                        switch (_context2.prev = _context2.next) {
                          case 0:
                            _context2.next = 2;
                            return _this.loadPlugin(definition);

                          case 2:
                            _context2.t0 = _context2.sent;
                            _context2.t1 = definition;
                            return _context2.abrupt("return", {
                              plugin: _context2.t0,
                              definition: _context2.t1
                            });

                          case 5:
                          case "end":
                            return _context2.stop();
                        }
                      }
                    }, _callee2);
                  }));

                  return function (_x2) {
                    return _ref3.apply(this, arguments);
                  };
                }())));

              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function load() {
        return _load.apply(this, arguments);
      }

      return load;
    }()
  }]);
  return PluginLoader;
}();

exports.default = PluginLoader;