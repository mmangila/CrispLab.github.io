/// <reference types="react" />
import { IAnyType } from 'mobx-state-tree';
import PluggableElementBase from './pluggableElementTypes/PluggableElementBase';
import RendererType from './pluggableElementTypes/renderers/RendererType';
import AdapterType from './pluggableElementTypes/AdapterType';
import TrackType from './pluggableElementTypes/TrackType';
import DisplayType from './pluggableElementTypes/DisplayType';
import ViewType from './pluggableElementTypes/ViewType';
import WidgetType from './pluggableElementTypes/WidgetType';
import ConnectionType from './pluggableElementTypes/ConnectionType';
import RpcMethodType from './pluggableElementTypes/RpcMethodType';
import TextSearchAdapterType from './pluggableElementTypes/TextSearchAdapterType';
import Plugin from './Plugin';
import ReExports from './ReExports';
import { PluggableElementType, PluggableElementMember } from './pluggableElementTypes';
import { AbstractRootModel } from './util';
import { PluginDefinition } from './PluginLoader';
/** little helper class that keeps groups of callbacks that are
then run in a specified order by group */
declare class PhasedScheduler<PhaseName extends string> {
    phaseCallbacks: Map<PhaseName, Function[]>;
    phaseOrder: PhaseName[];
    constructor(...phaseOrder: PhaseName[]);
    add(phase: PhaseName, callback: Function): void;
    run(): void;
}
declare type PluggableElementTypeGroup = 'renderer' | 'adapter' | 'display' | 'track' | 'connection' | 'view' | 'widget' | 'rpc method' | 'text search adapter';
/** internal class that holds the info for a certain element type */
declare class TypeRecord<ElementClass extends PluggableElementBase> {
    registeredTypes: {
        [name: string]: ElementClass;
    };
    baseClass: {
        new (...args: any[]): ElementClass;
    } | (Function & {
        prototype: ElementClass;
    });
    typeName: string;
    constructor(typeName: string, elementType: {
        new (...args: any[]): ElementClass;
    } | (Function & {
        prototype: ElementClass;
    }));
    add(name: string, t: ElementClass): void;
    has(name: string): boolean;
    get(name: string): ElementClass;
    all(): ElementClass[];
}
declare type AnyFunction = (...args: any) => any;
/**
 * free-form string-to-unknown mapping of metadata related to the instance
 * of this plugin. `isCore` is typically set to `Boolean(true)` if the plugin was
 * loaded as part of the "core" set of plugins for this application.
 * Can also use this metadata to stash other things about why the plugin is
 * loaded, such as where it came from, what plugin depends on it, etc.
 */
export declare type PluginMetadata = Record<string, unknown>;
export interface PluginLoadRecord {
    metadata?: PluginMetadata;
    plugin: Plugin;
}
export interface RuntimePluginLoadRecord extends PluginLoadRecord {
    definition: PluginDefinition;
}
export default class PluginManager {
    plugins: Plugin[];
    jexl: any;
    pluginMetadata: Record<string, PluginMetadata>;
    runtimePluginDefinitions: PluginDefinition[];
    elementCreationSchedule: PhasedScheduler<PluggableElementTypeGroup>;
    rendererTypes: TypeRecord<RendererType>;
    adapterTypes: TypeRecord<AdapterType>;
    textSearchAdapterTypes: TypeRecord<TextSearchAdapterType>;
    trackTypes: TypeRecord<TrackType>;
    displayTypes: TypeRecord<DisplayType>;
    connectionTypes: TypeRecord<ConnectionType>;
    viewTypes: TypeRecord<ViewType>;
    widgetTypes: TypeRecord<WidgetType>;
    rpcMethods: TypeRecord<RpcMethodType>;
    configured: boolean;
    rootModel?: AbstractRootModel;
    constructor(initialPlugins?: (Plugin | PluginLoadRecord)[]);
    pluginConfigurationSchemas(): {
        [key: string]: unknown;
    };
    addPlugin(load: Plugin | PluginLoadRecord | RuntimePluginLoadRecord): this;
    getPlugin(name: string): Plugin | undefined;
    hasPlugin(name: string): boolean;
    createPluggableElements(): this;
    setRootModel(rootModel: AbstractRootModel): void;
    configure(): this;
    getElementTypeRecord(groupName: PluggableElementTypeGroup): TypeRecord<PluggableElementBase>;
    addElementType(groupName: PluggableElementTypeGroup, creationCallback: (pluginManager: PluginManager) => PluggableElementType): this;
    getElementType(groupName: PluggableElementTypeGroup, typeName: string): PluggableElementBase;
    getElementTypesInGroup(groupName: PluggableElementTypeGroup): PluggableElementBase[];
    /** get a MST type for the union of all specified pluggable MST types */
    pluggableMstType(typeGroup: PluggableElementTypeGroup, fieldName: PluggableElementMember, fallback?: IAnyType): IAnyType;
    /** get a MST type for the union of all specified pluggable config schemas */
    pluggableConfigSchemaType(typeGroup: PluggableElementTypeGroup, fieldName?: PluggableElementMember): IAnyType;
    jbrequireCache: Map<any, any>;
    lib: {
        mobx: typeof import("mobx");
        'mobx-state-tree': typeof import("mobx-state-tree");
        react: typeof import("react");
        'react-dom': typeof import("react-dom");
        'mobx-react': typeof import("mobx-react");
        'prop-types': typeof import("prop-types");
        '@material-ui/core': typeof import("@material-ui/core");
        '@material-ui/core/SvgIcon': import("@material-ui/core/OverridableComponent").OverridableComponent<import("@material-ui/core").SvgIconTypeMap<{}, "svg">>;
        '@material-ui/core/utils': typeof import("@material-ui/core/utils");
        '@material-ui/lab': typeof import("@material-ui/lab");
        '@material-ui/data-grid': typeof import("@material-ui/data-grid");
        '@material-ui/core/colors': typeof import("./ReExports/material-ui-colors");
        '@material-ui/core/styles': typeof import("@material-ui/core/styles");
        '@material-ui/core/Box': import("react").ComponentType<import("@material-ui/core").BoxProps>;
        '@material-ui/core/Button': import("@material-ui/core").ExtendButtonBase<import("@material-ui/core").ButtonTypeMap<{}, "button">>;
        '@material-ui/core/ButtonGroup': import("@material-ui/core/OverridableComponent").OverridableComponent<import("@material-ui/core").ButtonGroupTypeMap<{}, "div">>;
        '@material-ui/core/Card': typeof import("@material-ui/core").Card;
        '@material-ui/core/CardContent': import("@material-ui/core/OverridableComponent").OverridableComponent<import("@material-ui/core").CardContentTypeMap<{}, "div">>;
        '@material-ui/core/Container': import("@material-ui/core/OverridableComponent").OverridableComponent<import("@material-ui/core").ContainerTypeMap<{}, "div">>;
        '@material-ui/core/Checkbox': typeof import("@material-ui/core").Checkbox;
        '@material-ui/core/Dialog': typeof import("@material-ui/core").Dialog;
        '@material-ui/core/FormGroup': typeof import("@material-ui/core").FormGroup;
        '@material-ui/core/FormLabel': import("@material-ui/core/OverridableComponent").OverridableComponent<import("@material-ui/core").FormLabelTypeMap<{}, "label">>;
        '@material-ui/core/FormControl': import("@material-ui/core/OverridableComponent").OverridableComponent<import("@material-ui/core").FormControlTypeMap<{}, "div">>;
        '@material-ui/core/FormControlLabel': typeof import("@material-ui/core").FormControlLabel;
        '@material-ui/core/Grid': import("@material-ui/core/OverridableComponent").OverridableComponent<import("@material-ui/core").GridTypeMap<{}, "div">>;
        '@material-ui/core/Icon': import("@material-ui/core/OverridableComponent").OverridableComponent<import("@material-ui/core").IconTypeMap<{}, "span">>;
        '@material-ui/core/IconButton': import("@material-ui/core").ExtendButtonBase<import("@material-ui/core").IconButtonTypeMap<{}, "button">>;
        '@material-ui/core/InputAdornment': import("@material-ui/core/OverridableComponent").OverridableComponent<import("@material-ui/core").InputAdornmentTypeMap<{}, "div">>;
        '@material-ui/core/LinearProgress': typeof import("@material-ui/core").LinearProgress;
        '@material-ui/core/ListItemIcon': typeof import("@material-ui/core").ListItemIcon;
        '@material-ui/core/ListItemText': typeof import("@material-ui/core").ListItemText;
        '@material-ui/core/Menu': typeof import("@material-ui/core").Menu;
        '@material-ui/core/MenuItem': import("@material-ui/core/OverridableComponent").OverridableComponent<import("@material-ui/core").MenuItemTypeMap<{
            button: false;
        }, "li">> & ((props: {
            href: string;
        } & {
            button?: true | undefined;
        } & {
            alignItems?: "center" | "flex-start" | undefined;
            autoFocus?: boolean | undefined;
            button?: boolean | undefined;
            ContainerComponent?: "object" | "summary" | "small" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "caption" | "abbr" | "address" | "article" | "aside" | "b" | "bdi" | "bdo" | "big" | "blockquote" | "cite" | "code" | "col" | "colgroup" | "dd" | "del" | "details" | "dfn" | "div" | "dt" | "em" | "embed" | "figcaption" | "figure" | "footer" | "head" | "header" | "hgroup" | "hr" | "i" | "iframe" | "img" | "input" | "kbd" | "keygen" | "legend" | "main" | "mark" | "menu" | "menuitem" | "meter" | "nav" | "noindex" | "noscript" | "output" | "p" | "picture" | "rp" | "rt" | "ruby" | "s" | "samp" | "section" | "span" | "strong" | "sub" | "sup" | "table" | "tbody" | "td" | "tfoot" | "th" | "thead" | "time" | "tr" | "u" | "var" | "wbr" | "webview" | import("react").ComponentClass<import("react").HTMLAttributes<HTMLDivElement>, any> | import("react").FunctionComponent<import("react").HTMLAttributes<HTMLDivElement>> | undefined;
            ContainerProps?: import("react").HTMLAttributes<HTMLDivElement> | undefined;
            dense?: boolean | undefined;
            disabled?: boolean | undefined;
            disableGutters?: boolean | undefined;
            divider?: boolean | undefined;
            focusVisibleClassName?: string | undefined;
            selected?: boolean | undefined;
        } & {
            action?: ((instance: import("@material-ui/core").ButtonBaseActions | null) => void) | import("react").RefObject<import("@material-ui/core").ButtonBaseActions> | null | undefined;
            buttonRef?: ((instance: unknown) => void) | import("react").RefObject<unknown> | null | undefined;
            centerRipple?: boolean | undefined;
            children?: import("react").ReactNode;
            disabled?: boolean | undefined;
            disableRipple?: boolean | undefined;
            disableTouchRipple?: boolean | undefined;
            focusRipple?: boolean | undefined;
            focusVisibleClassName?: string | undefined;
            onFocusVisible?: ((event: import("react").FocusEvent<any>) => void) | undefined;
            tabIndex?: string | number | undefined;
            TouchRippleProps?: Partial<import("@material-ui/core/ButtonBase/TouchRipple").TouchRippleProps> | undefined;
        } & import("@material-ui/core/OverridableComponent").CommonProps<import("@material-ui/core").ExtendButtonBaseTypeMap<import("@material-ui/core").MenuItemTypeMap<{
            button?: true | undefined;
        }, "li">>> & Pick<Pick<import("react").DetailedHTMLProps<import("react").AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>, "id" | "type" | "defaultValue" | "key" | "prefix" | "slot" | "style" | "title" | "className" | "defaultChecked" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "hidden" | "lang" | "placeholder" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "color" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "children" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "href" | "download" | "hrefLang" | "media" | "ping" | "rel" | "target" | "referrerPolicy"> & {
            ref?: ((instance: HTMLAnchorElement | null) => void) | import("react").RefObject<HTMLAnchorElement> | null | undefined;
        }, "id" | "type" | "defaultValue" | "key" | "prefix" | "ref" | "slot" | "title" | "defaultChecked" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "hidden" | "lang" | "placeholder" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "color" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "children" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "href" | "download" | "hrefLang" | "media" | "ping" | "rel" | "target" | "referrerPolicy">) => JSX.Element) & import("@material-ui/core/OverridableComponent").OverridableComponent<import("@material-ui/core").ExtendButtonBaseTypeMap<import("@material-ui/core").MenuItemTypeMap<{
            button?: true | undefined;
        }, "li">>>;
        '@material-ui/core/RadioGroup': typeof import("@material-ui/core").RadioGroup;
        '@material-ui/core/Radio': typeof import("@material-ui/core").Radio;
        '@material-ui/core/Select': typeof import("@material-ui/core").Select;
        '@material-ui/core/Snackbar': typeof import("@material-ui/core").Snackbar;
        '@material-ui/core/SnackbarContent': typeof import("@material-ui/core").SnackbarContent;
        '@material-ui/core/TextField': typeof import("@material-ui/core").TextField;
        '@material-ui/core/Tooltip': typeof import("@material-ui/core").Tooltip;
        '@material-ui/core/Typography': import("@material-ui/core/OverridableComponent").OverridableComponent<import("@material-ui/core").TypographyTypeMap<{}, "span">>;
        '@material-ui/lab/ToggleButton': import("@material-ui/core").ExtendButtonBase<import("@material-ui/lab").ToggleButtonTypeMap<{}, "button">>;
        '@material-ui/lab/ToggleButtonGroup': typeof import("@material-ui/lab").ToggleButtonGroup;
        '@jbrowse/core/Plugin': typeof import("./Plugin");
        '@jbrowse/core/pluggableElementTypes/ViewType': typeof ViewType;
        '@jbrowse/core/pluggableElementTypes/AdapterType': typeof AdapterType;
        '@jbrowse/core/pluggableElementTypes/DisplayType': typeof DisplayType;
        '@jbrowse/core/pluggableElementTypes/TrackType': typeof TrackType;
        '@jbrowse/core/pluggableElementTypes/WidgetType': typeof WidgetType;
        '@jbrowse/core/pluggableElementTypes/models': typeof import("./pluggableElementTypes/models");
        '@jbrowse/core/pluggableElementTypes/renderers/ServerSideRendererType': typeof import("./pluggableElementTypes/renderers/ServerSideRendererType");
        '@jbrowse/core/pluggableElementTypes/renderers/CircularChordRendererType': typeof import("./pluggableElementTypes/renderers/CircularChordRendererType").default;
        '@jbrowse/core/pluggableElementTypes/renderers/BoxRendererType': typeof import("./pluggableElementTypes/renderers/BoxRendererType");
        '@jbrowse/core/pluggableElementTypes/renderers/FeatureRendererType': typeof import("./pluggableElementTypes/renderers/FeatureRendererType");
        '@jbrowse/core/pluggableElementTypes/renderers/RendererType': typeof import("./pluggableElementTypes/renderers/RendererType");
        '@jbrowse/core/configuration': typeof import("./configuration");
        '@jbrowse/core/util/types/mst': typeof import("./util/types/mst");
        '@jbrowse/core/ui': typeof import("./ui");
        '@jbrowse/core/util': typeof import("./util");
        '@jbrowse/core/util/color': typeof import("./util/color");
        '@jbrowse/core/util/tracks': typeof import("./util/tracks");
        '@jbrowse/core/util/Base1DViewModel': import("mobx-state-tree").IModelType<{
            displayedRegions: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                refName: import("mobx-state-tree").ISimpleType<string>;
                start: import("mobx-state-tree").ISimpleType<number>;
                end: import("mobx-state-tree").ISimpleType<number>;
                reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            } & {
                assemblyName: import("mobx-state-tree").ISimpleType<string>;
            }, {
                setRefName(newRefName: string): void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
            bpPerPx: import("mobx-state-tree").IType<number | undefined, number, number>;
            offsetPx: import("mobx-state-tree").IType<number | undefined, number, number>;
            interRegionPaddingWidth: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            minimumBlockWidth: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        }, {
            features: import("./util/simpleFeature").Feature[] | undefined;
            volatileWidth: number;
        } & {
            setDisplayedRegions(regions: import("./util").Region[]): void;
            setBpPerPx(val: number): void;
            setVolatileWidth(width: number): void;
        } & {
            readonly width: number;
            readonly displayedRegionsTotalPx: number;
            readonly maxOffset: number;
            readonly minOffset: number;
            readonly totalBp: number;
            bpToPx({ refName, coord, regionNumber, }: {
                refName: string;
                coord: number;
                regionNumber?: number | undefined;
            }): number | undefined;
            pxToBp(px: number): {
                oob: boolean;
                coord: number;
                offset: number;
                index: number;
                refName: string;
                start: number;
                end: number;
                reversed: boolean;
                assemblyName: string;
            } | {
                coord: number;
                index: number;
                start: number;
                refName: string;
                oob: boolean;
                assemblyName: string;
                offset: number;
                reversed: boolean;
            };
        } & {
            readonly dynamicBlocks: import("./util/blockTypes").BlockSet;
            readonly staticBlocks: import("./util/blockTypes").BlockSet;
            readonly currBp: number;
        } & {
            setFeatures(features: import("./util/simpleFeature").Feature[]): void;
            zoomToDisplayedRegions(leftPx: import("./util/Base1DViewModel").BpOffset | undefined, rightPx: import("./util/Base1DViewModel").BpOffset | undefined): void;
            showAllRegions(): void;
            moveTo(start: import("./util/Base1DViewModel").BpOffset, end: import("./util/Base1DViewModel").BpOffset): void;
            zoomOut(): void;
            zoomIn(): void;
            zoomTo(newBpPerPx: number, offset?: number): void;
            scroll(distance: number): number;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
        '@jbrowse/core/util/io': typeof import("./util/io");
        '@jbrowse/core/util/mst-reflection': typeof import("./util/mst-reflection");
        '@jbrowse/core/util/rxjs': typeof import("./util/rxjs");
        '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail': typeof import("./BaseFeatureWidget/BaseFeatureDetail");
        '@jbrowse/core/data_adapters/BaseAdapter': typeof import("./data_adapters/BaseAdapter");
    };
    load: <FTYPE extends AnyFunction>(lib: FTYPE) => ReturnType<FTYPE>;
    /**
     * Get the re-exported version of the given package name.
     * Throws an error if the package is not re-exported by the plugin manager.
     *
     * @returns the library's default export
     */
    jbrequire: (lib: keyof typeof ReExports | AnyFunction | {
        default: AnyFunction;
    }) => any;
    getRendererType(typeName: string): RendererType;
    getRendererTypes(): RendererType[];
    getAdapterType(typeName: string): AdapterType;
    getTextSearchAdapterType(typeName: string): TextSearchAdapterType;
    getTrackType(typeName: string): TrackType;
    getDisplayType(typeName: string): DisplayType;
    getViewType(typeName: string): ViewType;
    getWidgetType(typeName: string): WidgetType;
    getConnectionType(typeName: string): ConnectionType;
    getRpcMethodType(methodName: string): RpcMethodType;
    addRendererType(creationCallback: (pluginManager: PluginManager) => RendererType): this;
    addAdapterType(creationCallback: (pluginManager: PluginManager) => AdapterType): this;
    addTextSearchAdapterType(creationCallback: (pluginManager: PluginManager) => TextSearchAdapterType): this;
    addTrackType(creationCallback: (pluginManager: PluginManager) => TrackType): this;
    addDisplayType(creationCallback: (pluginManager: PluginManager) => DisplayType): this;
    addViewType(creationCallback: (pluginManager: PluginManager) => ViewType): this;
    addWidgetType(creationCallback: (pluginManager: PluginManager) => WidgetType): this;
    addConnectionType(creationCallback: (pluginManager: PluginManager) => ConnectionType): this;
    addRpcMethod(creationCallback: (pluginManager: PluginManager) => RpcMethodType): this;
}
export {};
