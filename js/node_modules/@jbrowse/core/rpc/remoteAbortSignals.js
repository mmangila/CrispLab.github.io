"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.serializeAbortSignal = serializeAbortSignal;
exports.isRemoteAbortSignal = isRemoteAbortSignal;
exports.deserializeAbortSignal = deserializeAbortSignal;
exports.remoteAbort = remoteAbort;
exports.remoteAbortRpcHandler = remoteAbortRpcHandler;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

/* ---------------- for the RPC client ----------------- */
var abortSignalCounter = 0;
var abortSignalIds = new WeakMap(); // map of abortsignal => numerical ID

/**
 * assign an ID to the given abort signal and return a plain object representation
 * @param signal - the signal to serialize
 * @param callfunc - function used to call
 *  a remote method, will be called like callfunc('signalAbort', signalId)
 */

function serializeAbortSignal(signal, callfunc) {
  var abortSignalId = abortSignalIds.get(signal);

  if (!abortSignalId) {
    abortSignalCounter += 1;
    abortSignalIds.set(signal, abortSignalCounter);
    abortSignalId = abortSignalCounter;
    signal.addEventListener('abort', function () {
      var signalId = abortSignalIds.get(signal);

      if (signalId !== undefined) {
        callfunc('signalAbort', signalId);
      }
    });
  }

  return {
    abortSignalId: abortSignalId
  };
}
/* ---------------- for the RPC server ----------------- */

/**
 * test whether a given object
 * @param thing - the thing to test
 * @returns true if the thing is a remote abort signal
 */


function isRemoteAbortSignal(thing) {
  return (0, _typeof2.default)(thing) === 'object' && thing !== null && 'abortSignalId' in thing && // @ts-ignore
  typeof thing.abortSignalId === 'number';
} // the server side keeps a set of surrogate abort controllers that can be
// aborted based on ID


var surrogateAbortControllers = new Map(); // numerical ID => surrogate abort controller

/**
 * deserialize the result of serializeAbortSignal into an AbortSignal
 *
 * @param signal -
 * @returns an abort signal that corresponds to the given ID
 */

function deserializeAbortSignal(_ref) {
  var abortSignalId = _ref.abortSignalId;
  var surrogateAbortController = surrogateAbortControllers.get(abortSignalId);

  if (!surrogateAbortController) {
    surrogateAbortController = new AbortController();
    surrogateAbortControllers.set(abortSignalId, surrogateAbortController);
  }

  return surrogateAbortController.signal;
}
/**
 * fire an abort signal from a remote abort signal ID
 *
 * @param abortSignalId -
 */


function remoteAbort(props) {
  var abortSignalId = props.signalId;
  var surrogateAbortController = surrogateAbortControllers.get(abortSignalId);

  if (surrogateAbortController) {
    surrogateAbortController.abort();
  }
}

function remoteAbortRpcHandler() {
  return {
    signalAbort: remoteAbort
  };
}