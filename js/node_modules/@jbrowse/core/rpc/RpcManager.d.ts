import PluginManager from '../PluginManager';
import WebWorkerRpcDriver from './WebWorkerRpcDriver';
import MainThreadRpcDriver from './MainThreadRpcDriver';
import ElectronRpcDriver from './ElectronRpcDriver';
import { AnyConfigurationModel } from '../configuration/configurationSchema';
declare type DriverClass = WebWorkerRpcDriver | MainThreadRpcDriver | ElectronRpcDriver;
declare type BackendConfigurations = {
    WebWorkerRpcDriver?: Omit<ConstructorParameters<typeof WebWorkerRpcDriver>[0], 'config'>;
    MainThreadRpcDriver?: Omit<ConstructorParameters<typeof MainThreadRpcDriver>[0], 'config'>;
    ElectronRpcDriver?: Omit<ConstructorParameters<typeof ElectronRpcDriver>[0], 'config'>;
};
declare const DriverClasses: {
    WebWorkerRpcDriver: typeof WebWorkerRpcDriver;
    MainThreadRpcDriver: typeof MainThreadRpcDriver;
    ElectronRpcDriver: typeof ElectronRpcDriver;
};
export default class RpcManager {
    static configSchema: import("../configuration/configurationSchema").AnyConfigurationSchemaType;
    driverObjects: Map<string, DriverClass>;
    pluginManager: PluginManager;
    mainConfiguration: AnyConfigurationModel;
    backendConfigurations: BackendConfigurations;
    constructor(pluginManager: PluginManager, mainConfiguration: AnyConfigurationModel, backendConfigurations: BackendConfigurations);
    getDriver(backendName: keyof typeof DriverClasses): DriverClass;
    getDriverForCall(_sessionId: string, _functionName: string, args: {
        rpcDriverName?: string;
    }): DriverClass;
    call(sessionId: string, functionName: string, args: {}, opts?: {}): Promise<unknown>;
}
export {};
