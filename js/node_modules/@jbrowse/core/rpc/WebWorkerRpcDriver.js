"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _web = _interopRequireDefault(require("@librpc/web"));

var _shortid = _interopRequireDefault(require("shortid"));

var _BaseRpcDriver2 = _interopRequireDefault(require("./BaseRpcDriver"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var WebWorkerHandle = /*#__PURE__*/function (_Rpc$Client) {
  (0, _inherits2.default)(WebWorkerHandle, _Rpc$Client);

  var _super = _createSuper(WebWorkerHandle);

  function WebWorkerHandle() {
    (0, _classCallCheck2.default)(this, WebWorkerHandle);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(WebWorkerHandle, [{
    key: "destroy",
    value: function destroy() {
      this.workers[0].terminate();
    }
  }, {
    key: "call",
    value: function () {
      var _call = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee(functionName, args, opts) {
        var statusCallback, rpcDriverClassName, channel, listener, result;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                statusCallback = opts.statusCallback, rpcDriverClassName = opts.rpcDriverClassName;
                channel = "message-".concat(_shortid.default.generate());

                listener = function listener(message) {
                  if (statusCallback) {
                    statusCallback(message);
                  }
                };

                this.on(channel, listener);
                _context.next = 6;
                return (0, _get2.default)((0, _getPrototypeOf2.default)(WebWorkerHandle.prototype), "call", this).call(this, functionName, _objectSpread(_objectSpread({}, args), {}, {
                  channel: channel,
                  rpcDriverClassName: rpcDriverClassName
                }), opts);

              case 6:
                result = _context.sent;
                this.off(channel, listener);
                return _context.abrupt("return", result);

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function call(_x, _x2, _x3) {
        return _call.apply(this, arguments);
      }

      return call;
    }()
  }]);
  return WebWorkerHandle;
}(_web.default.Client);

var WebWorkerRpcDriver = /*#__PURE__*/function (_BaseRpcDriver) {
  (0, _inherits2.default)(WebWorkerRpcDriver, _BaseRpcDriver);

  var _super2 = _createSuper(WebWorkerRpcDriver);

  function WebWorkerRpcDriver(args, workerBootConfiguration) {
    var _this;

    (0, _classCallCheck2.default)(this, WebWorkerRpcDriver);
    _this = _super2.call(this, args);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "name", 'WebWorkerRpcDriver');
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "WorkerClass", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "workerBootConfiguration", void 0);
    _this.WorkerClass = args.WorkerClass;
    _this.workerBootConfiguration = workerBootConfiguration;
    return _this;
  }

  (0, _createClass2.default)(WebWorkerRpcDriver, [{
    key: "makeWorker",
    value: function makeWorker() {
      // note that we are making a Rpc.Client connection with a worker pool of one for each worker,
      // because we want to do our own state-group-aware load balancing rather than using librpc's
      // builtin round-robin
      var worker = new WebWorkerHandle({
        workers: [new this.WorkerClass()]
      }); // send the worker its boot configuration using info from the pluginManager

      worker.workers[0].postMessage(this.workerBootConfiguration);
      return worker;
    }
  }]);
  return WebWorkerRpcDriver;
}(_BaseRpcDriver2.default);

exports.default = WebWorkerRpcDriver;