"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _BaseRpcDriver2 = _interopRequireDefault(require("./BaseRpcDriver"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var DummyHandle = /*#__PURE__*/function () {
  function DummyHandle() {
    (0, _classCallCheck2.default)(this, DummyHandle);
  }

  (0, _createClass2.default)(DummyHandle, [{
    key: "destroy",
    value: function destroy() {}
  }, {
    key: "call",
    value: function () {
      var _call = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_functionName, _filteredArgs) {
        var _options,
            _args = arguments;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};
                return _context.abrupt("return", undefined);

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function call(_x, _x2) {
        return _call.apply(this, arguments);
      }

      return call;
    }()
  }]);
  return DummyHandle;
}();
/**
 * Stub RPC driver class that runs RPC functions in-band in the main thread.
 *
 * @param rpcFuncs - object containing runnable rpc functions
 */


var MainThreadRpcDriver = /*#__PURE__*/function (_BaseRpcDriver) {
  (0, _inherits2.default)(MainThreadRpcDriver, _BaseRpcDriver);

  var _super = _createSuper(MainThreadRpcDriver);

  function MainThreadRpcDriver(args) {
    var _this;

    (0, _classCallCheck2.default)(this, MainThreadRpcDriver);
    _this = _super.call(this, args);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "name", 'MainThreadRpcDriver');
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "makeWorker", void 0);

    _this.makeWorker = function () {
      return new DummyHandle();
    };

    return _this;
  }

  (0, _createClass2.default)(MainThreadRpcDriver, [{
    key: "call",
    value: function () {
      var _call2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(pluginManager, sessionId, functionName, args) {
        var rpcMethod, serializedArgs, result;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (sessionId) {
                  _context2.next = 2;
                  break;
                }

                throw new TypeError('sessionId is required');

              case 2:
                rpcMethod = pluginManager.getRpcMethodType(functionName);
                _context2.next = 5;
                return rpcMethod.serializeArguments(args, this.name);

              case 5:
                serializedArgs = _context2.sent;
                _context2.next = 8;
                return rpcMethod.execute(serializedArgs, this.name);

              case 8:
                result = _context2.sent;
                return _context2.abrupt("return", rpcMethod.deserializeReturn(result, args, this.name));

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function call(_x3, _x4, _x5, _x6) {
        return _call2.apply(this, arguments);
      }

      return call;
    }()
  }]);
  return MainThreadRpcDriver;
}(_BaseRpcDriver2.default);

exports.default = MainThreadRpcDriver;