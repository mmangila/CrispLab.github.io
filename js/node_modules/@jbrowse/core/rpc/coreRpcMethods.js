"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CoreRender = exports.CoreFreeResources = exports.CoreGetFeatures = exports.CoreGetMetadata = exports.CoreGetFileInfo = exports.CoreGetRefNames = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _operators = require("rxjs/operators");

var _dataAdapterCache = require("../data_adapters/dataAdapterCache");

var _RpcMethodType7 = _interopRequireDefault(require("../pluggableElementTypes/RpcMethodType"));

var _ServerSideRendererType = _interopRequireDefault(require("../pluggableElementTypes/renderers/ServerSideRendererType"));

var _BaseAdapter = require("../data_adapters/BaseAdapter");

var _util = require("../util");

var _simpleFeature = _interopRequireDefault(require("../util/simpleFeature"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var CoreGetRefNames = /*#__PURE__*/function (_RpcMethodType) {
  (0, _inherits2.default)(CoreGetRefNames, _RpcMethodType);

  var _super = _createSuper(CoreGetRefNames);

  function CoreGetRefNames() {
    var _this;

    (0, _classCallCheck2.default)(this, CoreGetRefNames);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "name", 'CoreGetRefNames');
    return _this;
  }

  (0, _createClass2.default)(CoreGetRefNames, [{
    key: "execute",
    value: function () {
      var _execute = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee(args, rpcDriverClassName) {
        var deserializedArgs, sessionId, adapterConfig, _yield$getAdapter, dataAdapter;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.deserializeArguments(args, rpcDriverClassName);

              case 2:
                deserializedArgs = _context.sent;
                sessionId = deserializedArgs.sessionId, adapterConfig = deserializedArgs.adapterConfig;
                _context.next = 6;
                return (0, _dataAdapterCache.getAdapter)(this.pluginManager, sessionId, adapterConfig);

              case 6:
                _yield$getAdapter = _context.sent;
                dataAdapter = _yield$getAdapter.dataAdapter;

                if (!(dataAdapter instanceof _BaseAdapter.BaseFeatureDataAdapter)) {
                  _context.next = 10;
                  break;
                }

                return _context.abrupt("return", dataAdapter.getRefNames(deserializedArgs));

              case 10:
                return _context.abrupt("return", []);

              case 11:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function execute(_x, _x2) {
        return _execute.apply(this, arguments);
      }

      return execute;
    }()
  }]);
  return CoreGetRefNames;
}(_RpcMethodType7.default);

exports.CoreGetRefNames = CoreGetRefNames;

var CoreGetFileInfo = /*#__PURE__*/function (_RpcMethodType2) {
  (0, _inherits2.default)(CoreGetFileInfo, _RpcMethodType2);

  var _super2 = _createSuper(CoreGetFileInfo);

  function CoreGetFileInfo() {
    var _this2;

    (0, _classCallCheck2.default)(this, CoreGetFileInfo);

    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    _this2 = _super2.call.apply(_super2, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "name", 'CoreGetInfo');
    return _this2;
  }

  (0, _createClass2.default)(CoreGetFileInfo, [{
    key: "execute",
    value: function () {
      var _execute2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(args, rpcDriverClassName) {
        var deserializedArgs, sessionId, adapterConfig, _yield$getAdapter2, dataAdapter;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.deserializeArguments(args, rpcDriverClassName);

              case 2:
                deserializedArgs = _context2.sent;
                sessionId = deserializedArgs.sessionId, adapterConfig = deserializedArgs.adapterConfig;
                _context2.next = 6;
                return (0, _dataAdapterCache.getAdapter)(this.pluginManager, sessionId, adapterConfig);

              case 6:
                _yield$getAdapter2 = _context2.sent;
                dataAdapter = _yield$getAdapter2.dataAdapter;
                return _context2.abrupt("return", (0, _BaseAdapter.isFeatureAdapter)(dataAdapter) ? dataAdapter.getHeader(deserializedArgs) : null);

              case 9:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function execute(_x3, _x4) {
        return _execute2.apply(this, arguments);
      }

      return execute;
    }()
  }]);
  return CoreGetFileInfo;
}(_RpcMethodType7.default);

exports.CoreGetFileInfo = CoreGetFileInfo;

var CoreGetMetadata = /*#__PURE__*/function (_RpcMethodType3) {
  (0, _inherits2.default)(CoreGetMetadata, _RpcMethodType3);

  var _super3 = _createSuper(CoreGetMetadata);

  function CoreGetMetadata() {
    var _this3;

    (0, _classCallCheck2.default)(this, CoreGetMetadata);

    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    _this3 = _super3.call.apply(_super3, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this3), "name", 'CoreGetMetadata');
    return _this3;
  }

  (0, _createClass2.default)(CoreGetMetadata, [{
    key: "execute",
    value: function () {
      var _execute3 = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(args, rpcDriverClassName) {
        var deserializedArgs, sessionId, adapterConfig, _yield$getAdapter3, dataAdapter;

        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.deserializeArguments(args, rpcDriverClassName);

              case 2:
                deserializedArgs = _context3.sent;
                sessionId = deserializedArgs.sessionId, adapterConfig = deserializedArgs.adapterConfig;
                _context3.next = 6;
                return (0, _dataAdapterCache.getAdapter)(this.pluginManager, sessionId, adapterConfig);

              case 6:
                _yield$getAdapter3 = _context3.sent;
                dataAdapter = _yield$getAdapter3.dataAdapter;
                return _context3.abrupt("return", (0, _BaseAdapter.isFeatureAdapter)(dataAdapter) ? dataAdapter.getMetadata(deserializedArgs) : null);

              case 9:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function execute(_x5, _x6) {
        return _execute3.apply(this, arguments);
      }

      return execute;
    }()
  }]);
  return CoreGetMetadata;
}(_RpcMethodType7.default);

exports.CoreGetMetadata = CoreGetMetadata;

var CoreGetFeatures = /*#__PURE__*/function (_RpcMethodType4) {
  (0, _inherits2.default)(CoreGetFeatures, _RpcMethodType4);

  var _super4 = _createSuper(CoreGetFeatures);

  function CoreGetFeatures() {
    var _this4;

    (0, _classCallCheck2.default)(this, CoreGetFeatures);

    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }

    _this4 = _super4.call.apply(_super4, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this4), "name", 'CoreGetFeatures');
    return _this4;
  }

  (0, _createClass2.default)(CoreGetFeatures, [{
    key: "deserializeReturn",
    value: function () {
      var _deserializeReturn = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(feats) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                return _context4.abrupt("return", feats.map(function (feat) {
                  return new _simpleFeature.default(feat);
                }));

              case 1:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      function deserializeReturn(_x7) {
        return _deserializeReturn.apply(this, arguments);
      }

      return deserializeReturn;
    }()
  }, {
    key: "execute",
    value: function () {
      var _execute4 = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(args, rpcDriverClassName) {
        var deserializedArgs, sessionId, adapterConfig, region, _yield$getAdapter4, dataAdapter, ret, r;

        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this.deserializeArguments(args, rpcDriverClassName);

              case 2:
                deserializedArgs = _context5.sent;
                sessionId = deserializedArgs.sessionId, adapterConfig = deserializedArgs.adapterConfig, region = deserializedArgs.region;
                _context5.next = 6;
                return (0, _dataAdapterCache.getAdapter)(this.pluginManager, sessionId, adapterConfig);

              case 6:
                _yield$getAdapter4 = _context5.sent;
                dataAdapter = _yield$getAdapter4.dataAdapter;

                if (!(0, _BaseAdapter.isFeatureAdapter)(dataAdapter)) {
                  _context5.next = 14;
                  break;
                }

                ret = dataAdapter.getFeatures(region);
                _context5.next = 12;
                return ret.pipe((0, _operators.toArray)()).toPromise();

              case 12:
                r = _context5.sent;
                return _context5.abrupt("return", r.map(function (f) {
                  return f.toJSON();
                }));

              case 14:
                return _context5.abrupt("return", []);

              case 15:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function execute(_x8, _x9) {
        return _execute4.apply(this, arguments);
      }

      return execute;
    }()
  }]);
  return CoreGetFeatures;
}(_RpcMethodType7.default);
/**
 * free up any resources (e.g. cached adapter objects)
 * that are only associated with the given track ID.
 *
 * returns number of objects deleted
 */


exports.CoreGetFeatures = CoreGetFeatures;

var CoreFreeResources = /*#__PURE__*/function (_RpcMethodType5) {
  (0, _inherits2.default)(CoreFreeResources, _RpcMethodType5);

  var _super5 = _createSuper(CoreFreeResources);

  function CoreFreeResources() {
    var _this5;

    (0, _classCallCheck2.default)(this, CoreFreeResources);

    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
      args[_key5] = arguments[_key5];
    }

    _this5 = _super5.call.apply(_super5, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this5), "name", 'CoreFreeResources');
    return _this5;
  }

  (0, _createClass2.default)(CoreFreeResources, [{
    key: "execute",
    value: function () {
      var _execute5 = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(specification) {
        var deleteCount;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                deleteCount = 0;
                deleteCount += (0, _dataAdapterCache.freeAdapterResources)(specification); // pass the freeResources hint along to all the renderers as well

                this.pluginManager.getRendererTypes().forEach(function (renderer) {
                  var count = renderer.freeResources();

                  if (count) {
                    deleteCount += count;
                  }
                });
                return _context6.abrupt("return", deleteCount);

              case 4:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function execute(_x10) {
        return _execute5.apply(this, arguments);
      }

      return execute;
    }()
  }]);
  return CoreFreeResources;
}(_RpcMethodType7.default);

exports.CoreFreeResources = CoreFreeResources;

/**
 * fetches features from an adapter and call a renderer with them
 */
var CoreRender = /*#__PURE__*/function (_RpcMethodType6) {
  (0, _inherits2.default)(CoreRender, _RpcMethodType6);

  var _super6 = _createSuper(CoreRender);

  function CoreRender() {
    var _this6;

    (0, _classCallCheck2.default)(this, CoreRender);

    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
      args[_key6] = arguments[_key6];
    }

    _this6 = _super6.call.apply(_super6, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this6), "name", 'CoreRender');
    return _this6;
  }

  (0, _createClass2.default)(CoreRender, [{
    key: "serializeArguments",
    value: function () {
      var _serializeArguments = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(args, rpcDriverClassName) {
        var _this$pluginManager$r, _this$pluginManager$r2;

        var assemblyManager, renamedArgs, rendererType, RendererType;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                assemblyManager = (_this$pluginManager$r = this.pluginManager.rootModel) === null || _this$pluginManager$r === void 0 ? void 0 : (_this$pluginManager$r2 = _this$pluginManager$r.session) === null || _this$pluginManager$r2 === void 0 ? void 0 : _this$pluginManager$r2.assemblyManager;

                if (!assemblyManager) {
                  _context7.next = 7;
                  break;
                }

                _context7.next = 4;
                return (0, _util.renameRegionsIfNeeded)(assemblyManager, args);

              case 4:
                _context7.t0 = _context7.sent;
                _context7.next = 8;
                break;

              case 7:
                _context7.t0 = args;

              case 8:
                renamedArgs = _context7.t0;

                if (!(rpcDriverClassName === 'MainThreadRpcDriver')) {
                  _context7.next = 11;
                  break;
                }

                return _context7.abrupt("return", renamedArgs);

              case 11:
                rendererType = args.rendererType;
                RendererType = validateRendererType(rendererType, this.pluginManager.getRendererType(rendererType));
                return _context7.abrupt("return", RendererType.serializeArgsInClient(renamedArgs));

              case 14:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function serializeArguments(_x11, _x12) {
        return _serializeArguments.apply(this, arguments);
      }

      return serializeArguments;
    }()
  }, {
    key: "execute",
    value: function () {
      var _execute6 = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(args, rpcDriverClassName) {
        var deserializedArgs, _deserializedArgs, sessionId, adapterConfig, rendererType, signal, _yield$getAdapter5, dataAdapter, RendererType, renderArgs, result;

        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                deserializedArgs = args;

                if (!(rpcDriverClassName !== 'MainThreadRpcDriver')) {
                  _context8.next = 5;
                  break;
                }

                _context8.next = 4;
                return this.deserializeArguments(args, rpcDriverClassName);

              case 4:
                deserializedArgs = _context8.sent;

              case 5:
                _deserializedArgs = deserializedArgs, sessionId = _deserializedArgs.sessionId, adapterConfig = _deserializedArgs.adapterConfig, rendererType = _deserializedArgs.rendererType, signal = _deserializedArgs.signal;

                if (sessionId) {
                  _context8.next = 8;
                  break;
                }

                throw new Error('must pass a unique session id');

              case 8:
                (0, _util.checkAbortSignal)(signal);
                _context8.next = 11;
                return (0, _dataAdapterCache.getAdapter)(this.pluginManager, sessionId, adapterConfig);

              case 11:
                _yield$getAdapter5 = _context8.sent;
                dataAdapter = _yield$getAdapter5.dataAdapter;

                if (dataAdapter instanceof _BaseAdapter.BaseFeatureDataAdapter) {
                  _context8.next = 15;
                  break;
                }

                throw new Error("CoreRender cannot handle this type of data adapter ".concat(dataAdapter));

              case 15:
                RendererType = validateRendererType(rendererType, this.pluginManager.getRendererType(rendererType));
                renderArgs = _objectSpread(_objectSpread({}, deserializedArgs), {}, {
                  dataAdapter: dataAdapter
                });

                if (!(rpcDriverClassName === 'MainThreadRpcDriver')) {
                  _context8.next = 23;
                  break;
                }

                _context8.next = 20;
                return RendererType.render(renderArgs);

              case 20:
                _context8.t0 = _context8.sent;
                _context8.next = 26;
                break;

              case 23:
                _context8.next = 25;
                return RendererType.renderInWorker(renderArgs);

              case 25:
                _context8.t0 = _context8.sent;

              case 26:
                result = _context8.t0;
                (0, _util.checkAbortSignal)(signal);
                return _context8.abrupt("return", result);

              case 29:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function execute(_x13, _x14) {
        return _execute6.apply(this, arguments);
      }

      return execute;
    }()
  }, {
    key: "deserializeReturn",
    value: function () {
      var _deserializeReturn2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(serializedReturn, args, rpcDriverClassName) {
        var rendererType, RendererType;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                if (!(rpcDriverClassName === 'MainThreadRpcDriver')) {
                  _context9.next = 2;
                  break;
                }

                return _context9.abrupt("return", serializedReturn);

              case 2:
                rendererType = args.rendererType;
                RendererType = validateRendererType(rendererType, this.pluginManager.getRendererType(rendererType));
                return _context9.abrupt("return", RendererType.deserializeResultsInClient(serializedReturn, args));

              case 5:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function deserializeReturn(_x15, _x16, _x17) {
        return _deserializeReturn2.apply(this, arguments);
      }

      return deserializeReturn;
    }()
  }]);
  return CoreRender;
}(_RpcMethodType7.default);

exports.CoreRender = CoreRender;

function validateRendererType(rendererType, RendererType) {
  if (!RendererType) {
    throw new Error("renderer \"".concat(rendererType, "\" not found"));
  } // @ts-ignore


  if (!RendererType.ReactComponent) {
    throw new Error("renderer ".concat(rendererType, " has no ReactComponent, it may not be completely implemented yet"));
  }

  if (!(RendererType instanceof _ServerSideRendererType.default)) {
    throw new Error('CoreRender requires a renderer that is a subclass of ServerSideRendererType');
  }

  return RendererType;
}