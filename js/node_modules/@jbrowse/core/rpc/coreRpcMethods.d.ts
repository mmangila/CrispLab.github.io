import RpcMethodType from '../pluggableElementTypes/RpcMethodType';
import { RenderArgs as ServerSideRenderArgs, RenderArgsSerialized as ServerSideRenderArgsSerialized, RenderResults, ResultsSerialized } from '../pluggableElementTypes/renderers/ServerSideRendererType';
import { RemoteAbortSignal } from './remoteAbortSignals';
import { Region } from '../util/types';
import SimpleFeature, { SimpleFeatureSerialized } from '../util/simpleFeature';
export declare class CoreGetRefNames extends RpcMethodType {
    name: string;
    execute(args: {
        sessionId: string;
        signal: RemoteAbortSignal;
        adapterConfig: {};
    }, rpcDriverClassName: string): Promise<string[]>;
}
export declare class CoreGetFileInfo extends RpcMethodType {
    name: string;
    execute(args: {
        sessionId: string;
        signal: RemoteAbortSignal;
        adapterConfig: {};
    }, rpcDriverClassName: string): Promise<unknown>;
}
export declare class CoreGetMetadata extends RpcMethodType {
    name: string;
    execute(args: {
        sessionId: string;
        signal: RemoteAbortSignal;
        adapterConfig: {};
    }, rpcDriverClassName: string): Promise<unknown>;
}
export declare class CoreGetFeatures extends RpcMethodType {
    name: string;
    deserializeReturn(feats: SimpleFeatureSerialized[]): Promise<SimpleFeature[]>;
    execute(args: {
        sessionId: string;
        signal: RemoteAbortSignal;
        region: Region;
        adapterConfig: {};
    }, rpcDriverClassName: string): Promise<SimpleFeatureSerialized[]>;
}
/**
 * free up any resources (e.g. cached adapter objects)
 * that are only associated with the given track ID.
 *
 * returns number of objects deleted
 */
export declare class CoreFreeResources extends RpcMethodType {
    name: string;
    execute(specification: {}): Promise<number>;
}
export interface RenderArgs extends ServerSideRenderArgs {
    adapterConfig: {};
    rendererType: string;
}
export interface RenderArgsSerialized extends ServerSideRenderArgsSerialized {
    assemblyName: string;
    regions: Region[];
    adapterConfig: {};
    rendererType: string;
}
/**
 * fetches features from an adapter and call a renderer with them
 */
export declare class CoreRender extends RpcMethodType {
    name: string;
    serializeArguments(args: RenderArgs, rpcDriverClassName: string): Promise<ServerSideRenderArgsSerialized | RenderArgs>;
    execute(args: RenderArgsSerialized & {
        signal?: RemoteAbortSignal;
    }, rpcDriverClassName: string): Promise<ResultsSerialized | RenderResults>;
    deserializeReturn(serializedReturn: RenderResults | ResultsSerialized, args: RenderArgs, rpcDriverClassName: string): Promise<unknown>;
}
