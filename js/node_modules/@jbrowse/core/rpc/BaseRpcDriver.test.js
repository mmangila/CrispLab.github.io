"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MockRendererShort = exports.MockRendererTimeout = void 0;

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _PluginManager = _interopRequireDefault(require("../PluginManager"));

var _util = require("../util");

var _BaseRpcDriver2 = _interopRequireWildcard(require("./BaseRpcDriver"));

var _RpcMethodType3 = _interopRequireDefault(require("../pluggableElementTypes/RpcMethodType"));

var _configuration = require("../configuration");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function timeout(ms) {
  return new Promise(function (resolve) {
    setTimeout(function () {
      resolve();
    }, ms);
  });
}

var MockWorkerHandle = /*#__PURE__*/function () {
  function MockWorkerHandle() {
    (0, _classCallCheck2.default)(this, MockWorkerHandle);
    (0, _defineProperty2.default)(this, "busy", false);
  }

  (0, _createClass2.default)(MockWorkerHandle, [{
    key: "destroy",
    value: function destroy() {}
  }, {
    key: "call",
    value: function () {
      var _call = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee(name) {
        var _args,
            opts,
            start,
            _args2 = arguments;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _args = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : [];
                opts = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {
                  timeout: 3000,
                  rpcDriverClassName: 'MockRpcDriver'
                };
                start = Date.now();

                if (!(name === 'ping')) {
                  _context.next = 13;
                  break;
                }

              case 4:
                if (!this.busy) {
                  _context.next = 11;
                  break;
                }

                if (!(opts.timeout < +Date.now() - start)) {
                  _context.next = 7;
                  break;
                }

                throw new Error('timeout');

              case 7:
                _context.next = 9;
                return timeout(50);

              case 9:
                _context.next = 4;
                break;

              case 11:
                _context.next = 61;
                break;

              case 13:
                if (!(name === 'doWorkShortPingTime')) {
                  _context.next = 32;
                  break;
                }

                this.busy = true;
                _context.next = 17;
                return timeout(50);

              case 17:
                this.busy = false;
                _context.next = 20;
                return timeout(50);

              case 20:
                this.busy = true;
                _context.next = 23;
                return timeout(50);

              case 23:
                this.busy = false;
                _context.next = 26;
                return timeout(50);

              case 26:
                this.busy = true;
                _context.next = 29;
                return timeout(50);

              case 29:
                this.busy = false;
                _context.next = 61;
                break;

              case 32:
                if (!(name === 'doWorkLongPingTime')) {
                  _context.next = 48;
                  break;
                }

                this.busy = true;
                _context.next = 36;
                return timeout(1000);

              case 36:
                (0, _util.checkAbortSignal)(opts.signal);
                this.busy = false;
                _context.next = 40;
                return timeout(1000);

              case 40:
                (0, _util.checkAbortSignal)(opts.signal);
                this.busy = true;
                _context.next = 44;
                return timeout(1000);

              case 44:
                (0, _util.checkAbortSignal)(opts.signal);
                this.busy = false;
                _context.next = 61;
                break;

              case 48:
                if (!(name === 'MockRenderTimeout')) {
                  _context.next = 55;
                  break;
                }

                this.busy = true;
                _context.next = 52;
                return timeout(10000);

              case 52:
                this.busy = false;
                _context.next = 61;
                break;

              case 55:
                if (!(name === 'MockRenderShort')) {
                  _context.next = 61;
                  break;
                }

                this.busy = true;
                _context.next = 59;
                return timeout(100);

              case 59:
                (0, _util.checkAbortSignal)(opts.signal);
                this.busy = false;

              case 61:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function call(_x) {
        return _call.apply(this, arguments);
      }

      return call;
    }()
  }]);
  return MockWorkerHandle;
}();

test('watch worker with long ping, generates timeout', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
  var worker, workerWatcher, result;
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          worker = new MockWorkerHandle();
          expect.assertions(1);
          _context2.prev = 2;
          workerWatcher = (0, _BaseRpcDriver2.watchWorker)(worker, 200, 'MockRpcDriver');
          result = worker.call('doWorkLongPingTime', undefined, {
            timeout: 100,
            rpcDriverClassName: 'MockRpcDriver'
          });
          _context2.next = 7;
          return Promise.race([result, workerWatcher]);

        case 7:
          _context2.next = 12;
          break;

        case 9:
          _context2.prev = 9;
          _context2.t0 = _context2["catch"](2);
          expect(_context2.t0.message).toMatch(/timeout/);

        case 12:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2, null, [[2, 9]]);
})));
test('test worker abort', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
  var worker, controller, resultP;
  return regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          worker = new MockWorkerHandle();
          expect.assertions(1);
          _context3.prev = 2;
          controller = new AbortController();
          resultP = worker.call('doWorkLongPingTime', undefined, {
            signal: controller.signal,
            timeout: 2000,
            rpcDriverClassName: 'MockRpcDriver'
          });
          controller.abort();
          _context3.next = 8;
          return resultP;

        case 8:
          _context3.next = 13;
          break;

        case 10:
          _context3.prev = 10;
          _context3.t0 = _context3["catch"](2);
          expect(_context3.t0.message).toMatch(/abort/);

        case 13:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3, null, [[2, 10]]);
})));
test('watch worker generates multiple pings', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
  var worker, workerWatcher, result;
  return regeneratorRuntime.wrap(function _callee4$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          worker = new MockWorkerHandle();
          workerWatcher = (0, _BaseRpcDriver2.watchWorker)(worker, 200, 'MockRpcDriver');
          result = worker.call('doWorkShortPingTime');
          _context4.next = 5;
          return Promise.race([result, workerWatcher]);

        case 5:
        case "end":
          return _context4.stop();
      }
    }
  }, _callee4);
})));

var MockRpcDriver = /*#__PURE__*/function (_BaseRpcDriver) {
  (0, _inherits2.default)(MockRpcDriver, _BaseRpcDriver);

  var _super = _createSuper(MockRpcDriver);

  function MockRpcDriver() {
    var _this;

    (0, _classCallCheck2.default)(this, MockRpcDriver);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "name", 'MockRpcDriver');
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "maxPingTime", 1000);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "workerCheckFrequency", 500);
    return _this;
  }

  (0, _createClass2.default)(MockRpcDriver, [{
    key: "makeWorker",
    value: function makeWorker(_pluginManager) {
      return new MockWorkerHandle();
    }
  }]);
  return MockRpcDriver;
}(_BaseRpcDriver2.default);

var MockRendererTimeout = /*#__PURE__*/function (_RpcMethodType) {
  (0, _inherits2.default)(MockRendererTimeout, _RpcMethodType);

  var _super2 = _createSuper(MockRendererTimeout);

  function MockRendererTimeout() {
    var _this2;

    (0, _classCallCheck2.default)(this, MockRendererTimeout);

    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    _this2 = _super2.call.apply(_super2, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "name", 'MockRenderTimeout');
    return _this2;
  }

  (0, _createClass2.default)(MockRendererTimeout, [{
    key: "execute",
    value: function () {
      var _execute = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      function execute() {
        return _execute.apply(this, arguments);
      }

      return execute;
    }()
  }]);
  return MockRendererTimeout;
}(_RpcMethodType3.default);

exports.MockRendererTimeout = MockRendererTimeout;

var MockRendererShort = /*#__PURE__*/function (_RpcMethodType2) {
  (0, _inherits2.default)(MockRendererShort, _RpcMethodType2);

  var _super3 = _createSuper(MockRendererShort);

  function MockRendererShort() {
    var _this3;

    (0, _classCallCheck2.default)(this, MockRendererShort);

    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    _this3 = _super3.call.apply(_super3, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this3), "name", 'MockRenderShort');
    return _this3;
  }

  (0, _createClass2.default)(MockRendererShort, [{
    key: "execute",
    value: function () {
      var _execute2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      function execute() {
        return _execute2.apply(this, arguments);
      }

      return execute;
    }()
  }]);
  return MockRendererShort;
}(_RpcMethodType3.default);

exports.MockRendererShort = MockRendererShort;
test('test RPC driver operation timeout and worker replace', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
  var config, driver, pluginManager;
  return regeneratorRuntime.wrap(function _callee7$(_context7) {
    while (1) {
      switch (_context7.prev = _context7.next) {
        case 0:
          console.warn = jest.fn();
          expect.assertions(1);
          config = (0, _configuration.ConfigurationSchema)('Mock', {}).create();
          driver = new MockRpcDriver({
            config: config
          });
          pluginManager = new _PluginManager.default();
          pluginManager.addRpcMethod(function () {
            return new MockRendererTimeout(pluginManager);
          });
          pluginManager.addRpcMethod(function () {
            return new MockRendererShort(pluginManager);
          });
          pluginManager.createPluggableElements();
          _context7.prev = 8;
          _context7.next = 11;
          return driver.call(pluginManager, 'sessionId', 'MockRenderTimeout', {}, {});

        case 11:
          _context7.next = 16;
          break;

        case 13:
          _context7.prev = 13;
          _context7.t0 = _context7["catch"](8);
          expect(_context7.t0.message).toMatch(/operation timed out/);

        case 16:
          _context7.next = 18;
          return driver.call(pluginManager, 'sessionId', 'MockRenderShort', {}, {});

        case 18:
        case "end":
          return _context7.stop();
      }
    }
  }, _callee7, null, [[8, 13]]);
})));
test('remote abort', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
  var config, driver, pluginManager, controller, resP;
  return regeneratorRuntime.wrap(function _callee8$(_context8) {
    while (1) {
      switch (_context8.prev = _context8.next) {
        case 0:
          console.warn = jest.fn();
          expect.assertions(1);
          config = (0, _configuration.ConfigurationSchema)('Mock', {}).create();
          driver = new MockRpcDriver({
            config: config
          });
          pluginManager = new _PluginManager.default();
          pluginManager.addRpcMethod(function () {
            return new MockRendererShort(pluginManager);
          });
          pluginManager.createPluggableElements();
          _context8.prev = 7;
          controller = new AbortController();
          resP = driver.call(pluginManager, 'sessionId', 'MockRenderShort', {}, {
            signal: controller.signal
          });
          controller.abort();
          _context8.next = 13;
          return resP;

        case 13:
          _context8.next = 18;
          break;

        case 15:
          _context8.prev = 15;
          _context8.t0 = _context8["catch"](7);
          expect(_context8.t0.message).toMatch(/abort/);

        case 18:
        case "end":
          return _context8.stop();
      }
    }
  }, _callee8, null, [[7, 15]]);
})));