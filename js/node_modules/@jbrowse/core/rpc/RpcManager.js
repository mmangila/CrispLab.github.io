"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _configuration = require("../configuration");

var _configSchema = _interopRequireDefault(require("./configSchema"));

var _WebWorkerRpcDriver = _interopRequireDefault(require("./WebWorkerRpcDriver"));

var _MainThreadRpcDriver = _interopRequireDefault(require("./MainThreadRpcDriver"));

var _ElectronRpcDriver = _interopRequireDefault(require("./ElectronRpcDriver"));

var DriverClasses = {
  WebWorkerRpcDriver: _WebWorkerRpcDriver.default,
  MainThreadRpcDriver: _MainThreadRpcDriver.default,
  ElectronRpcDriver: _ElectronRpcDriver.default
};

var RpcManager = /*#__PURE__*/function () {
  function RpcManager(pluginManager, mainConfiguration, backendConfigurations) {
    (0, _classCallCheck2.default)(this, RpcManager);
    (0, _defineProperty2.default)(this, "driverObjects", void 0);
    (0, _defineProperty2.default)(this, "pluginManager", void 0);
    (0, _defineProperty2.default)(this, "mainConfiguration", void 0);
    (0, _defineProperty2.default)(this, "backendConfigurations", void 0);

    if (!mainConfiguration) {
      throw new Error('RpcManager requires at least a main configuration');
    }

    this.pluginManager = pluginManager;
    this.mainConfiguration = mainConfiguration;
    this.backendConfigurations = backendConfigurations;
    this.driverObjects = new Map();
  }

  (0, _createClass2.default)(RpcManager, [{
    key: "getDriver",
    value: function getDriver(backendName) {
      var driver = this.driverObjects.get(backendName);

      if (driver) {
        return driver;
      }

      var backendConfiguration = this.backendConfigurations[backendName];
      var DriverClassImpl = DriverClasses[backendName];

      if (!DriverClassImpl) {
        throw new Error("requested RPC driver \"".concat(backendName, "\" is not installed"));
      } else if (!backendConfiguration) {
        throw new Error("requested RPC driver \"".concat(backendName, "\" is missing config"));
      } // eslint-disable-next-line @typescript-eslint/no-explicit-any


      var newDriver = new DriverClassImpl(backendConfiguration, {
        plugins: this.pluginManager.runtimePluginDefinitions
      });
      this.driverObjects.set(backendName, newDriver);
      return newDriver;
    }
  }, {
    key: "getDriverForCall",
    value: function getDriverForCall(_sessionId, _functionName, args) {
      var backendName = args.rpcDriverName || (0, _configuration.readConfObject)(this.mainConfiguration, 'defaultDriver');
      return this.getDriver(backendName);
    }
  }, {
    key: "call",
    value: function () {
      var _call = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee(sessionId, functionName, args) {
        var opts,
            _args = arguments;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                opts = _args.length > 3 && _args[3] !== undefined ? _args[3] : {};

                if (sessionId) {
                  _context.next = 3;
                  break;
                }

                throw new Error('sessionId is required');

              case 3:
                return _context.abrupt("return", this.getDriverForCall(sessionId, functionName, args).call(this.pluginManager, sessionId, functionName, args, opts));

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function call(_x, _x2, _x3) {
        return _call.apply(this, arguments);
      }

      return call;
    }()
  }]);
  return RpcManager;
}();

exports.default = RpcManager;
(0, _defineProperty2.default)(RpcManager, "configSchema", _configSchema.default);