import Rpc from '@librpc/web';
import BaseRpcDriver, { RpcDriverConstructorArgs } from './BaseRpcDriver';
import { PluginDefinition } from '../PluginLoader';
interface WebpackWorker {
    new (): Worker;
    prototype: Worker;
}
interface WebWorkerRpcDriverConstructorArgs extends RpcDriverConstructorArgs {
    WorkerClass: WebpackWorker;
}
declare class WebWorkerHandle extends Rpc.Client {
    destroy(): void;
    call(functionName: string, args: Record<string, unknown>, opts: {
        statusCallback?: (arg0: string) => void;
        rpcDriverClassName: string;
    }): Promise<any>;
}
export default class WebWorkerRpcDriver extends BaseRpcDriver {
    name: string;
    WorkerClass: WebpackWorker;
    workerBootConfiguration: {
        plugins: PluginDefinition[];
    };
    constructor(args: WebWorkerRpcDriverConstructorArgs, workerBootConfiguration: {
        plugins: PluginDefinition[];
    });
    makeWorker(): WebWorkerHandle;
}
export {};
