import BaseRpcDriver, { RpcDriverConstructorArgs } from './BaseRpcDriver';
import PluginManager from '../PluginManager';
import { PluginDefinition } from '../PluginLoader';
declare global {
    interface Window {
        electronBetterIpc: {
            ipcRenderer?: import('electron-better-ipc-extra').RendererProcessIpc;
        };
        electron?: import('electron').AllElectron;
    }
}
interface ElectronRpcDriverConstructorArgs extends RpcDriverConstructorArgs {
    workerCreationChannel: string;
}
declare type WorkerBootConfig = {
    plugins: PluginDefinition[];
};
declare class WindowWorkerHandle {
    private ipcRenderer;
    private window;
    private config;
    private ready;
    constructor(ipcRenderer: import('electron-better-ipc-extra').RendererProcessIpc, window: import('electron').BrowserWindow, config: WorkerBootConfig);
    destroy(): void;
    setup(): Promise<void>;
    call(functionName: string, filteredArgs?: Record<string, unknown>, opts?: {
        statusCallback?: (arg0: string) => void;
    }): Promise<unknown>;
}
export default class ElectronRpcDriver extends BaseRpcDriver {
    name: string;
    bootConfig: WorkerBootConfig;
    channel: string;
    constructor(args: ElectronRpcDriverConstructorArgs, bootConfig: WorkerBootConfig);
    makeWorker(): WindowWorkerHandle;
    call(pluginManager: PluginManager, sessionId: string, functionName: string, args: {}, options?: {}): Promise<unknown>;
}
export {};
