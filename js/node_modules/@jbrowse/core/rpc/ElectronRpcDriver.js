"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _shortid = _interopRequireDefault(require("shortid"));

var _BaseRpcDriver2 = _interopRequireDefault(require("./BaseRpcDriver"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var _ref = // eslint-disable-next-line @typescript-eslint/no-explicit-any
typeof window !== 'undefined' ? window : {},
    _ref$electronBetterIp = _ref.electronBetterIpc,
    electronBetterIpc = _ref$electronBetterIp === void 0 ? {} : _ref$electronBetterIp,
    electron = _ref.electron;

function wait(_x) {
  return _wait.apply(this, arguments);
}

function _wait() {
  _wait = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(ms) {
    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            return _context4.abrupt("return", new Promise(function (resolve) {
              setTimeout(resolve, ms);
            }));

          case 1:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _wait.apply(this, arguments);
}

var WindowWorkerHandle = /*#__PURE__*/function () {
  function WindowWorkerHandle(ipcRenderer, window, config) {
    (0, _classCallCheck2.default)(this, WindowWorkerHandle);
    (0, _defineProperty2.default)(this, "ipcRenderer", void 0);
    (0, _defineProperty2.default)(this, "window", void 0);
    (0, _defineProperty2.default)(this, "config", void 0);
    (0, _defineProperty2.default)(this, "ready", false);
    this.ipcRenderer = ipcRenderer;
    this.window = window;
    this.config = config;
  }

  (0, _createClass2.default)(WindowWorkerHandle, [{
    key: "destroy",
    value: function destroy() {
      this.window.destroy();
    } // waits for a new worker to start, and then sends it its bootstrap configuration

  }, {
    key: "setup",
    value: function () {
      var _setup = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var readyForConfig, result;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (this.ready) {
                  _context.next = 16;
                  break;
                }

                readyForConfig = false;

              case 2:
                if (readyForConfig) {
                  _context.next = 10;
                  break;
                }

                _context.next = 5;
                return wait(1000);

              case 5:
                _context.next = 7;
                return this.ipcRenderer.callRenderer(this.window, 'ready_for_configuration');

              case 7:
                readyForConfig = !!_context.sent;
                _context.next = 2;
                break;

              case 10:
                _context.next = 12;
                return this.ipcRenderer.callRenderer(this.window, 'configure', this.config);

              case 12:
                result = _context.sent;

                if (result) {
                  _context.next = 15;
                  break;
                }

                throw new Error('failed to configure worker');

              case 15:
                this.ready = true;

              case 16:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function setup() {
        return _setup.apply(this, arguments);
      }

      return setup;
    }()
  }, {
    key: "call",
    value: function () {
      var _call = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(functionName, filteredArgs) {
        var opts,
            statusCallback,
            rest,
            channel,
            listener,
            result,
            _args2 = arguments;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                opts = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};
                _context2.next = 3;
                return this.setup();

              case 3:
                statusCallback = opts.statusCallback, rest = (0, _objectWithoutProperties2.default)(opts, ["statusCallback"]);
                channel = "message-".concat(_shortid.default.generate());

                listener = function listener(_event, message) {
                  if (opts.statusCallback) {
                    opts.statusCallback(message);
                  }
                };

                this.ipcRenderer.on(channel, listener);
                _context2.next = 9;
                return this.ipcRenderer.callRenderer(this.window, 'call', functionName, _objectSpread(_objectSpread({}, filteredArgs), {}, {
                  channel: channel
                }), rest);

              case 9:
                result = _context2.sent;
                this.ipcRenderer.removeListener(channel, listener);
                return _context2.abrupt("return", result);

              case 12:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function call(_x2, _x3) {
        return _call.apply(this, arguments);
      }

      return call;
    }()
  }]);
  return WindowWorkerHandle;
}();

var ElectronRpcDriver = /*#__PURE__*/function (_BaseRpcDriver) {
  (0, _inherits2.default)(ElectronRpcDriver, _BaseRpcDriver);

  var _super = _createSuper(ElectronRpcDriver);

  function ElectronRpcDriver(args, bootConfig) {
    var _this;

    (0, _classCallCheck2.default)(this, ElectronRpcDriver);
    _this = _super.call(this, args);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "name", 'ElectronRpcDriver');
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "bootConfig", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "channel", void 0);
    var workerCreationChannel = args.workerCreationChannel;
    _this.bootConfig = bootConfig;
    _this.channel = workerCreationChannel;
    return _this;
  }

  (0, _createClass2.default)(ElectronRpcDriver, [{
    key: "makeWorker",
    value: function makeWorker() {
      var ipcRenderer = electronBetterIpc.ipcRenderer;

      if (!ipcRenderer) {
        throw new Error('Cannot use ElectronRpcDriver without ipcRenderer from electron-better-ipc-extra');
      }

      if (!electron) {
        throw new Error('Cannot use ElectronRpcDriver without electron available globally');
      }

      var electronRemote = electron.remote;
      var workerId = ipcRenderer.sendSync(this.channel);
      var window = electronRemote.BrowserWindow.fromId(workerId);
      var worker = new WindowWorkerHandle(ipcRenderer, window, this.bootConfig);
      return worker;
    }
  }, {
    key: "call",
    value: function () {
      var _call2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(pluginManager, sessionId, functionName, args) {
        var options,
            r,
            img,
            _args3 = arguments;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                options = _args3.length > 4 && _args3[4] !== undefined ? _args3[4] : {};
                _context3.next = 3;
                return (0, _get2.default)((0, _getPrototypeOf2.default)(ElectronRpcDriver.prototype), "call", this).call(this, pluginManager, sessionId, functionName, args, options);

              case 3:
                r = _context3.sent;

                if ((0, _typeof2.default)(r) === 'object' && r !== null && 'imageData' in r) {
                  img = new Image(); // @ts-ignore

                  img.src = r.imageData.dataURL; // @ts-ignore

                  r.imageData = img;
                }

                return _context3.abrupt("return", r);

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function call(_x4, _x5, _x6, _x7) {
        return _call2.apply(this, arguments);
      }

      return call;
    }()
  }]);
  return ElectronRpcDriver;
}(_BaseRpcDriver2.default);

exports.default = ElectronRpcDriver;