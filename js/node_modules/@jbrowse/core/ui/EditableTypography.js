"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _InputBase = _interopRequireDefault(require("@material-ui/core/InputBase"));

var _Typography = _interopRequireDefault(require("@material-ui/core/Typography"));

var _styles = require("@material-ui/core/styles");

var _react = _interopRequireWildcard(require("react"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var useStyles = (0, _styles.makeStyles)(function (theme) {
  return {
    input: {},
    inputBase: {},
    typography: {
      top: 6,
      left: 2,
      position: 'absolute',
      whiteSpace: 'nowrap',
      visibility: 'hidden'
    },
    inputRoot: {
      padding: theme.spacing(0.5)
    },
    inputFocused: {
      borderStyle: 'solid',
      borderRadius: theme.shape.borderRadius,
      borderWidth: 2
    }
  };
});

// using forwardRef so that MUI Tooltip can wrap this component
var EditableTypography = /*#__PURE__*/_react.default.forwardRef(function (props, ref) {
  var value = props.value,
      setValue = props.setValue,
      variant = props.variant,
      other = (0, _objectWithoutProperties2.default)(props, ["value", "setValue", "variant"]);

  var _useState = (0, _react.useState)(),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      editedValue = _useState2[0],
      setEditedValue = _useState2[1];

  var _useState3 = (0, _react.useState)(0),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      width = _useState4[0],
      setWidth = _useState4[1];

  var _useState5 = (0, _react.useState)(null),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      sizerNode = _useState6[0],
      setSizerNode = _useState6[1];

  var _useState7 = (0, _react.useState)(null),
      _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
      inputNode = _useState8[0],
      setInputNode = _useState8[1];

  var _useState9 = (0, _react.useState)(false),
      _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
      blur = _useState10[0],
      setBlur = _useState10[1];

  (0, _react.useEffect)(function () {
    if (blur) {
      inputNode && inputNode.blur();
      setBlur(false);
    }
  }, [blur, inputNode]);
  var classes = useStyles(props);
  var theme = (0, _styles.useTheme)();
  var clientWidth = sizerNode && sizerNode.clientWidth;

  if (clientWidth && clientWidth !== width) {
    setWidth(clientWidth);
  }

  var sizerRef = function sizerRef(node) {
    setSizerNode(node);
  };

  var inputRef = function inputRef(node) {
    setInputNode(node);
  };

  function handleBlur() {
    if (editedValue && editedValue !== value) {
      setValue(editedValue);
    }

    setEditedValue(undefined);
  }

  function handleKeyDown(event) {
    if (event.key === 'Enter') {
      inputNode && inputNode.blur();
    } else if (event.key === 'Escape') {
      setEditedValue(undefined);
      setBlur(true);
    }
  }

  function handleChange(event) {
    setEditedValue(event.target.value);
  }

  return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({}, other, {
    ref: ref
  }), /*#__PURE__*/_react.default.createElement("div", {
    style: {
      position: 'relative'
    }
  }, /*#__PURE__*/_react.default.createElement(_Typography.default, {
    ref: sizerRef,
    component: "span",
    variant: variant,
    className: classes.typography
  }, editedValue === undefined ? value : editedValue)), /*#__PURE__*/_react.default.createElement(_InputBase.default, {
    inputRef: inputRef,
    className: classes.inputBase,
    inputProps: {
      style: _objectSpread({
        width: width
      }, variant && variant !== 'inherit' && variant !== 'srOnly' ? theme.typography[variant] : {})
    },
    classes: {
      input: classes.input,
      root: classes.inputRoot,
      focused: classes.inputFocused
    },
    value: editedValue === undefined ? value : editedValue,
    onChange: handleChange,
    onKeyDown: handleKeyDown,
    onBlur: handleBlur
  }));
});

var _default = EditableTypography;
exports.default = _default;