"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _core = require("@material-ui/core");

var _Close = _interopRequireDefault(require("@material-ui/icons/Close"));

var _Menu = _interopRequireDefault(require("@material-ui/icons/Menu"));

var _colorManipulator = require("@material-ui/core/styles/colorManipulator");

var _mobxReact = require("mobx-react");

var _mobxStateTree = require("mobx-state-tree");

var _react = _interopRequireWildcard(require("react"));

var _reactMeasure = require("react-measure");

var _EditableTypography = _interopRequireDefault(require("./EditableTypography"));

var _Menu2 = _interopRequireDefault(require("./Menu"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var useStyles = (0, _core.makeStyles)(function (theme) {
  return {
    viewContainer: {
      overflow: 'hidden',
      background: theme.palette.secondary.main,
      margin: theme.spacing(0.5)
    },
    icon: {
      color: theme.palette.secondary.contrastText
    },
    grow: {
      flexGrow: 1
    },
    iconRoot: {
      '&:hover': {
        backgroundColor: (0, _colorManipulator.fade)(theme.palette.secondary.contrastText, theme.palette.action.hoverOpacity),
        '@media (hover: none)': {
          backgroundColor: 'transparent'
        }
      }
    },
    listItemIconRoot: {
      minWidth: 28
    },
    listItemInset: {
      paddingLeft: 28
    },
    menuItemDense: {
      paddingLeft: theme.spacing(1),
      paddingRight: 26,
      paddingTop: 0,
      paddingBottom: 0
    },
    secondaryActionRoot: {
      right: theme.spacing(1)
    },
    input: {
      paddingBottom: 0,
      paddingTop: 2
    },
    inputBase: {
      color: theme.palette.secondary.contrastText
    },
    inputRoot: {
      '&:hover': {
        backgroundColor: theme.palette.secondary.light
      }
    },
    inputFocused: {
      borderColor: theme.palette.primary.main,
      backgroundColor: theme.palette.secondary.light
    }
  };
});
var ViewMenu = (0, _mobxReact.observer)(function (_ref) {
  var model = _ref.model,
      IconButtonProps = _ref.IconButtonProps,
      IconProps = _ref.IconProps;

  var _useState = (0, _react.useState)(),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      anchorEl = _useState2[0],
      setAnchorEl = _useState2[1];

  if (!(model.menuItems && model.menuItems.length)) {
    return null;
  }

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_core.IconButton, (0, _extends2.default)({}, IconButtonProps, {
    "aria-label": "more",
    "aria-controls": "view-menu",
    "aria-haspopup": "true",
    onClick: function onClick(event) {
      setAnchorEl(event.currentTarget);
    },
    "data-testid": "view_menu_icon"
  }), /*#__PURE__*/_react.default.createElement(_Menu.default, IconProps)), /*#__PURE__*/_react.default.createElement(_Menu2.default, {
    anchorEl: anchorEl,
    open: Boolean(anchorEl),
    onMenuItemClick: function onMenuItemClick(_event, callback) {
      callback();
      setAnchorEl(undefined);
    },
    onClose: function onClose() {
      setAnchorEl(undefined);
    },
    menuItems: model.menuItems
  }));
});

var _default = (0, _reactMeasure.withContentRect)('bounds')((0, _mobxReact.observer)(function (_ref2) {
  var view = _ref2.view,
      onClose = _ref2.onClose,
      style = _ref2.style,
      children = _ref2.children,
      contentRect = _ref2.contentRect,
      measureRef = _ref2.measureRef;
  var classes = useStyles();
  var theme = (0, _core.useTheme)();
  var padWidth = theme.spacing(1);
  var width = 0;

  if (contentRect.bounds) {
    ;
    width = contentRect.bounds.width;
  }

  (0, _react.useEffect)(function () {
    if (width) {
      if ((0, _mobxStateTree.isAlive)(view)) {
        view.setWidth(width - padWidth * 2);
      }
    }
  }, [padWidth, view, width]);
  var scrollRef = (0, _react.useRef)(null); // scroll the view into view when first mounted
  // note that this effect will run only once, because of
  // the empty array second param

  (0, _react.useEffect)(function () {
    var _scrollRef$current;

    if (scrollRef !== null && scrollRef !== void 0 && (_scrollRef$current = scrollRef.current) !== null && _scrollRef$current !== void 0 && _scrollRef$current.scrollIntoView) {
      scrollRef.current.scrollIntoView({
        block: 'center'
      });
    }
  }, []);
  return /*#__PURE__*/_react.default.createElement(_core.Paper, {
    elevation: 12,
    ref: measureRef,
    className: classes.viewContainer,
    style: _objectSpread(_objectSpread({}, style), {}, {
      padding: "0px ".concat(padWidth, "px ").concat(padWidth, "px")
    })
  }, /*#__PURE__*/_react.default.createElement("div", {
    ref: scrollRef,
    style: {
      display: 'flex'
    }
  }, /*#__PURE__*/_react.default.createElement(ViewMenu, {
    model: view,
    IconButtonProps: {
      classes: {
        root: classes.iconRoot
      },
      edge: 'start'
    },
    IconProps: {
      className: classes.icon
    }
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: classes.grow
  }), /*#__PURE__*/_react.default.createElement(_core.Tooltip, {
    title: "Rename view",
    arrow: true
  }, /*#__PURE__*/_react.default.createElement(_EditableTypography.default, {
    value: view.displayName || ( // @ts-ignore
    view.assemblyNames ? // @ts-ignore
    view.assemblyNames.join(',') : 'Untitled view'),
    setValue: function setValue(val) {
      view.setDisplayName(val);
    },
    variant: "body2",
    classes: {
      input: classes.input,
      inputBase: classes.inputBase,
      inputRoot: classes.inputRoot,
      inputFocused: classes.inputFocused
    }
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: classes.grow
  }), /*#__PURE__*/_react.default.createElement(_core.IconButton, {
    "data-testid": "close_view",
    classes: {
      root: classes.iconRoot
    },
    edge: "end",
    onClick: onClose
  }, /*#__PURE__*/_react.default.createElement(_Close.default, {
    className: classes.icon
  }))), /*#__PURE__*/_react.default.createElement(_core.Paper, null, children));
}));

exports.default = _default;