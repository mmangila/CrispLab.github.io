"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isHTML = isHTML;
exports.default = SanitizedHTML;

var _react = _interopRequireDefault(require("react"));

var _escapeHtml = _interopRequireDefault(require("escape-html"));

var _dompurify = _interopRequireDefault(require("dompurify"));

// source https://github.com/sindresorhus/html-tags/blob/master/html-tags.json
// with some random uncommon ones removed. note: we just use this to run the content
// through dompurify without escaping if we see an htmlTag from this list
// otherwise we escape angle brackets and things prematurely because it might be
// something like <TRA> in VCF. Ref #657
var htmlTags = ['a', 'b', 'br', 'code', 'div', 'em', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'i', 'img', 'li', 'p', 'pre', 'span', 'small', 'strong', 'table', 'tbody', 'td', 'tfoot', 'th', 'thead', 'tr', 'u', 'ul']; // adapted from is-html https://github.com/sindresorhus/is-html/blob/master/index.js

var full = new RegExp(htmlTags.map(function (tag) {
  return "<".concat(tag, "\\b[^>]*>");
}).join('|'), 'i');

function isHTML(str) {
  return full.test(str);
}

function SanitizedHTML(_ref) {
  var html = _ref.html;
  var value = isHTML(html) ? html : (0, _escapeHtml.default)(html); // eslint-disable-next-line react/no-danger

  return /*#__PURE__*/_react.default.createElement("div", {
    dangerouslySetInnerHTML: {
      __html: _dompurify.default.sanitize(value)
    }
  });
}