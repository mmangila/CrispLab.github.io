"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _core = require("@material-ui/core");

var _lab = require("@material-ui/lab");

var _mobxReact = require("mobx-react");

var _util = require("../util");

var _tracks = require("../util/tracks");

function isUriLocation(location) {
  return 'uri' in location;
}

function isLocalPathLocation(location) {
  return 'localPath' in location;
}

function isBlobLocation(location) {
  return 'blobId' in location;
}

var FileLocationEditor = (0, _mobxReact.observer)(function (props) {
  var location = props.location,
      name = props.name,
      description = props.description;
  var fileOrUrl = !location || isUriLocation(location) ? 'url' : 'file';

  var _useState = (0, _react.useState)(fileOrUrl),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      fileOrUrlState = _useState2[0],
      setFileOrUrlState = _useState2[1];

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_core.InputLabel, {
    shrink: true,
    htmlFor: "callback-editor"
  }, name), /*#__PURE__*/_react.default.createElement(_core.Grid, {
    container: true,
    spacing: 1,
    direction: "row",
    alignItems: "center"
  }, /*#__PURE__*/_react.default.createElement(_core.Grid, {
    item: true
  }, /*#__PURE__*/_react.default.createElement(_lab.ToggleButtonGroup, {
    value: fileOrUrlState,
    exclusive: true,
    onChange: function onChange(_, newValue) {
      if (newValue === 'url') {
        setFileOrUrlState('url');
      } else {
        setFileOrUrlState('file');
      }
    },
    "aria-label": "file or url picker"
  }, /*#__PURE__*/_react.default.createElement(_lab.ToggleButton, {
    value: "file",
    "aria-label": "local file"
  }, "File"), /*#__PURE__*/_react.default.createElement(_lab.ToggleButton, {
    value: "url",
    "aria-label": "url"
  }, "URL"))), /*#__PURE__*/_react.default.createElement(_core.Grid, {
    item: true
  }, fileOrUrlState === 'url' ? /*#__PURE__*/_react.default.createElement(UrlChooser, props) : /*#__PURE__*/_react.default.createElement(LocalFileChooser, props))), /*#__PURE__*/_react.default.createElement(_core.FormHelperText, null, description));
});

var UrlChooser = function UrlChooser(props) {
  var location = props.location,
      setLocation = props.setLocation;
  return /*#__PURE__*/_react.default.createElement(_core.TextField, {
    fullWidth: true,
    inputProps: {
      'data-testid': 'urlInput'
    },
    defaultValue: location && isUriLocation(location) ? location.uri : '',
    onChange: function onChange(event) {
      return setLocation({
        uri: event.target.value
      });
    }
  });
};

var LocalFileChooser = (0, _mobxReact.observer)(function (props) {
  var location = props.location,
      setLocation = props.setLocation;
  var filename = location && (isBlobLocation(location) && location.name || isLocalPathLocation(location) && location.localPath);
  var needToReload = location && isBlobLocation(location) && !(0, _tracks.getBlob)(location.blobId);
  return /*#__PURE__*/_react.default.createElement("div", {
    style: {
      position: 'relative'
    }
  }, /*#__PURE__*/_react.default.createElement(_core.Button, {
    variant: "outlined",
    component: "label"
  }, "Choose File", /*#__PURE__*/_react.default.createElement("input", {
    type: "file",
    style: {
      position: 'absolute',
      top: 0,
      left: 0,
      width: '100%',
      opacity: 0
    },
    onChange: function onChange(_ref) {
      var target = _ref.target;
      var file = target && target.files && target.files[0];

      if (file) {
        if (_util.isElectron) {
          setLocation({
            localPath: file.path
          });
        } else {
          setLocation((0, _tracks.storeBlobLocation)({
            blob: file
          }));
        }
      }
    }
  })), filename ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_core.Typography, {
    style: {
      marginLeft: '0.4rem'
    },
    variant: "body1",
    component: "span"
  }, filename), needToReload ? /*#__PURE__*/_react.default.createElement(_core.Typography, {
    color: "error"
  }, "(need to reload)") : null) : null);
});
var _default = FileLocationEditor;
exports.default = _default;