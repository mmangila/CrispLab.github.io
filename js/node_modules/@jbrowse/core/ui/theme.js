"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createJBrowseDefaultProps = createJBrowseDefaultProps;
exports.createJBrowseDefaultOverrides = createJBrowseDefaultOverrides;
exports.createJBrowseTheme = createJBrowseTheme;
exports.jbrowseBaseTheme = exports.jbrowseDefaultPalette = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _colors = require("@material-ui/core/colors");

var _styles = require("@material-ui/core/styles");

var _createPalette = require("@material-ui/core/styles/createPalette");

var _deepmerge = _interopRequireDefault(require("deepmerge"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var refTheme = (0, _styles.createMuiTheme)(); // use this if we ever want to add some top-level thing to the theme
// declare module '@material-ui/core/styles/createMuiTheme' {
//   interface Theme {
//     status: {
//       topLevelThing: string
//     }
//   }
//   interface ThemeOptions {
//     status?: {
//       topLevelThing?: string
//     }
//   }
// }

var midnight = '#0D233F';
var grape = '#721E63';
var forest = '#135560';
var mandarin = '#FFB11D';
var jbrowseDefaultPalette = {
  // type: 'dark',
  primary: {
    main: midnight
  },
  secondary: {
    main: grape
  },
  tertiary: refTheme.palette.augmentColor({
    main: forest
  }),
  quaternary: refTheme.palette.augmentColor({
    main: mandarin
  }),
  stopCodon: '#e22',
  startCodon: '#3e3',
  bases: {
    A: refTheme.palette.augmentColor(_colors.green),
    C: refTheme.palette.augmentColor(_colors.blue),
    G: refTheme.palette.augmentColor(_colors.amber),
    T: refTheme.palette.augmentColor(_colors.red)
  }
};
exports.jbrowseDefaultPalette = jbrowseDefaultPalette;

function createJBrowseDefaultProps()
/* palette: PaletteOptions = {} */
{
  return {
    MuiButton: {
      size: 'small'
    },
    MuiFilledInput: {
      margin: 'dense'
    },
    MuiFormControl: {
      margin: 'dense'
    },
    MuiFormHelperText: {
      margin: 'dense'
    },
    MuiIconButton: {
      size: 'small'
    },
    MuiInputBase: {
      margin: 'dense'
    },
    MuiList: {
      dense: true
    },
    MuiListItem: {
      dense: true
    },
    MuiOutlinedInput: {
      margin: 'dense'
    },
    MuiFab: {
      size: 'small'
    },
    MuiTable: {
      size: 'small'
    },
    MuiTextField: {
      margin: 'dense',
      size: 'small'
    },
    MuiToolbar: {
      variant: 'dense'
    },
    MuiSvgIcon: {
      fontSize: 'small'
    },
    MuiToggleButtonGroup: {
      size: 'small'
    },
    MuiCheckbox: {
      size: 'small'
    },
    MuiLink: {
      underline: 'always'
    }
  };
}

function createJBrowseDefaultOverrides() {
  var palette = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var generatedPalette = (0, _deepmerge.default)(jbrowseDefaultPalette, palette);
  return {
    MuiIconButton: {
      colorSecondary: {
        color: generatedPalette.tertiary.main
      }
    },
    MuiButton: {
      textSecondary: {
        color: generatedPalette.tertiary.main
      }
    },
    MuiFab: {
      secondary: {
        backgroundColor: generatedPalette.quaternary.main
      }
    },
    MuiLink: {
      root: {
        color: generatedPalette.tertiary.main
      }
    },
    MuiAccordionSummary: {
      root: {
        background: generatedPalette.tertiary.main,
        '&$expanded': {
          // overrides the subclass e.g. .MuiAccordionSummary-root-311.MuiAccordionSummary-expanded-312
          minHeight: 0,
          margin: 0,
          color: generatedPalette.tertiary.contrastText
        },
        margin: 0,
        minHeight: 0,
        padding: '0px 24px'
      },
      content: {
        '&$expanded': {
          margin: '8px 0px'
        },
        margin: '8px 0px',
        color: generatedPalette.tertiary.contrastText
      },
      expanded: {// empty block needed to keep small
      }
    },
    // makes menus more compact
    MuiMenuItem: {
      root: {
        paddingTop: 3,
        paddingBottom: 3
      }
    },
    // the below two are linked to make menus more compact
    MuiListItemIcon: {
      root: {
        minWidth: 32
      }
    },
    MuiListItemText: {
      inset: {
        paddingLeft: 32
      }
    }
  };
}

var jbrowseBaseTheme = {
  palette: jbrowseDefaultPalette,
  typography: {
    fontSize: 12
  },
  spacing: 4,
  props: createJBrowseDefaultProps(),
  overrides: createJBrowseDefaultOverrides()
};
exports.jbrowseBaseTheme = jbrowseBaseTheme;

function createJBrowseTheme(theme) {
  var _theme$palette, _theme$palette2;

  if (!theme) {
    return (0, _styles.createMuiTheme)(jbrowseBaseTheme);
  }

  if ((_theme$palette = theme.palette) !== null && _theme$palette !== void 0 && _theme$palette.tertiary) {
    theme = _objectSpread(_objectSpread({}, theme), {}, {
      palette: _objectSpread(_objectSpread({}, theme.palette), {}, {
        tertiary: refTheme.palette.augmentColor(theme.palette.tertiary)
      })
    });
  }

  if ((_theme$palette2 = theme.palette) !== null && _theme$palette2 !== void 0 && _theme$palette2.quaternary) {
    theme = _objectSpread(_objectSpread({}, theme), {}, {
      palette: _objectSpread(_objectSpread({}, theme.palette), {}, {
        quaternary: refTheme.palette.augmentColor(theme.palette.quaternary)
      })
    });
  }

  theme = _objectSpread(_objectSpread({}, theme), {}, {
    props: (0, _deepmerge.default)(createJBrowseDefaultProps(), theme.props || {}),
    overrides: (0, _deepmerge.default)(createJBrowseDefaultOverrides(theme.palette), theme.overrides || {})
  });
  return (0, _styles.createMuiTheme)((0, _deepmerge.default)(jbrowseBaseTheme, theme));
}