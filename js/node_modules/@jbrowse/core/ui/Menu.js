"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _core = require("@material-ui/core");

var _ArrowRight = _interopRequireDefault(require("@material-ui/icons/ArrowRight"));

var _CheckBox = _interopRequireDefault(require("@material-ui/icons/CheckBox"));

var _CheckBoxOutlineBlank = _interopRequireDefault(require("@material-ui/icons/CheckBoxOutlineBlank"));

var _RadioButtonChecked = _interopRequireDefault(require("@material-ui/icons/RadioButtonChecked"));

var _RadioButtonUnchecked = _interopRequireDefault(require("@material-ui/icons/RadioButtonUnchecked"));

var _util = require("../util");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var useStyles = (0, _core.makeStyles)({
  paper: {
    position: 'fixed',
    overflowY: 'auto',
    overflowX: 'hidden',
    // So we see the popover when it's empty.
    minWidth: 16,
    minHeight: 16,
    maxWidth: 'calc(100% - 32px)',
    maxHeight: 'calc(100% - 32px)',
    top: 0,
    left: 0,
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0
  },
  menuItemEndDecoration: {
    position: 'absolute',
    right: 16,
    top: '50%',
    transform: 'translateY(-50%)',
    padding: 2,
    marginRight: -12,
    display: 'inline-flex'
  }
});

function MenuItemEndDecoration(props) {
  var classes = useStyles();
  var type = props.type;
  var checked;
  var disabled;

  if ('checked' in props) {
    ;
    checked = props.checked;
    disabled = props.disabled;
  }

  var icon;

  if (type === 'subMenu') {
    icon = /*#__PURE__*/_react.default.createElement(_ArrowRight.default, {
      color: "action"
    });
  } else if (type === 'checkbox') {
    if (checked) {
      var color = disabled ? 'inherit' : 'secondary';
      icon = /*#__PURE__*/_react.default.createElement(_CheckBox.default, {
        color: color
      });
    } else {
      icon = /*#__PURE__*/_react.default.createElement(_CheckBoxOutlineBlank.default, {
        color: "action"
      });
    }
  } else if (type === 'radio') {
    if (checked) {
      var _color = disabled ? 'inherit' : 'secondary';

      icon = /*#__PURE__*/_react.default.createElement(_RadioButtonChecked.default, {
        color: _color
      });
    } else {
      icon = /*#__PURE__*/_react.default.createElement(_RadioButtonUnchecked.default, {
        color: "action"
      });
    }
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: classes.menuItemEndDecoration
  }, icon);
}

function findNextValidIdx(menuItems, currentIdx) {
  var idx = menuItems.slice(currentIdx + 1).findIndex(function (menuItem) {
    return menuItem.type !== 'divider' && menuItem.type !== 'subHeader' && !menuItem.disabled;
  });

  if (idx === -1) {
    return idx;
  }

  return currentIdx + 1 + idx;
}

function findPreviousValidIdx(menuItems, currentIdx) {
  return (0, _util.findLastIndex)(menuItems.slice(0, currentIdx), function (menuItem) {
    return menuItem.type !== 'divider' && menuItem.type !== 'subHeader' && !menuItem.disabled;
  });
}

var MenuPage = /*#__PURE__*/_react.default.forwardRef(function (props, ref) {
  var _useState = (0, _react.useState)(),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      subMenuAnchorEl = _useState2[0],
      setSubMenuAnchorEl = _useState2[1];

  var _useState3 = (0, _react.useState)(),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      openSubMenuIdx = _useState4[0],
      setOpenSubMenuIdx = _useState4[1];

  var _useState5 = (0, _react.useState)(false),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      isSubMenuOpen = _useState6[0],
      setIsSubMenuOpen = _useState6[1];

  var _useState7 = (0, _react.useState)(),
      _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
      selectedMenuItemIdx = _useState8[0],
      setSelectedMenuItemIdx = _useState8[1];

  var _useState9 = (0, _react.useState)(),
      _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
      position = _useState10[0],
      setPosition = _useState10[1];

  var paperRef = (0, _react.useRef)();
  var classes = useStyles();
  var menuItems = props.menuItems,
      onMenuItemClick = props.onMenuItemClick,
      open = props.open,
      onClose = props.onClose,
      anchorEl = props.anchorEl,
      _props$top = props.top,
      top = _props$top === void 0 ? false : _props$top;
  (0, _react.useEffect)(function () {
    if (!open) {
      setSubMenuAnchorEl(undefined);
      setOpenSubMenuIdx(undefined);
    }
  }, [open]);
  (0, _react.useEffect)(function () {
    var shouldSubMenuBeOpen = open && Boolean(subMenuAnchorEl);
    var timer;

    if (shouldSubMenuBeOpen && !isSubMenuOpen) {
      timer = setTimeout(function () {
        setIsSubMenuOpen(true);
      }, 300);
    } else if (!shouldSubMenuBeOpen && isSubMenuOpen) {
      timer = setTimeout(function () {
        setIsSubMenuOpen(false);
      }, 300);
    }

    return function () {
      clearTimeout(timer);
    };
  }, [isSubMenuOpen, open, subMenuAnchorEl]);
  (0, _react.useEffect)(function () {
    if (anchorEl) {
      var rect = anchorEl.getBoundingClientRect();

      if (position) {
        if (rect.top !== position.top || rect.left + rect.width !== position.left) {
          setPosition({
            top: rect.top,
            left: rect.left + rect.width
          });
        }
      } else {
        setPosition({
          top: rect.top,
          left: rect.left + rect.width
        });
      }
    } else if (!position) {
      setPosition({});
    }
  }, [position, anchorEl]);
  var hasEndDecoration = menuItems.some(function (menuItem) {
    return 'subMenu' in menuItem || menuItem.type === 'checkbox' || menuItem.type === 'radio';
  });
  var hasIcon = menuItems.some(function (menuItem) {
    return 'icon' in menuItem && menuItem.icon;
  });
  var menuItemStyle = {};

  if (hasEndDecoration) {
    menuItemStyle.paddingRight = 48;
  }

  function handleClick(callback) {
    return function (event) {
      onMenuItemClick(event, callback);
    };
  }

  var ListContents = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_core.MenuList, {
    autoFocusItem: open && !isSubMenuOpen
  }, menuItems.sort(function (a, b) {
    return (b.priority || 0) - (a.priority || 0);
  }).map(function (menuItem, idx) {
    if (menuItem.type === 'divider') {
      return /*#__PURE__*/_react.default.createElement(_core.Divider, {
        key: "divider-".concat(idx),
        component: "li"
      });
    }

    if (menuItem.type === 'subHeader') {
      return /*#__PURE__*/_react.default.createElement(_core.ListSubheader, {
        key: "subHeader-".concat(menuItem.label, "-").concat(idx)
      }, menuItem.label);
    }

    var icon = null;
    var endDecoration = null;

    if (menuItem.icon) {
      var Icon = menuItem.icon;
      icon = /*#__PURE__*/_react.default.createElement(_core.ListItemIcon, null, /*#__PURE__*/_react.default.createElement(Icon, null));
    }

    if ('subMenu' in menuItem) {
      endDecoration = /*#__PURE__*/_react.default.createElement(MenuItemEndDecoration, {
        type: "subMenu"
      });
    } else if (menuItem.type === 'checkbox' || menuItem.type === 'radio') {
      endDecoration = /*#__PURE__*/_react.default.createElement(MenuItemEndDecoration, {
        type: menuItem.type,
        checked: menuItem.checked,
        disabled: menuItem.disabled
      });
    }

    var onClick = 'onClick' in menuItem ? handleClick(menuItem.onClick) : undefined;
    return /*#__PURE__*/_react.default.createElement(_core.MenuItem, {
      key: menuItem.label,
      style: menuItemStyle,
      selected: idx === selectedMenuItemIdx,
      onClick: onClick,
      onMouseMove: function onMouseMove(e) {
        if (e.currentTarget !== document.activeElement) {
          e.currentTarget.focus();
          setSelectedMenuItemIdx(idx);
        }

        if ('subMenu' in menuItem) {
          if (openSubMenuIdx !== idx) {
            setSubMenuAnchorEl(e.currentTarget);
            setOpenSubMenuIdx(idx);
          }
        } else {
          setSubMenuAnchorEl(undefined);
          setOpenSubMenuIdx(undefined);
        }
      },
      onKeyDown: function onKeyDown(e) {
        if (e.key === 'ArrowLeft' || e.key === 'Escape') {
          onClose && onClose(e, 'escapeKeyDown');
        } else if (e.key === 'ArrowUp') {
          setSelectedMenuItemIdx(findPreviousValidIdx(menuItems, idx));
        } else if (e.key === 'ArrowDown') {
          var a = findNextValidIdx(menuItems, idx);
          setSelectedMenuItemIdx(a);
        } else if ('subMenu' in menuItem) {
          if (e.key === 'ArrowRight' || e.key === 'Enter') {
            setSubMenuAnchorEl(e.currentTarget);
            setOpenSubMenuIdx(idx);
            setIsSubMenuOpen(true);
          }
        }
      },
      disabled: Boolean(menuItem.disabled)
    }, icon, /*#__PURE__*/_react.default.createElement(_core.ListItemText, {
      primary: menuItem.label,
      secondary: menuItem.subLabel,
      inset: hasIcon && !menuItem.icon
    }), endDecoration);
  })), menuItems.map(function (menuItem, idx) {
    var subMenu = null;

    if ('subMenu' in menuItem) {
      subMenu = /*#__PURE__*/_react.default.createElement(MenuPage, {
        key: menuItem.label,
        anchorEl: subMenuAnchorEl,
        open: isSubMenuOpen && openSubMenuIdx === idx,
        onClose: function onClose() {
          setIsSubMenuOpen(false);
          setSubMenuAnchorEl(undefined);
        },
        onMenuItemClick: onMenuItemClick,
        menuItems: menuItem.subMenu
      });
    }

    return subMenu;
  }));

  if (top) {
    return ListContents;
  }

  return /*#__PURE__*/_react.default.createElement(_core.Grow, {
    in: open,
    style: {
      transformOrigin: "0 0 0"
    },
    ref: ref
  }, /*#__PURE__*/_react.default.createElement(_core.Paper, {
    elevation: 8,
    ref: paperRef,
    className: classes.paper,
    style: _objectSpread({}, position)
  }, ListContents));
});

function Menu(props) {
  var open = props.open,
      onClose = props.onClose,
      menuItems = props.menuItems,
      onMenuItemClick = props.onMenuItemClick,
      other = (0, _objectWithoutProperties2.default)(props, ["open", "onClose", "menuItems", "onMenuItemClick"]);
  return /*#__PURE__*/_react.default.createElement(_core.Popover, (0, _extends2.default)({
    transitionDuration: 0,
    open: open,
    onClose: onClose,
    BackdropProps: {
      invisible: true
    }
  }, other), /*#__PURE__*/_react.default.createElement(MenuPage, {
    open: open,
    onClose: onClose,
    menuItems: menuItems,
    onMenuItemClick: onMenuItemClick,
    top: true
  }));
}

var _default = Menu;
exports.default = _default;