"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _offscreenCanvasPonyfill = require("../util/offscreenCanvasPonyfill");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function PrerenderedCanvas(props) {
  var width = props.width,
      height = props.height,
      highResolutionScaling = props.highResolutionScaling,
      style = props.style,
      imageData = props.imageData,
      showSoftClip = props.showSoftClip;
  var featureCanvas = (0, _react.useRef)(null);
  (0, _react.useEffect)(function () {
    if (!imageData) {
      return;
    }

    var canvas = featureCanvas.current;

    if (!canvas) {
      return;
    }

    var context = canvas.getContext('2d');

    if (!context) {
      return;
    }

    if (imageData.commands) {
      imageData.commands.forEach(function (command) {
        if (command.type === 'strokeStyle') {
          context.strokeStyle = command.style;
        } else if (command.type === 'fillStyle') {
          context.fillStyle = command.style;
        } else if (command.type === 'font') {
          context.font = command.style;
        } else {
          // @ts-ignore
          context[command.type].apply(context, (0, _toConsumableArray2.default)(command.args));
        }
      });
    } else if (imageData instanceof _offscreenCanvasPonyfill.ImageBitmapType) {
      context.drawImage(imageData, 0, 0);
    } else if (imageData.dataURL) {
      var img = new Image();

      img.onload = function () {
        return context.drawImage(img, 0, 0);
      };

      img.src = imageData.dataURL;
    }
  }, [imageData]);
  var softClipString = showSoftClip ? '_softclipped' : '';
  return /*#__PURE__*/_react.default.createElement("canvas", {
    "data-testid": "prerendered_canvas".concat(softClipString),
    ref: featureCanvas,
    width: width * highResolutionScaling,
    height: height * highResolutionScaling,
    style: _objectSpread({
      width: width,
      height: height
    }, style)
  });
}

PrerenderedCanvas.propTypes = {
  height: _propTypes.default.number.isRequired,
  width: _propTypes.default.number.isRequired,
  highResolutionScaling: _propTypes.default.number,
  style: _propTypes.default.objectOf(_propTypes.default.any),
  imageData: _propTypes.default.any // config: ReactPropTypes.objectOf(ReactPropTypes.any),

};
PrerenderedCanvas.defaultProps = {
  imageData: undefined,
  highResolutionScaling: 1,
  style: {} // config: {},

};
var _default = PrerenderedCanvas;
exports.default = _default;