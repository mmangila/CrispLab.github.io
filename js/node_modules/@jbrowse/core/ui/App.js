"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _core = require("@material-ui/core");

var _Launch = _interopRequireDefault(require("@material-ui/icons/Launch"));

var _mobxReact = require("mobx-react");

var _mobxStateTree = require("mobx-state-tree");

var _DrawerWidget = _interopRequireDefault(require("./DrawerWidget"));

var _DropDownMenu = _interopRequireDefault(require("./DropDownMenu"));

var _EditableTypography = _interopRequireDefault(require("./EditableTypography"));

var _Logo = require("./Logo");

var _Snackbar = _interopRequireDefault(require("./Snackbar"));

var _ViewContainer = _interopRequireDefault(require("./ViewContainer"));

var _configuration = require("../configuration");

var useStyles = (0, _core.makeStyles)(function (theme) {
  return {
    '@global': {
      html: {
        'font-family': 'Roboto'
      },

      /* Based on: https://www.digitalocean.com/community/tutorials/css-scrollbars */

      /* The emerging W3C standard
         that is currently Firefox-only */
      '*': {
        'scrollbar-width': 'auto',
        'scrollbar-color': 'rgba(0,0,0,.5) rgba(128,128,128)'
      },

      /* Works on Chrome/Edge/Safari */
      '*::-webkit-scrollbar': {
        '-webkit-appearance': 'none',
        width: '12px'
      },
      '*::-webkit-scrollbar-thumb': {
        'background-color': 'rgba(0,0,0,.5)',
        '-webkit-box-shadow': '0 0 1px rgba(255,255,255,.5)'
      }
    },
    root: {
      display: 'grid',
      height: '100vh',
      width: '100%'
    },
    fab: {
      float: 'right',
      position: 'sticky',
      marginTop: theme.spacing(2),
      bottom: theme.spacing(2),
      right: theme.spacing(2)
    },
    menuBarAndComponents: {
      gridColumn: 'main',
      display: 'grid',
      gridTemplateRows: '[menubar] min-content [components] auto',
      height: '100vh'
    },
    menuBar: {
      gridRow: 'menubar'
    },
    components: {
      overflowY: 'auto',
      gridRow: 'components'
    },
    appBar: {
      flexGrow: 1
    },
    grow: {
      flexGrow: 1
    },
    inputBase: {
      color: theme.palette.primary.contrastText
    },
    inputRoot: {
      '&:hover': {
        backgroundColor: theme.palette.primary.light
      }
    },
    inputFocused: {
      borderColor: theme.palette.secondary.main,
      backgroundColor: theme.palette.primary.light
    }
  };
});
var Logo = (0, _mobxReact.observer)(function (_ref) {
  var session = _ref.session;
  var configuration = session.configuration;
  var logoPath = (0, _configuration.readConfObject)(configuration, 'logoPath');

  if (!(logoPath !== null && logoPath !== void 0 && logoPath.uri)) {
    return /*#__PURE__*/_react.default.createElement(_Logo.LogoFull, {
      variant: "white"
    });
  } else {
    return /*#__PURE__*/_react.default.createElement("img", {
      src: logoPath.uri,
      alt: "Custom logo"
    });
  }
});
var App = (0, _mobxReact.observer)(function (_ref2) {
  var session = _ref2.session,
      HeaderButtons = _ref2.HeaderButtons;
  var classes = useStyles();

  var _getEnv = (0, _mobxStateTree.getEnv)(session),
      pluginManager = _getEnv.pluginManager;

  var visibleWidget = session.visibleWidget,
      drawerWidth = session.drawerWidth,
      minimized = session.minimized,
      activeWidgets = session.activeWidgets,
      savedSessionNames = session.savedSessionNames,
      name = session.name,
      menus = session.menus,
      views = session.views;

  function handleNameChange(newName) {
    if (savedSessionNames && savedSessionNames.includes(newName)) {
      session.notify("Cannot rename session to \"".concat(newName, "\", a saved session with that name already exists"), 'warning');
    } else {
      session.renameCurrentSession(newName);
    }
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: classes.root,
    style: {
      gridTemplateColumns: "[main] 1fr".concat(visibleWidget && !minimized ? " [drawer] ".concat(drawerWidth, "px") : '')
    }
  }, session.DialogComponent ? /*#__PURE__*/_react.default.createElement(_react.Suspense, {
    fallback: /*#__PURE__*/_react.default.createElement("div", null)
  }, /*#__PURE__*/_react.default.createElement(session.DialogComponent, (0, _extends2.default)({
    handleClose: function handleClose() {
      return session.setDialogComponent(undefined, undefined);
    }
  }, session.DialogProps))) : null, /*#__PURE__*/_react.default.createElement("div", {
    className: classes.menuBarAndComponents
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: classes.menuBar
  }, /*#__PURE__*/_react.default.createElement(_core.AppBar, {
    className: classes.appBar,
    position: "static"
  }, /*#__PURE__*/_react.default.createElement(_core.Toolbar, null, menus.map(function (menu) {
    return /*#__PURE__*/_react.default.createElement(_DropDownMenu.default, {
      key: menu.label,
      menuTitle: menu.label,
      menuItems: menu.menuItems,
      session: session
    });
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: classes.grow
  }), /*#__PURE__*/_react.default.createElement(_core.Tooltip, {
    title: "Rename Session",
    arrow: true
  }, /*#__PURE__*/_react.default.createElement(_EditableTypography.default, {
    value: name,
    setValue: handleNameChange,
    variant: "body1",
    classes: {
      inputBase: classes.inputBase,
      inputRoot: classes.inputRoot,
      inputFocused: classes.inputFocused
    }
  })), HeaderButtons, /*#__PURE__*/_react.default.createElement("div", {
    className: classes.grow
  }), /*#__PURE__*/_react.default.createElement("div", {
    style: {
      width: 150,
      maxHeight: 48
    }
  }, /*#__PURE__*/_react.default.createElement(Logo, {
    session: session
  }))))), /*#__PURE__*/_react.default.createElement("div", {
    className: classes.components
  }, views.map(function (view) {
    var viewType = pluginManager.getViewType(view.type);

    if (!viewType) {
      throw new Error("unknown view type ".concat(view.type));
    }

    var ReactComponent = viewType.ReactComponent;
    return /*#__PURE__*/_react.default.createElement(_ViewContainer.default, {
      key: "view-".concat(view.id),
      view: view,
      onClose: function onClose() {
        return session.removeView(view);
      }
    }, /*#__PURE__*/_react.default.createElement(_react.Suspense, {
      fallback: /*#__PURE__*/_react.default.createElement("div", null, "Loading...")
    }, /*#__PURE__*/_react.default.createElement(ReactComponent, {
      model: view,
      session: session,
      getTrackType: pluginManager.getTrackType
    })));
  }), /*#__PURE__*/_react.default.createElement("div", {
    style: {
      height: 300
    }
  }))), activeWidgets.size > 0 && minimized ? /*#__PURE__*/_react.default.createElement("div", {
    className: classes.fab
  }, /*#__PURE__*/_react.default.createElement(_core.Fab, {
    color: "primary",
    size: "small",
    "aria-label": "show",
    "data-testid": "drawer-maximize",
    style: {
      float: 'right'
    },
    onClick: function onClick() {
      session.showWidgetDrawer();
    }
  }, /*#__PURE__*/_react.default.createElement(_Launch.default, null))) : null, visibleWidget && !minimized ? /*#__PURE__*/_react.default.createElement(_DrawerWidget.default, {
    session: session
  }) : null, /*#__PURE__*/_react.default.createElement(_Snackbar.default, {
    session: session
  }));
});
var _default = App;
exports.default = _default;