"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _core = require("@material-ui/core");

var _Delete = _interopRequireDefault(require("@material-ui/icons/Delete"));

var _Close = _interopRequireDefault(require("@material-ui/icons/Close"));

var _Minimize = _interopRequireDefault(require("@material-ui/icons/Minimize"));

var _colorManipulator = require("@material-ui/core/styles/colorManipulator");

var _mobxReact = require("mobx-react");

var _mobxStateTree = require("mobx-state-tree");

var _styles = require("@material-ui/core/styles");

var _Drawer = _interopRequireDefault(require("./Drawer"));

var useStyles = (0, _core.makeStyles)(function (theme) {
  return {
    drawerActions: {
      float: 'right',
      '&:hover': {
        backgroundColor: (0, _colorManipulator.fade)(theme.palette.secondary.contrastText, theme.palette.action.hoverOpacity),
        '@media (hover: none)': {
          backgroundColor: 'transparent'
        }
      }
    },
    drawerToolbar: {
      paddingLeft: theme.spacing(2)
    },
    spacer: {
      flexGrow: 1
    },
    drawerSelect: {
      color: theme.palette.secondary.contrastText
    },
    drawerLoading: {
      margin: theme.spacing(2)
    },
    dropDownIcon: {
      color: theme.palette.secondary.contrastText
    }
  };
});
var DrawerHeader = (0, _mobxReact.observer)(function (props) {
  var session = props.session,
      setToolbarHeight = props.setToolbarHeight;
  var visibleWidget = session.visibleWidget,
      activeWidgets = session.activeWidgets;
  var classes = useStyles();

  var handleChange = function handleChange(e, option) {
    session.showWidget(option.props.value);
  };

  var theme = (0, _styles.useTheme)();
  return /*#__PURE__*/_react.default.createElement(_core.AppBar, {
    position: "sticky",
    ref: function ref(_ref) {
      return setToolbarHeight((_ref === null || _ref === void 0 ? void 0 : _ref.getBoundingClientRect().height) || 0);
    },
    style: {
      background: theme.palette.secondary.main
    }
  }, /*#__PURE__*/_react.default.createElement(_core.Toolbar, {
    disableGutters: true,
    className: classes.drawerToolbar
  }, /*#__PURE__*/_react.default.createElement(_core.Select, {
    value: visibleWidget || '',
    "data-testid": "widget-drawer-selects",
    className: classes.drawerSelect,
    classes: {
      icon: classes.dropDownIcon
    },
    renderValue: function renderValue(selected) {
      var _getEnv$pluginManager = (0, _mobxStateTree.getEnv)(session).pluginManager.getWidgetType(selected.type),
          HeadingComp = _getEnv$pluginManager.HeadingComponent,
          headingText = _getEnv$pluginManager.heading;

      return /*#__PURE__*/_react.default.createElement(_core.Typography, {
        variant: "h6",
        color: "inherit"
      }, HeadingComp ? /*#__PURE__*/_react.default.createElement(HeadingComp, {
        model: selected
      }) : headingText || undefined);
    },
    onChange: function onChange(e, value) {
      handleChange(e, value);
    }
  }, Array.from(activeWidgets.values()).map(function (widget, index) {
    var _getEnv$pluginManager2 = (0, _mobxStateTree.getEnv)(session).pluginManager.getWidgetType(widget.type),
        HeadingComp = _getEnv$pluginManager2.HeadingComponent,
        headingText = _getEnv$pluginManager2.heading;

    return /*#__PURE__*/_react.default.createElement(_core.MenuItem, {
      "data-testid": "widget-drawer-selects-item-".concat(widget.type),
      key: "".concat(widget.id, "-").concat(index),
      value: widget
    }, /*#__PURE__*/_react.default.createElement(_core.Typography, {
      variant: "h6",
      color: "inherit"
    }, HeadingComp ? /*#__PURE__*/_react.default.createElement(HeadingComp, {
      model: widget
    }) : headingText || undefined), /*#__PURE__*/_react.default.createElement(_core.ListItemSecondaryAction, null, /*#__PURE__*/_react.default.createElement(_core.IconButton, {
      className: classes.drawerCloseButton,
      "data-testid": "".concat(widget.type, "-drawer-delete"),
      color: "inherit",
      "aria-label": "Delete",
      onClick: function onClick() {
        session.hideWidget(widget);
      }
    }, /*#__PURE__*/_react.default.createElement(_Delete.default, null))));
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: classes.spacer
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: classes.drawerCloseButton
  }, /*#__PURE__*/_react.default.createElement(_core.IconButton, {
    className: classes.drawerCloseButton,
    "data-testid": "drawer-minimize",
    color: "inherit",
    onClick: function onClick() {
      session.minimizeWidgetDrawer();
    }
  }, /*#__PURE__*/_react.default.createElement(_Minimize.default, null)), /*#__PURE__*/_react.default.createElement(_core.IconButton, {
    "data-testid": "drawer-close",
    color: "inherit",
    onClick: function onClick() {
      session.hideWidget(visibleWidget);
    }
  }, /*#__PURE__*/_react.default.createElement(_Close.default, null)))));
});
var DrawerWidget = (0, _mobxReact.observer)(function (_ref2) {
  var session = _ref2.session;
  var visibleWidget = session.visibleWidget,
      activeWidgets = session.activeWidgets;

  var _getEnv = (0, _mobxStateTree.getEnv)(session),
      pluginManager = _getEnv.pluginManager;

  var _pluginManager$getWid = pluginManager.getWidgetType(visibleWidget.type),
      ReactComponent = _pluginManager$getWid.ReactComponent; // we track the toolbar height because components that use virtualized height
  // want to be able to fill the contained, minus the toolbar height (the
  // position static/sticky is included in AutoSizer estimates)


  var _useState = (0, _react.useState)(0),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      toolbarHeight = _useState2[0],
      setToolbarHeight = _useState2[1];

  return /*#__PURE__*/_react.default.createElement(_Drawer.default, {
    session: session,
    open: Boolean(activeWidgets.size)
  }, /*#__PURE__*/_react.default.createElement(DrawerHeader, {
    session: session,
    setToolbarHeight: setToolbarHeight
  }), /*#__PURE__*/_react.default.createElement(_react.Suspense, {
    fallback: /*#__PURE__*/_react.default.createElement("div", null, "Loading...")
  }, /*#__PURE__*/_react.default.createElement(ReactComponent, {
    model: visibleWidget,
    session: session,
    toolbarHeight: toolbarHeight
  })));
});
var _default = DrawerWidget;
exports.default = _default;