"use strict";

var _theme = require("./theme");

describe('theme utils', function () {
  it('can create a default theme', function () {
    var theme = (0, _theme.createJBrowseTheme)();
    expect(theme.palette.primary.main).toEqual('#0D233F');
    expect(theme.palette.secondary.main).toEqual('#721E63');
    expect(theme.palette.tertiary.main).toEqual('#135560');
    expect(theme.palette.quaternary.main).toEqual('#FFB11D');
  });
  it('allows overriding primary and secondary colors', function () {
    var theme = (0, _theme.createJBrowseTheme)({
      palette: {
        primary: {
          main: '#888888'
        },
        secondary: {
          main: 'rgb(137,137,137)'
        }
      }
    });
    expect(theme.palette.primary.main).toEqual('#888888');
    expect(theme.palette.secondary.main).toEqual('rgb(137,137,137)');
  });
  it('allows overriding tertiary and quaternary colors', function () {
    var theme = (0, _theme.createJBrowseTheme)({
      palette: {
        tertiary: {
          main: '#888'
        },
        quaternary: {
          main: 'hsl(0,0,54)'
        }
      }
    });
    expect(theme.palette.tertiary.main).toEqual('#888');
    expect(theme.palette.tertiary.light).toBeTruthy();
    expect(theme.palette.quaternary.main).toEqual('hsl(0,0,54)');
    expect(theme.palette.quaternary.dark).toBeTruthy();
  });
  it('allows customizing spacing', function () {
    var defaultTheme = (0, _theme.createJBrowseTheme)();
    expect(defaultTheme.spacing(1)).toBe(4);
    var biggerSpacingTheme = (0, _theme.createJBrowseTheme)({
      spacing: 16
    });
    expect(biggerSpacingTheme.spacing(1)).toBe(16);
  });
  it('allows adding a custom override', function () {
    var _theme$overrides;

    var muiPaperStyle = {
      root: {
        backgroundColor: 'green'
      }
    };
    var theme = (0, _theme.createJBrowseTheme)({
      overrides: {
        MuiPaper: muiPaperStyle
      }
    });
    expect((_theme$overrides = theme.overrides) === null || _theme$overrides === void 0 ? void 0 : _theme$overrides.MuiPaper).toEqual(muiPaperStyle);
    expect(Object.keys(theme.overrides || {}).length).toBe(9);
  });
  it('allows modifying a default override', function () {
    var _theme$overrides2;

    var muiButtonStyle = {
      textSecondary: {
        color: 'orange'
      }
    };
    var theme = (0, _theme.createJBrowseTheme)({
      overrides: {
        MuiButton: muiButtonStyle
      }
    });
    expect((_theme$overrides2 = theme.overrides) === null || _theme$overrides2 === void 0 ? void 0 : _theme$overrides2.MuiButton).toEqual(muiButtonStyle);
    expect(Object.keys(theme.overrides || {}).length).toBe(8);
  });
  it('allows adding a custom prop', function () {
    var _theme$props;

    var muiPaperProps = {
      variant: 'outlined'
    };
    var theme = (0, _theme.createJBrowseTheme)({
      props: {
        MuiPaper: muiPaperProps
      }
    });
    expect((_theme$props = theme.props) === null || _theme$props === void 0 ? void 0 : _theme$props.MuiPaper).toEqual(muiPaperProps);
    expect(Object.keys(theme.props || {}).length).toBe(18);
  });
  it('allows modifying a prop override', function () {
    var _theme$props2;

    var muiButtonProps = {
      size: 'medium'
    };
    var theme = (0, _theme.createJBrowseTheme)({
      props: {
        MuiButton: muiButtonProps
      }
    });
    expect((_theme$props2 = theme.props) === null || _theme$props2 === void 0 ? void 0 : _theme$props2.MuiButton).toEqual(muiButtonProps);
    expect(Object.keys(theme.props || {}).length).toBe(17);
  });
});