import RendererType from '@jbrowse/core/pluggableElementTypes/renderers/RendererType';
import { AnyReactComponentType } from '@jbrowse/core/util';
import { Feature } from '@jbrowse/core/util/simpleFeature';
import React from 'react';
export declare const BaseChordDisplayModel: import("mobx-state-tree").IModelType<{
    id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    type: import("mobx-state-tree").ISimpleType<string>;
    rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
} & {
    bezierRadiusRatio: import("mobx-state-tree").IType<number | undefined, number, number>;
    assemblyName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
}, {
    rendererTypeName: string;
    error: Error | undefined;
} & {
    readonly RenderingComponent: React.FC<{
        model: import("mobx-state-tree").ModelInstanceTypeProps<{
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").ISimpleType<string>;
            rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        }> & {
            rendererTypeName: string;
            error: Error | undefined;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").ISimpleType<string>;
            rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        }, {
            rendererTypeName: string;
            error: Error | undefined;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        onHorizontalScroll?: Function | undefined;
        blockState?: Record<string, any> | undefined;
    }>;
    readonly DisplayBlurb: React.FC<{
        model: import("mobx-state-tree").ModelInstanceTypeProps<{
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").ISimpleType<string>;
            rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        }> & {
            rendererTypeName: string;
            error: Error | undefined;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").ISimpleType<string>;
            rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        }, {
            rendererTypeName: string;
            error: Error | undefined;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    }> | null;
    readonly adapterConfig: any;
    readonly parentTrack: any;
    readonly renderProps: any;
    readonly rendererType: any;
    readonly DisplayMessageComponent: React.FC<any> | undefined;
    readonly trackMenuItems: import("@jbrowse/core/ui").MenuItem[];
    readonly viewMenuActions: import("@jbrowse/core/ui").MenuItem[];
    regionCannotBeRendered(): undefined;
} & {
    setError(error?: Error | undefined): void;
    setRpcDriverName(rpcDriverName: string): void;
    reload(): void;
} & {
    filled: boolean;
    reactElement: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, any> | null) | (new (props: any) => React.Component<any, any, any>)> | undefined;
    data: undefined;
    message: string;
    error: Error | undefined;
    renderingComponent: React.ComponentClass<any, any> | React.FunctionComponent<any> | undefined;
    refNameMap: Record<string, string> | undefined;
} & {
    onChordClick(feature: Feature): void;
} & {
    readonly blockDefinitions: any;
    readonly renderProps: any;
    /**
     * the pluggable element type object for this diplay's
     * renderer
     */
    readonly rendererType: any;
    isCompatibleWithRenderer(renderer: RendererType): boolean;
    /**
     * returns a string feature ID if the globally-selected object
     * is probably a feature
     */
    readonly selectedFeatureId: string | undefined;
} & {
    renderStarted(): void;
    renderSuccess({ message, data, reactElement, renderingComponent, }: {
        message: string;
        data: any;
        reactElement: React.ReactElement;
        renderingComponent: AnyReactComponentType;
    }): void;
    renderError(error: Error): void;
    setRefNameMap(refNameMap: Record<string, string>): void;
    setError(error: Error): void;
} & {
    afterAttach(): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
