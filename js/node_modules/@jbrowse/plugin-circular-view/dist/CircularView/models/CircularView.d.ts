import { AnyConfigurationModel } from '@jbrowse/core/configuration/configurationSchema';
import PluginManager from '@jbrowse/core/PluginManager';
import { SnapshotOrInstance, Instance } from 'mobx-state-tree';
import { Region } from '@jbrowse/core/util/types/mst';
export default function CircularView(pluginManager: PluginManager): import("mobx-state-tree").IModelType<{
    id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    displayName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
} & {
    type: import("mobx-state-tree").ISimpleType<"CircularView">;
    offsetRadians: import("mobx-state-tree").IType<number | undefined, number, number>;
    bpPerPx: import("mobx-state-tree").IType<number | undefined, number, number>;
    tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
    hideVerticalResizeHandle: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    hideTrackSelectorButton: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    lockedFitToWindow: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    disableImportForm: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    height: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
    minimumRadiusPx: import("mobx-state-tree").IType<number | undefined, number, number>;
    spacingPx: import("mobx-state-tree").IType<number | undefined, number, number>;
    paddingPx: import("mobx-state-tree").IType<number | undefined, number, number>;
    lockedPaddingPx: import("mobx-state-tree").IType<number | undefined, number, number>;
    minVisibleWidth: import("mobx-state-tree").IType<number | undefined, number, number>;
    minimumBlockWidth: import("mobx-state-tree").IType<number | undefined, number, number>;
    displayedRegions: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
        refName: import("mobx-state-tree").ISimpleType<string>;
        start: import("mobx-state-tree").ISimpleType<number>;
        end: import("mobx-state-tree").ISimpleType<number>;
        reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
    } & {
        assemblyName: import("mobx-state-tree").ISimpleType<string>;
    }, {
        setRefName(newRefName: string): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    scrollX: import("mobx-state-tree").IType<number | undefined, number, number>;
    scrollY: import("mobx-state-tree").IType<number | undefined, number, number>;
    trackSelectorType: import("mobx-state-tree").IType<string | undefined, string, string>;
}, {
    width: number;
} & {
    readonly menuItems: import("@jbrowse/core/ui").MenuItem[];
} & {
    setDisplayName(name: string): void;
    setWidth(newWidth: number): void;
} & {
    width: number;
} & {
    readonly staticSlices: import("./slices").Slice[];
    readonly visibleStaticSlices: import("./slices").Slice[];
    readonly visibleSection: {
        rho: number[];
        theta: number[];
    };
    readonly circumferencePx: number;
    readonly radiusPx: number;
    readonly bpPerRadian: number;
    readonly pxPerRadian: number;
    readonly centerXY: [number, number];
    readonly totalBp: number;
    readonly maximumRadiusPx: number;
    readonly maxBpPerPx: number;
    readonly minBpPerPx: number;
    readonly atMaxBpPerPx: boolean;
    readonly atMinBpPerPx: boolean;
    readonly tooSmallToLock: boolean;
    readonly figureDimensions: number[];
    readonly figureWidth: number;
    readonly figureHeight: number;
    readonly elidedRegions: any[];
    readonly assemblyNames: string[];
} & {
    error: Error | undefined;
} & {
    setWidth(newWidth: number): number;
    setHeight(newHeight: number): number;
    resizeHeight(distance: number): number;
    resizeWidth(distance: number): number;
    rotateClockwiseButton(): void;
    rotateCounterClockwiseButton(): void;
    rotateClockwise(distance?: number): void;
    rotateCounterClockwise(distance?: number): void;
    zoomInButton(): void;
    zoomOutButton(): void;
    setBpPerPx(newVal: number): void;
    setModelViewWhenAdjust(secondCondition: boolean): void;
    closeView(): void;
    setDisplayedRegions(regions: SnapshotOrInstance<typeof Region>[]): void;
    activateTrackSelector(): void;
    toggleTrack(trackId: string): void;
    setError(error: Error): void;
    showTrack(trackId: string, initialSnapshot?: {}): void;
    addTrackConf(configuration: AnyConfigurationModel, initialSnapshot?: {}): void;
    hideTrack(trackId: string): number;
    toggleFitToWindowLock(): boolean;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export declare type CircularViewStateModel = ReturnType<typeof CircularView>;
export declare type CircularViewModel = Instance<CircularViewStateModel>;
