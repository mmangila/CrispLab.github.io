import React from 'react';
declare const _default: React.ForwardRefExoticComponent<{
    model: import("mobx-state-tree").ModelInstanceTypeProps<{
        id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        displayName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
    } & {
        id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        type: import("mobx-state-tree").ISimpleType<"LinearGenomeView">;
        offsetPx: import("mobx-state-tree").IType<number | undefined, number, number>;
        bpPerPx: import("mobx-state-tree").IType<number | undefined, number, number>;
        displayedRegions: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
            refName: import("mobx-state-tree").ISimpleType<string>;
            start: import("mobx-state-tree").ISimpleType<number>;
            end: import("mobx-state-tree").ISimpleType<number>;
            reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        } & {
            assemblyName: import("mobx-state-tree").ISimpleType<string>;
        }, {
            setRefName(newRefName: string): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
        hideHeader: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        hideHeaderOverview: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        trackSelectorType: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<"hierarchical">, [undefined]>;
        trackLabels: import("mobx-state-tree").IType<string | undefined, string, string>;
        showCenterLine: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    }> & {
        width: number;
    } & {
        readonly menuItems: import("@jbrowse/core/ui").MenuItem[];
    } & {
        setDisplayName(name: string): void;
        setWidth(newWidth: number): void;
    } & {
        volatileWidth: number | undefined;
        minimumBlockWidth: number;
        draggingTrackId: string | undefined;
        error: Error | undefined;
        afterDisplayedRegionsSetCallbacks: Function[];
        scaleFactor: number;
        trackRefs: {
            [key: string]: any;
        };
        coarseDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
        coarseTotalBp: number;
        leftOffset: import("..").BpOffset | undefined;
        rightOffset: import("..").BpOffset | undefined;
        searchResults: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined;
        searchQuery: string | undefined;
    } & {
        readonly width: number;
    } & {
        readonly initialized: boolean;
        readonly hasDisplayedRegions: boolean;
        readonly isSeqDialogDisplayed: import("..").BpOffset | undefined;
        readonly isSearchDialogDisplayed: boolean;
        readonly scaleBarHeight: number;
        readonly headerHeight: number;
        readonly trackHeights: any;
        readonly trackHeightsWithResizeHandles: any;
        readonly height: any;
        readonly interRegionPaddingWidth: number;
        readonly totalBp: number;
        readonly maxBpPerPx: number;
        readonly minBpPerPx: number;
        readonly maxOffset: number;
        readonly minOffset: number;
        readonly displayedRegionsTotalPx: number;
        readonly renderProps: any;
        readonly assemblyNames: string[];
        searchScope(assemblyName: string): {
            assemblyName: string;
            includeAggregateIndexes: boolean;
            tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
        };
        bpToPx({ refName, coord, regionNumber, }: {
            refName: string;
            coord: number;
            regionNumber?: number | undefined;
        }): {
            index: number;
            offsetPx: number;
        } | undefined;
        pxToBp(px: number): {
            oob: boolean;
            coord: number;
            offset: number;
            index: number;
            refName: string;
            start: number;
            end: number;
            reversed: boolean;
            assemblyName: string;
        };
        getTrack(id: string): any;
        rankSearchResults(results: import("@jbrowse/core/TextSearch/BaseResults").default[]): import("@jbrowse/core/TextSearch/BaseResults").default[];
        rewriteOnClicks(trackType: string, viewMenuActions: import("@jbrowse/core/ui").MenuItem[]): void;
        readonly trackTypeActions: Map<string, import("@jbrowse/core/ui").MenuItem[]>;
        readonly centerLineInfo: {
            oob: boolean;
            coord: number;
            offset: number;
            index: number;
            refName: string;
            start: number;
            end: number;
            reversed: boolean;
            assemblyName: string;
        } | undefined;
    } & {
        setWidth(newWidth: number): void;
        setError(error: Error | undefined): void;
        toggleHeader(): void;
        toggleHeaderOverview(): void;
        scrollTo(offsetPx: number): number;
        zoomTo(bpPerPx: number): number;
        setOffsets(left: import("..").BpOffset | undefined, right: import("..").BpOffset | undefined): void;
        setSearchResults(results: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined, query: string | undefined): void;
        setNewView(bpPerPx: number, offsetPx: number): void;
        horizontallyFlip(): void;
        showTrack(trackId: string, initialSnapshot?: {}, displayInitialSnapshot?: {}): any;
        hideTrack(trackId: string): number;
    } & {
        moveTrack(movingTrackId: string, targetTrackId: string): void;
        closeView(): void;
        toggleTrack(trackId: string): void;
        setTrackLabels(setting: "overlapping" | "hidden" | "offset"): void;
        toggleCenterLine(): void;
        setDisplayedRegions(regions: import("@jbrowse/core/util").Region[]): void;
        activateTrackSelector(): void;
        navToLocString(locString: string, optAssemblyName?: string | undefined): void;
        navTo(query: import("..").NavLocation): void;
        navToMultiple(locations: import("..").NavLocation[]): void;
        zoomToDisplayedRegions(leftPx: import("..").BpOffset, rightPx: import("..").BpOffset): void;
        getSelectedRegions(leftOffset: import("..").BpOffset | undefined, rightOffset: import("..").BpOffset | undefined): {
            start: number;
            end: number;
            refName: string;
            assemblyName: string;
            key: string;
            offsetPx: number;
        }[];
        afterDisplayedRegionsSet(cb: Function): void;
        moveTo(start: import("..").BpOffset, end: import("..").BpOffset): void;
        horizontalScroll(distance: number): number;
        centerAt(bp: number, refName: string, regionIndex: number): void;
        center(): void;
        showAllRegions(): void;
        showAllRegionsInAssembly(assemblyName?: string | undefined): void;
        setDraggingTrackId(idx?: string | undefined): void;
        setScaleFactor(factor: number): void;
    } & {
        slide: (viewWidths: number) => void;
    } & {
        zoom: (targetBpPerPx: number) => void;
    } & {
        readonly menuItems: import("@jbrowse/core/ui").MenuItem[];
        readonly staticBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
        readonly dynamicBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
        readonly roundedDynamicBlocks: {
            start: number;
            end: number;
            refName: string;
            assemblyName: string;
            key: string;
            offsetPx: number;
        }[];
        readonly visibleLocStrings: string;
        readonly coarseVisibleLocStrings: string;
    } & {
        clearView(): void;
        setCoarseDynamicBlocks(blocks: import("@jbrowse/core/util/blockTypes").BlockSet): void;
        afterAttach(): void;
    } & {
        exportSvg(opts?: import("..").ExportSvgOptions): Promise<void>;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        displayName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
    } & {
        id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        type: import("mobx-state-tree").ISimpleType<"LinearGenomeView">;
        offsetPx: import("mobx-state-tree").IType<number | undefined, number, number>;
        bpPerPx: import("mobx-state-tree").IType<number | undefined, number, number>;
        displayedRegions: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
            refName: import("mobx-state-tree").ISimpleType<string>;
            start: import("mobx-state-tree").ISimpleType<number>;
            end: import("mobx-state-tree").ISimpleType<number>;
            reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        } & {
            assemblyName: import("mobx-state-tree").ISimpleType<string>;
        }, {
            setRefName(newRefName: string): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
        hideHeader: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        hideHeaderOverview: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        trackSelectorType: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<"hierarchical">, [undefined]>;
        trackLabels: import("mobx-state-tree").IType<string | undefined, string, string>;
        showCenterLine: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    }, {
        width: number;
    } & {
        readonly menuItems: import("@jbrowse/core/ui").MenuItem[];
    } & {
        setDisplayName(name: string): void;
        setWidth(newWidth: number): void;
    } & {
        volatileWidth: number | undefined;
        minimumBlockWidth: number;
        draggingTrackId: string | undefined;
        error: Error | undefined;
        afterDisplayedRegionsSetCallbacks: Function[];
        scaleFactor: number;
        trackRefs: {
            [key: string]: any;
        };
        coarseDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
        coarseTotalBp: number;
        leftOffset: import("..").BpOffset | undefined;
        rightOffset: import("..").BpOffset | undefined;
        searchResults: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined;
        searchQuery: string | undefined;
    } & {
        readonly width: number;
    } & {
        readonly initialized: boolean;
        readonly hasDisplayedRegions: boolean;
        readonly isSeqDialogDisplayed: import("..").BpOffset | undefined;
        readonly isSearchDialogDisplayed: boolean;
        readonly scaleBarHeight: number;
        readonly headerHeight: number;
        readonly trackHeights: any;
        readonly trackHeightsWithResizeHandles: any;
        readonly height: any;
        readonly interRegionPaddingWidth: number;
        readonly totalBp: number;
        readonly maxBpPerPx: number;
        readonly minBpPerPx: number;
        readonly maxOffset: number;
        readonly minOffset: number;
        readonly displayedRegionsTotalPx: number;
        readonly renderProps: any;
        readonly assemblyNames: string[];
        searchScope(assemblyName: string): {
            assemblyName: string;
            includeAggregateIndexes: boolean;
            tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
        };
        bpToPx({ refName, coord, regionNumber, }: {
            refName: string;
            coord: number;
            regionNumber?: number | undefined;
        }): {
            index: number;
            offsetPx: number;
        } | undefined;
        pxToBp(px: number): {
            oob: boolean;
            coord: number;
            offset: number;
            index: number;
            refName: string;
            start: number;
            end: number;
            reversed: boolean;
            assemblyName: string;
        };
        getTrack(id: string): any;
        rankSearchResults(results: import("@jbrowse/core/TextSearch/BaseResults").default[]): import("@jbrowse/core/TextSearch/BaseResults").default[];
        rewriteOnClicks(trackType: string, viewMenuActions: import("@jbrowse/core/ui").MenuItem[]): void;
        readonly trackTypeActions: Map<string, import("@jbrowse/core/ui").MenuItem[]>;
        readonly centerLineInfo: {
            oob: boolean;
            coord: number;
            offset: number;
            index: number;
            refName: string;
            start: number;
            end: number;
            reversed: boolean;
            assemblyName: string;
        } | undefined;
    } & {
        setWidth(newWidth: number): void;
        setError(error: Error | undefined): void;
        toggleHeader(): void;
        toggleHeaderOverview(): void;
        scrollTo(offsetPx: number): number;
        zoomTo(bpPerPx: number): number;
        setOffsets(left: import("..").BpOffset | undefined, right: import("..").BpOffset | undefined): void;
        setSearchResults(results: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined, query: string | undefined): void;
        setNewView(bpPerPx: number, offsetPx: number): void;
        horizontallyFlip(): void;
        showTrack(trackId: string, initialSnapshot?: {}, displayInitialSnapshot?: {}): any;
        hideTrack(trackId: string): number;
    } & {
        moveTrack(movingTrackId: string, targetTrackId: string): void;
        closeView(): void;
        toggleTrack(trackId: string): void;
        setTrackLabels(setting: "overlapping" | "hidden" | "offset"): void;
        toggleCenterLine(): void;
        setDisplayedRegions(regions: import("@jbrowse/core/util").Region[]): void;
        activateTrackSelector(): void;
        navToLocString(locString: string, optAssemblyName?: string | undefined): void;
        navTo(query: import("..").NavLocation): void;
        navToMultiple(locations: import("..").NavLocation[]): void;
        zoomToDisplayedRegions(leftPx: import("..").BpOffset, rightPx: import("..").BpOffset): void;
        getSelectedRegions(leftOffset: import("..").BpOffset | undefined, rightOffset: import("..").BpOffset | undefined): {
            start: number;
            end: number;
            refName: string;
            assemblyName: string;
            key: string;
            offsetPx: number;
        }[];
        afterDisplayedRegionsSet(cb: Function): void;
        moveTo(start: import("..").BpOffset, end: import("..").BpOffset): void;
        horizontalScroll(distance: number): number;
        centerAt(bp: number, refName: string, regionIndex: number): void;
        center(): void;
        showAllRegions(): void;
        showAllRegionsInAssembly(assemblyName?: string | undefined): void;
        setDraggingTrackId(idx?: string | undefined): void;
        setScaleFactor(factor: number): void;
    } & {
        slide: (viewWidths: number) => void;
    } & {
        zoom: (targetBpPerPx: number) => void;
    } & {
        readonly menuItems: import("@jbrowse/core/ui").MenuItem[];
        readonly staticBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
        readonly dynamicBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
        readonly roundedDynamicBlocks: {
            start: number;
            end: number;
            refName: string;
            assemblyName: string;
            key: string;
            offsetPx: number;
        }[];
        readonly visibleLocStrings: string;
        readonly coarseVisibleLocStrings: string;
    } & {
        clearView(): void;
        setCoarseDynamicBlocks(blocks: import("@jbrowse/core/util/blockTypes").BlockSet): void;
        afterAttach(): void;
    } & {
        exportSvg(opts?: import("..").ExportSvgOptions): Promise<void>;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    style?: React.CSSProperties | undefined;
    className?: string | undefined;
} & React.RefAttributes<unknown>>;
export default _default;
