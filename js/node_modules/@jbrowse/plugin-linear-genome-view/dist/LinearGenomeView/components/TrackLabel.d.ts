import React from 'react';
declare const _default: React.ForwardRefExoticComponent<{
    track: import("mobx-state-tree").ModelInstanceTypeProps<{
        id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        type: import("mobx-state-tree").ISimpleType<string>;
        configuration: import("mobx-state-tree").ITypeUnion<any, any, any>;
        displays: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
    }> & {
        readonly rpcSessionId: any;
        readonly name: any;
        readonly textSearchAdapter: any;
        readonly adapterType: any;
        readonly viewMenuActions: import("@jbrowse/core/ui").MenuItem[];
        readonly canConfigure: any;
        readonly composedTrackMenuItems: import("@jbrowse/core/ui").MenuItem[];
    } & {
        activateConfigurationUI(): void;
        showDisplay(displayId: string, initialSnapshot?: {}): void;
        hideDisplay(displayId: string): number;
        replaceDisplay(oldDisplayId: string, newDisplayId: string, initialSnapshot?: {}): void;
    } & {
        readonly trackMenuItems: import("@jbrowse/core/ui").MenuItem[];
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        type: import("mobx-state-tree").ISimpleType<string>;
        configuration: import("mobx-state-tree").ITypeUnion<any, any, any>;
        displays: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
    }, {
        readonly rpcSessionId: any;
        readonly name: any;
        readonly textSearchAdapter: any;
        readonly adapterType: any;
        readonly viewMenuActions: import("@jbrowse/core/ui").MenuItem[];
        readonly canConfigure: any;
        readonly composedTrackMenuItems: import("@jbrowse/core/ui").MenuItem[];
    } & {
        activateConfigurationUI(): void;
        showDisplay(displayId: string, initialSnapshot?: {}): void;
        hideDisplay(displayId: string): number;
        replaceDisplay(oldDisplayId: string, newDisplayId: string, initialSnapshot?: {}): void;
    } & {
        readonly trackMenuItems: import("@jbrowse/core/ui").MenuItem[];
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    className?: string | undefined;
} & React.RefAttributes<unknown>>;
export default _default;
