import { MenuItem } from '@jbrowse/core/ui';
import { BaseBlock } from '@jbrowse/core/util/blockTypes';
import { Region } from '@jbrowse/core/util/types';
import CompositeMap from '@jbrowse/core/util/compositeMap';
import { Feature } from '@jbrowse/core/util/simpleFeature';
import { Instance } from 'mobx-state-tree';
import React from 'react';
import { ExportSvgOptions } from '../../LinearGenomeView';
export interface Layout {
    minX: number;
    minY: number;
    maxX: number;
    maxY: number;
    name: string;
}
declare type LayoutRecord = [number, number, number, number];
export declare const BaseLinearDisplay: import("mobx-state-tree").IModelType<{
    id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    type: import("mobx-state-tree").ISimpleType<string>;
    rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
} & {
    height: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
    blockState: import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
        key: import("mobx-state-tree").ISimpleType<string>;
        region: import("mobx-state-tree").IModelType<{
            refName: import("mobx-state-tree").ISimpleType<string>;
            start: import("mobx-state-tree").ISimpleType<number>;
            end: import("mobx-state-tree").ISimpleType<number>;
            reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        } & {
            assemblyName: import("mobx-state-tree").ISimpleType<string>;
        }, {
            setRefName(newRefName: string): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
        isLeftEndOfDisplayedRegion: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isRightEndOfDisplayedRegion: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    }, {
        renderInProgress: AbortController | undefined;
        filled: boolean;
        reactElement: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, any> | null) | (new (props: any) => React.Component<any, any, any>)> | undefined;
        features: Map<string, Feature> | undefined;
        layout: any;
        status: string;
        error: Error | undefined;
        message: string | undefined;
        maxHeightReached: boolean;
        ReactComponent: ({ model, }: {
            model: any;
        }) => any;
        renderProps: any;
    } & {
        afterAttach(): void;
        setStatus(message: string): void;
        setLoading(abortController: AbortController): void;
        setMessage(messageText: string): void;
        setRendered(props: {
            reactElement: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, any> | null) | (new (props: any) => React.Component<any, any, any>)>;
            features: Map<string, Feature>;
            layout: any;
            maxHeightReached: boolean;
            renderProps: any;
        } | undefined): void;
        setError(error: Error): void;
        reload(): void;
        beforeDestroy(): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    userBpPerPxLimit: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<number>>;
}, {
    rendererTypeName: string;
    error: Error | undefined;
} & {
    readonly RenderingComponent: React.FC<{
        model: import("mobx-state-tree").ModelInstanceTypeProps<{
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").ISimpleType<string>;
            rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        }> & {
            rendererTypeName: string;
            error: Error | undefined;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").ISimpleType<string>;
            rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        }, {
            rendererTypeName: string;
            error: Error | undefined;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        onHorizontalScroll?: Function | undefined;
        blockState?: Record<string, any> | undefined;
    }>;
    readonly DisplayBlurb: React.FC<{
        model: import("mobx-state-tree").ModelInstanceTypeProps<{
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").ISimpleType<string>;
            rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        }> & {
            rendererTypeName: string;
            error: Error | undefined;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").ISimpleType<string>;
            rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        }, {
            rendererTypeName: string;
            error: Error | undefined;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    }> | null;
    readonly adapterConfig: any;
    readonly parentTrack: any;
    readonly renderProps: any;
    readonly rendererType: any;
    readonly DisplayMessageComponent: React.FC<any> | undefined;
    readonly trackMenuItems: MenuItem[];
    readonly viewMenuActions: MenuItem[];
    regionCannotBeRendered(): undefined;
} & {
    setError(error?: Error | undefined): void;
    setRpcDriverName(rpcDriverName: string): void;
    reload(): void;
} & {
    message: string;
    featureIdUnderMouse: string | undefined;
    contextMenuFeature: Feature | undefined;
    additionalContextMenuItemCallbacks: Function[];
    scrollTop: number;
} & {
    readonly blockType: "staticBlocks" | "dynamicBlocks";
    readonly blockDefinitions: import("@jbrowse/core/util/blockTypes").BlockSet;
} & {
    /**
     * set limit to config amount, or user amount if they force load,
     */
    readonly maxViewBpPerPx: any;
    /**
     * how many milliseconds to wait for the display to
     * "settle" before re-rendering a block
     */
    readonly renderDelay: number;
    readonly TooltipComponent: React.FC<any>;
    /**
     * returns a string feature ID if the globally-selected object
     * is probably a feature
     */
    readonly selectedFeatureId: string | undefined;
    /**
     * if a display-level message should be displayed instead of the blocks,
     * make this return a react component
     */
    readonly DisplayMessageComponent: React.FC<any> | undefined;
} & {
    /**
     * a CompositeMap of `featureId -> feature obj` that
     * just looks in all the block data for that feature
     */
    readonly features: CompositeMap<string, Feature>;
    readonly featureUnderMouse: Feature | undefined;
    /**
     * returns per-base block layouts as the data structure
     * `Map<blockKey, Map<featureId, LayoutRecord>>`
     *
     * this per-block is needed to avoid cross-contamination of
     * layouts across blocks especially when building the rtree
     */
    readonly blockLayoutFeatures: Map<string, Map<string, LayoutRecord>>;
    getFeatureOverlapping(blockKey: string, x: number, y: number): any;
    getFeatureByID(id: string): undefined;
} & {
    afterAttach(): void;
    setHeight(displayHeight: number): number;
    resizeHeight(distance: number): number;
    setScrollTop(scrollTop: number): void;
    setUserBpPerPxLimit(limit: number): void;
    setMessage(message: string): void;
    addBlock(key: string, block: BaseBlock): void;
    deleteBlock(key: string): void;
    selectFeature(feature: Feature): void;
    clearFeatureSelection(): void;
    setFeatureIdUnderMouse(feature: string | undefined): void;
    reload(): void;
    addAdditionalContextMenuItemCallback(callback: Function): void;
    setContextMenuFeature(feature?: Feature | undefined): void;
} & {
    regionCannotBeRenderedText(_region: Region): "" | "Zoom in to see features";
    /**
     * @param region -
     * @returns falsy if the region is fine to try rendering. Otherwise,
     *  return a react node + string of text.
     *  string of text describes why it cannot be rendered
     *  react node allows user to force load at current setting
     */
    regionCannotBeRendered(_region: Region): JSX.Element | undefined;
    readonly trackMenuItems: MenuItem[];
    readonly composedTrackMenuItems: MenuItem[];
    readonly contextMenuItems: {
        label: string;
        icon: import("@material-ui/core/OverridableComponent").OverridableComponent<import("@material-ui/core").SvgIconTypeMap<{}, "svg">>;
        onClick: () => void;
    }[];
    readonly composedRenderProps: any;
    readonly renderProps: any;
} & {
    renderSvg(opts: ExportSvgOptions & {
        overrideHeight: number;
    }): Promise<JSX.Element>;
}, import("mobx-state-tree")._NotCustomized, {
    id: string;
    type: string;
    rpcDriverName: string | undefined;
    height: number;
    userBpPerPxLimit: number | undefined;
}>;
export declare type BaseLinearDisplayStateModel = typeof BaseLinearDisplay;
export declare type BaseLinearDisplayModel = Instance<BaseLinearDisplayStateModel>;
export {};
