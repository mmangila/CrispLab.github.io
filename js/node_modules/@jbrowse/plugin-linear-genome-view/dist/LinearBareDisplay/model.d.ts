/// <reference types="react" />
import { AnyConfigurationSchemaType } from '@jbrowse/core/configuration/configurationSchema';
export declare function stateModelFactory(configSchema: AnyConfigurationSchemaType): import("mobx-state-tree").IModelType<{
    id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    type: import("mobx-state-tree").ISimpleType<string>;
    rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
} & {
    height: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
    blockState: import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
        key: import("mobx-state-tree").ISimpleType<string>;
        region: import("mobx-state-tree").IModelType<{
            refName: import("mobx-state-tree").ISimpleType<string>;
            start: import("mobx-state-tree").ISimpleType<number>;
            end: import("mobx-state-tree").ISimpleType<number>;
            reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        } & {
            assemblyName: import("mobx-state-tree").ISimpleType<string>;
        }, {
            setRefName(newRefName: string): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
        isLeftEndOfDisplayedRegion: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isRightEndOfDisplayedRegion: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    }, {
        renderInProgress: AbortController | undefined;
        filled: boolean;
        reactElement: import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any> | null) | (new (props: any) => import("react").Component<any, any, any>)> | undefined;
        features: Map<string, import("@jbrowse/core/util/simpleFeature").Feature> | undefined;
        layout: any;
        status: string;
        error: Error | undefined;
        message: string | undefined;
        maxHeightReached: boolean;
        ReactComponent: ({ model, }: {
            model: any;
        }) => any;
        renderProps: any;
    } & {
        afterAttach(): void;
        setStatus(message: string): void;
        setLoading(abortController: AbortController): void;
        setMessage(messageText: string): void;
        setRendered(props: {
            reactElement: import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any> | null) | (new (props: any) => import("react").Component<any, any, any>)>;
            features: Map<string, import("@jbrowse/core/util/simpleFeature").Feature>;
            layout: any;
            maxHeightReached: boolean;
            renderProps: any;
        } | undefined): void;
        setError(error: Error): void;
        reload(): void;
        beforeDestroy(): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    userBpPerPxLimit: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<number>>;
} & {
    type: import("mobx-state-tree").ISimpleType<"LinearBareDisplay">;
    configuration: import("mobx-state-tree").ITypeUnion<any, any, any>;
}, {
    rendererTypeName: string;
    error: Error | undefined;
} & {
    readonly RenderingComponent: import("react").FC<{
        model: import("mobx-state-tree").ModelInstanceTypeProps<{
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").ISimpleType<string>;
            rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        }> & {
            rendererTypeName: string;
            error: Error | undefined;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").ISimpleType<string>;
            rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        }, {
            rendererTypeName: string;
            error: Error | undefined;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        onHorizontalScroll?: Function | undefined;
        blockState?: Record<string, any> | undefined;
    }>;
    readonly DisplayBlurb: import("react").FC<{
        model: import("mobx-state-tree").ModelInstanceTypeProps<{
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").ISimpleType<string>;
            rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        }> & {
            rendererTypeName: string;
            error: Error | undefined;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").ISimpleType<string>;
            rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        }, {
            rendererTypeName: string;
            error: Error | undefined;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    }> | null;
    readonly adapterConfig: any;
    readonly parentTrack: any;
    readonly renderProps: any;
    readonly rendererType: any;
    readonly DisplayMessageComponent: import("react").FC<any> | undefined;
    readonly trackMenuItems: import("@jbrowse/core/ui").MenuItem[];
    readonly viewMenuActions: import("@jbrowse/core/ui").MenuItem[];
    regionCannotBeRendered(): undefined;
} & {
    setError(error?: Error | undefined): void;
    setRpcDriverName(rpcDriverName: string): void;
    reload(): void;
} & {
    message: string;
    featureIdUnderMouse: string | undefined;
    contextMenuFeature: import("@jbrowse/core/util/simpleFeature").Feature | undefined;
    additionalContextMenuItemCallbacks: Function[];
    scrollTop: number;
} & {
    readonly blockType: "staticBlocks" | "dynamicBlocks";
    readonly blockDefinitions: import("@jbrowse/core/util/blockTypes").BlockSet;
} & {
    readonly maxViewBpPerPx: any;
    readonly renderDelay: number;
    readonly TooltipComponent: import("react").FC<any>;
    readonly selectedFeatureId: string | undefined;
    readonly DisplayMessageComponent: import("react").FC<any> | undefined;
} & {
    readonly features: import("@jbrowse/core/util/compositeMap").default<string, import("@jbrowse/core/util/simpleFeature").Feature>;
    readonly featureUnderMouse: import("@jbrowse/core/util/simpleFeature").Feature | undefined;
    readonly blockLayoutFeatures: Map<string, Map<string, [number, number, number, number]>>;
    getFeatureOverlapping(blockKey: string, x: number, y: number): any;
    getFeatureByID(id: string): undefined;
} & {
    afterAttach(): void;
    setHeight(displayHeight: number): number;
    resizeHeight(distance: number): number;
    setScrollTop(scrollTop: number): void;
    setUserBpPerPxLimit(limit: number): void;
    setMessage(message: string): void;
    addBlock(key: string, block: import("@jbrowse/core/util/blockTypes").BaseBlock): void;
    deleteBlock(key: string): void;
    selectFeature(feature: import("@jbrowse/core/util/simpleFeature").Feature): void;
    clearFeatureSelection(): void;
    setFeatureIdUnderMouse(feature: string | undefined): void;
    reload(): void;
    addAdditionalContextMenuItemCallback(callback: Function): void;
    setContextMenuFeature(feature?: import("@jbrowse/core/util/simpleFeature").Feature | undefined): void;
} & {
    regionCannotBeRenderedText(_region: import("@jbrowse/core/util").Region): "" | "Zoom in to see features";
    regionCannotBeRendered(_region: import("@jbrowse/core/util").Region): JSX.Element | undefined;
    readonly trackMenuItems: import("@jbrowse/core/ui").MenuItem[];
    readonly composedTrackMenuItems: import("@jbrowse/core/ui").MenuItem[];
    readonly contextMenuItems: {
        label: string;
        icon: import("@material-ui/core/OverridableComponent").OverridableComponent<import("@material-ui/core").SvgIconTypeMap<{}, "svg">>;
        onClick: () => void;
    }[];
    readonly composedRenderProps: any;
    readonly renderProps: any;
} & {
    renderSvg(opts: import("../LinearGenomeView").ExportSvgOptions & {
        overrideHeight: number;
    }): Promise<JSX.Element>;
} & {
    readonly renderProps: any;
    readonly rendererTypeName: any;
}, import("mobx-state-tree")._NotCustomized, {
    id: string;
    type: string;
    rpcDriverName: string | undefined;
    height: number;
    userBpPerPxLimit: number | undefined;
} & import("mobx-state-tree")._NotCustomized>;
