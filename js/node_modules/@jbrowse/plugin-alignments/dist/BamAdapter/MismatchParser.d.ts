/// <reference types="node" />
export interface Mismatch {
    qual?: number;
    start: number;
    length: number;
    type: string;
    base: string;
    altbase?: string;
    seq?: string;
    cliplen?: number;
}
export declare function parseCigar(cigar: string): string[];
export declare function cigarToMismatches(ops: string[], seq: string, qual?: Buffer): Mismatch[];
/**
 * parse a SAM MD tag to find mismatching bases of the template versus the reference
 * @returns array of mismatches and their positions
 */
export declare function mdToMismatches(mdstring: string, cigarOps: string[], cigarMismatches: Mismatch[], seq: string, qual?: Buffer): Mismatch[];
export declare function getTemplateCoord(refCoord: number, cigarOps: string[]): number;
export declare function getMismatches(cigarString: string, mdString: string, seq: string, qual?: Buffer): Mismatch[];
export declare function generateMD(target: string, query: string, cigar: string): string;
export declare function getNextRefPos(cigarOps: string[], positions: number[]): Generator<number, void, unknown>;
export declare function getModificationPositions(mm: string, seq: string): ({
    type: string;
    positions: number[];
} | {
    type: string;
    positions: never[];
})[];
export declare function getModificationTypes(mm: string): string[];
