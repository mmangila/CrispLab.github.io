import { BaseFeatureDataAdapter, BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter';
import { Region } from '@jbrowse/core/util/types';
import { Feature } from '@jbrowse/core/util/simpleFeature';
import SerializableFilterChain from '@jbrowse/core/pluggableElementTypes/renderers/util/serializableFilterChain';
import { Observable } from 'rxjs';
interface SNPCoverageOptions extends BaseOptions {
    filters?: SerializableFilterChain;
}
export default class SNPCoverageAdapter extends BaseFeatureDataAdapter {
    protected configure(): Promise<{
        subadapter: BaseFeatureDataAdapter;
        sequenceAdapter: BaseFeatureDataAdapter | undefined;
    }>;
    getFeatures(region: Region, opts?: SNPCoverageOptions): Observable<Feature>;
    getRefNames(opts?: BaseOptions): Promise<string[]>;
    freeResources(): void;
    /**
     * Generates coverage bins from features which details
     * the reference, mismatches, strands, and coverage info
     * @param features - Features of region to be passed in
     * @param region - Region
     * @param bpPerPx - base pairs per pixel
     * @returns Array of nested frequency tables
     */
    generateCoverageBins(features: Observable<Feature>, region: Region, opts: {
        bpPerPx?: number;
        colorBy?: {
            type: string;
            tag?: string;
        };
    }): Promise<{
        total: number;
        lowqual: {
            total: number;
            strands: {
                [key: string]: number;
            };
        };
        cov: {
            total: number;
            strands: {
                [key: string]: number;
            };
        };
        delskips: {
            total: number;
            strands: {
                [key: string]: number;
            };
        };
        noncov: {
            total: number;
            strands: {
                [key: string]: number;
            };
        };
        ref: {
            total: number;
            strands: {
                [key: string]: number;
            };
        };
    }[]>;
}
declare const capabilities: string[];
export { capabilities };
