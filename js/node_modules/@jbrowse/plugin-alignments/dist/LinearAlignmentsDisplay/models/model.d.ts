import React from 'react';
import { AnyConfigurationModel } from '@jbrowse/core/configuration/configurationSchema';
import PluginManager from '@jbrowse/core/PluginManager';
import { MenuItem } from '@jbrowse/core/ui';
import { Instance } from 'mobx-state-tree';
import { AlignmentsConfigModel } from './configSchema';
declare const stateModelFactory: (pluginManager: PluginManager, configSchema: AlignmentsConfigModel) => import("mobx-state-tree").IModelType<{
    id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    type: import("mobx-state-tree").ISimpleType<string>;
    rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
} & {
    PileupDisplay: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IAnyModelType>;
    SNPCoverageDisplay: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IAnyModelType>;
    snpCovHeight: import("mobx-state-tree").IType<number | undefined, number, number>;
    type: import("mobx-state-tree").ISimpleType<"LinearAlignmentsDisplay">;
    configuration: import("mobx-state-tree").ITypeUnion<any, any, any>;
    height: import("mobx-state-tree").IType<number | undefined, number, number>;
    showCoverage: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    showPileup: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
}, {
    rendererTypeName: string;
    error: Error | undefined;
} & {
    readonly RenderingComponent: React.FC<{
        model: import("mobx-state-tree").ModelInstanceTypeProps<{
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").ISimpleType<string>;
            rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        }> & {
            rendererTypeName: string;
            error: Error | undefined;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").ISimpleType<string>;
            rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        }, {
            rendererTypeName: string;
            error: Error | undefined;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        onHorizontalScroll?: Function | undefined;
        blockState?: Record<string, any> | undefined;
    }>;
    readonly DisplayBlurb: React.FC<{
        model: import("mobx-state-tree").ModelInstanceTypeProps<{
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").ISimpleType<string>;
            rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        }> & {
            rendererTypeName: string;
            error: Error | undefined;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").ISimpleType<string>;
            rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        }, {
            rendererTypeName: string;
            error: Error | undefined;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    }> | null;
    readonly adapterConfig: any;
    readonly parentTrack: any;
    readonly renderProps: any;
    readonly rendererType: any;
    readonly DisplayMessageComponent: React.FC<any> | undefined;
    readonly trackMenuItems: MenuItem[];
    readonly viewMenuActions: MenuItem[];
    regionCannotBeRendered(): undefined;
} & {
    setError(error?: Error | undefined): void;
    setRpcDriverName(rpcDriverName: string): void;
    reload(): void;
} & {
    scrollTop: number;
} & {
    toggleCoverage(): void;
    togglePileup(): void;
    setScrollTop(scrollTop: number): void;
    setSNPCoverageHeight(n: number): void;
} & {
    readonly pileupDisplayConfig: any;
    getFeatureByID(id: string): any;
    readonly features: any;
    readonly DisplayBlurb: any;
    readonly sortedBy: any;
    readonly sortedByPosition: any;
    readonly sortedByRefName: any;
    readonly snpCoverageDisplayConfig: any;
    readonly trackMenuItems: MenuItem[];
} & {
    setSNPCoverageDisplay(displayConfig: AnyConfigurationModel): void;
    setUserBpPerPxLimit(limit: number): void;
    setPileupDisplay(displayConfig: AnyConfigurationModel): void;
    setHeight(displayHeight: number): number;
    resizeHeight(distance: number): number;
} & {
    afterAttach(): void;
    renderSvg(opts: {
        rasterizeLayers?: boolean;
    }): Promise<JSX.Element>;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export default stateModelFactory;
export declare type AlignmentsDisplayStateModel = ReturnType<typeof stateModelFactory>;
export declare type AlignmentsDisplayModel = Instance<AlignmentsDisplayStateModel>;
