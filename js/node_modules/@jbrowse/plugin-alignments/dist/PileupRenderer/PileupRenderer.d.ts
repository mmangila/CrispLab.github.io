/// <reference types="react" />
import { AnyConfigurationModel } from '@jbrowse/core/configuration/configurationSchema';
import BoxRendererType, { RenderArgs, RenderArgsSerialized, RenderArgsDeserialized as BoxRenderArgsDeserialized, RenderResults, ResultsSerialized, ResultsDeserialized } from '@jbrowse/core/pluggableElementTypes/renderers/BoxRendererType';
import { Theme } from '@material-ui/core';
import { Feature } from '@jbrowse/core/util/simpleFeature';
import { Region } from '@jbrowse/core/util/types';
import { BaseLayout } from '@jbrowse/core/util/layouts/BaseLayout';
import { PileupLayoutSession, PileupLayoutSessionProps } from './PileupLayoutSession';
export type { RenderArgs, RenderArgsSerialized, RenderResults, ResultsSerialized, ResultsDeserialized, };
export interface RenderArgsDeserialized extends BoxRenderArgsDeserialized {
    colorBy?: {
        type: string;
        tag?: string;
    };
    colorTagMap?: Record<string, string>;
    modificationTagMap?: Record<string, string>;
    sortedBy?: {
        type: string;
        pos: number;
        refName: string;
        assemblyName: string;
        tag?: string;
    };
    showSoftClip: boolean;
    highResolutionScaling: number;
}
export interface RenderArgsDeserializedWithFeaturesAndLayout extends RenderArgsDeserialized {
    features: Map<string, Feature>;
    layout: BaseLayout<Feature>;
    regionSequence?: string;
}
interface LayoutRecord {
    feature: Feature;
    leftPx: number;
    rightPx: number;
    topPx: number;
    heightPx: number;
}
interface LayoutFeature {
    heightPx: number;
    topPx: number;
    feature: Feature;
}
export default class PileupRenderer extends BoxRendererType {
    supportsSVG: boolean;
    getCharWidthHeight(ctx: CanvasRenderingContext2D): {
        charWidth: number;
        charHeight: number;
    };
    layoutFeature(feature: Feature, layout: BaseLayout<Feature>, config: AnyConfigurationModel, bpPerPx: number, region: Region, showSoftClip?: boolean): LayoutRecord | null;
    getExpandedRegion(region: Region, renderArgs: RenderArgsDeserialized): {
        start: number;
        end: number;
        refName: string;
        assemblyName: string;
        reversed?: boolean | undefined;
    };
    colorByOrientation(feature: Feature, config: AnyConfigurationModel): string;
    getOrientation(feature: Feature, config: AnyConfigurationModel): string;
    colorByInsertSize(feature: Feature, _config: AnyConfigurationModel): string;
    colorByStranded(feature: Feature, _config: AnyConfigurationModel): "color_rev_strand" | "color_fwd_strand" | "color_rev_missing_mate" | "color_fwd_missing_mate" | "color_rev_strand_not_proper" | "color_fwd_strand_not_proper" | "color_fwd_diff_chr" | "color_rev_diff_chr";
    colorByPerBaseQuality(ctx: CanvasRenderingContext2D, feat: LayoutFeature, _config: AnyConfigurationModel, region: Region, bpPerPx: number): void;
    colorByModifications(ctx: CanvasRenderingContext2D, layoutFeature: LayoutFeature, _config: AnyConfigurationModel, region: Region, bpPerPx: number, props: RenderArgsDeserializedWithFeaturesAndLayout): void;
    colorByMethylation(ctx: CanvasRenderingContext2D, layoutFeature: LayoutFeature, _config: AnyConfigurationModel, region: Region, bpPerPx: number, props: RenderArgsDeserializedWithFeaturesAndLayout): void;
    drawRect(ctx: CanvasRenderingContext2D, feat: LayoutFeature, props: RenderArgsDeserialized): void;
    drawAlignmentRect(ctx: CanvasRenderingContext2D, feat: LayoutFeature, props: RenderArgsDeserializedWithFeaturesAndLayout): void;
    drawMismatches(ctx: CanvasRenderingContext2D, feat: LayoutFeature, props: RenderArgsDeserializedWithFeaturesAndLayout, theme: Theme, colorForBase: {
        [key: string]: string;
    }, opts: {
        mismatchAlpha?: boolean;
        drawSNPs?: boolean;
        drawIndels?: boolean;
    }): void;
    drawSoftClipping(ctx: CanvasRenderingContext2D, feat: LayoutFeature, props: RenderArgsDeserializedWithFeaturesAndLayout, config: AnyConfigurationModel, theme: Theme): void;
    makeImageData(ctx: CanvasRenderingContext2D, layoutRecords: any, // eslint-disable-line @typescript-eslint/no-explicit-any
    props: RenderArgsDeserializedWithFeaturesAndLayout): Promise<void>;
    layoutFeats(props: RenderArgsDeserializedWithFeaturesAndLayout): (LayoutRecord | null)[];
    render(renderProps: RenderArgsDeserialized): Promise<{
        features: Map<string, Feature>;
        layout: import("@jbrowse/core/util/layouts/GranularRectLayout").default<unknown>;
        height: number;
        width: number;
        maxHeightReached: boolean;
        reactElement: any;
        imageData?: undefined;
        html?: string | undefined;
    } | {
        features: Map<string, Feature>;
        layout: import("@jbrowse/core/util/layouts/GranularRectLayout").default<unknown>;
        height: number;
        width: number;
        maxHeightReached: boolean;
        imageData: any;
        reactElement?: import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any> | null) | (new (props: any) => import("react").Component<any, any, any>)> | undefined;
        html?: string | undefined;
    }>;
    createSession(args: PileupLayoutSessionProps): PileupLayoutSession;
}
