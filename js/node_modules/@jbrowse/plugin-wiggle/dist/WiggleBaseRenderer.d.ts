/// <reference types="react" />
import { Feature } from '@jbrowse/core/util/simpleFeature';
import FeatureRendererType, { RenderArgs as FeatureRenderArgs, RenderArgsSerialized, RenderArgsDeserialized as FeatureRenderArgsDeserialized, RenderResults, ResultsSerialized, ResultsDeserialized } from '@jbrowse/core/pluggableElementTypes/renderers/FeatureRendererType';
import { ThemeOptions } from '@material-ui/core';
import { ScaleOpts } from './util';
export interface RenderArgs extends FeatureRenderArgs {
    scaleOpts: ScaleOpts;
}
export interface RenderArgsDeserialized extends FeatureRenderArgsDeserialized {
    bpPerPx: number;
    height: number;
    highResolutionScaling: number;
    scaleOpts: ScaleOpts;
    displayCrossHatches: boolean;
    ticks: {
        values: number[];
    };
    theme: ThemeOptions;
}
export interface RenderArgsDeserializedWithFeatures extends RenderArgsDeserialized {
    features: Map<string, Feature>;
}
export type { RenderArgsSerialized, RenderResults, ResultsSerialized, ResultsDeserialized, };
export default abstract class WiggleBaseRenderer extends FeatureRendererType {
    supportsSVG: boolean;
    render(renderProps: RenderArgsDeserialized): Promise<{
        features: Map<string, Feature>;
        height: number;
        width: number;
        reactElement: any;
        imageData?: undefined;
        html?: string | undefined;
    } | {
        features: Map<string, Feature>;
        height: number;
        width: number;
        imageData: any;
        reactElement?: import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any> | null) | (new (props: any) => import("react").Component<any, any, any>)> | undefined;
        html?: string | undefined;
    }>;
    abstract draw(ctx: CanvasRenderingContext2D, props: RenderArgsDeserialized): void;
}
