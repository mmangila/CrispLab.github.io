import AdapterType from '@jbrowse/core/pluggableElementTypes/AdapterType';
import TrackType from '@jbrowse/core/pluggableElementTypes/TrackType';
import Plugin from '@jbrowse/core/Plugin';
import { ConfigurationSchema, readConfObject, ConfigurationReference, getConf } from '@jbrowse/core/configuration';
import { createBaseTrackConfig, createBaseTrackModel } from '@jbrowse/core/pluggableElementTypes/models';
import DisplayType from '@jbrowse/core/pluggableElementTypes/DisplayType';
import FeatureRendererType from '@jbrowse/core/pluggableElementTypes/renderers/FeatureRendererType';
import { renderToAbstractCanvas } from '@jbrowse/core/util/offscreenCanvasUtils';
import { observer } from 'mobx-react';
import React, { useRef, lazy, useState } from 'react';
import { PrerenderedCanvas } from '@jbrowse/core/ui';
import { BigWig } from '@gmod/bbi';
import { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter';
import { openLocation } from '@jbrowse/core/util/io';
import { ObservableCreate } from '@jbrowse/core/util/rxjs';
import SimpleFeature from '@jbrowse/core/util/simpleFeature';
import { mergeAll, map } from 'rxjs/operators';
import { rectifyStats } from '@jbrowse/core/util/stats';
import { featureSpanPx, getSession, isSelectionContainer, isAbortException, getContainingView, renameRegionsIfNeeded } from '@jbrowse/core/util';
import { scaleLinear, scaleLog, scaleQuantize } from 'd3-scale';
import { types, getEnv, addDisposer, isAlive } from 'mobx-state-tree';
import { baseLinearDisplayConfigSchema, BaseLinearDisplayComponent, BaseLinearDisplay } from '@jbrowse/plugin-linear-genome-view';
import { getParentRenderProps, getRpcSessionId, getTrackAssemblyNames } from '@jbrowse/core/util/tracks';
import { observable, autorun, when } from 'mobx';
import { Axis, LEFT, RIGHT, axisPropsFromTickScale } from 'react-d3-axis';
import MUITooltip from '@material-ui/core/Tooltip';
import { makeStyles } from '@material-ui/core/styles';
import Color from 'color';
import { getAdapter } from '@jbrowse/core/data_adapters/dataAdapterCache';
import RpcMethodType from '@jbrowse/core/pluggableElementTypes/RpcMethodType';
import SerializableFilterChain from '@jbrowse/core/pluggableElementTypes/renderers/util/serializableFilterChain';
import Button from '@material-ui/core/Button';
import TextField from '@material-ui/core/TextField';
import Typography from '@material-ui/core/Typography';
import Dialog from '@material-ui/core/Dialog';
import DialogContent from '@material-ui/core/DialogContent';
import DialogTitle from '@material-ui/core/DialogTitle';
import IconButton from '@material-ui/core/IconButton';
import CloseIcon from '@material-ui/icons/Close';
import { Dialog as Dialog$1, DialogTitle as DialogTitle$1, IconButton as IconButton$1, DialogContent as DialogContent$1, Button as Button$1 } from '@material-ui/core';
import { CompactPicker } from 'react-color';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf(object);
    if (object === null) break;
  }

  return object;
}

function _get(target, property, receiver) {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get = Reflect.get;
  } else {
    _get = function _get(target, property, receiver) {
      var base = _superPropBase(target, property);

      if (!base) return;
      var desc = Object.getOwnPropertyDescriptor(base, property);

      if (desc.get) {
        return desc.get.call(receiver);
      }

      return desc.value;
    };
  }

  return _get(target, property, receiver || target);
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _iterableToArrayLimit(arr, i) {
  var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]);

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;

      var F = function () {};

      return {
        s: F,
        n: function () {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function (e) {
          throw e;
        },
        f: F
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var normalCompletion = true,
      didErr = false,
      err;
  return {
    s: function () {
      it = it.call(o);
    },
    n: function () {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function (e) {
      didErr = true;
      err = e;
    },
    f: function () {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime_1 = /*#__PURE__*/createCommonjsModule(function (module) {
  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  var runtime = function (exports) {

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined$1; // More compressible than void 0.

    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    function define(obj, key, value) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
      return obj[key];
    }

    try {
      // IE 8 has a broken Object.defineProperty that only works on DOM objects.
      define({}, "");
    } catch (err) {
      define = function define(obj, key, value) {
        return obj[key] = value;
      };
    }

    function wrap(innerFn, outerFn, self, tryLocsList) {
      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
      // .throw, and .return methods.

      generator._invoke = makeInvokeMethod(innerFn, self, context);
      return generator;
    }

    exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.

    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.

    var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.

    function Generator() {}

    function GeneratorFunction() {}

    function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.


    var IteratorPrototype = {};

    IteratorPrototype[iteratorSymbol] = function () {
      return this;
    };

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      // This environment has a native %IteratorPrototype%; use it instead
      // of the polyfill.
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.

    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        define(prototype, method, function (arg) {
          return this._invoke(method, arg);
        });
      });
    }

    exports.isGeneratorFunction = function (genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
      // do is to check its .name property.
      (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };

    exports.mark = function (genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
        define(genFun, toStringTagSymbol, "GeneratorFunction");
      }

      genFun.prototype = Object.create(Gp);
      return genFun;
    }; // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.


    exports.awrap = function (arg) {
      return {
        __await: arg
      };
    };

    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);

        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;

          if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
            return PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return PromiseImpl.resolve(value).then(function (unwrapped) {
            // When a yielded Promise is resolved, its final value becomes
            // the .value of the Promise<{value,done}> result for the
            // current iteration.
            result.value = unwrapped;
            resolve(result);
          }, function (error) {
            // If a rejected Promise was yielded, throw the rejection back
            // into the async generator function so it can be handled there.
            return invoke("throw", error, resolve, reject);
          });
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise = // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
        // invocations of the iterator.
        callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      } // Define the unified helper method that is used to implement .next,
      // .throw, and .return (see defineIteratorMethods).


      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);

    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
      return this;
    };

    exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.

    exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      if (PromiseImpl === void 0) PromiseImpl = Promise;
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
      return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;
      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          } // Be forgiving, per 25.3.3.3.3 of the spec:
          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            // Setting context._sent for legacy support of Babel's
            // function.sent implementation.
            context.sent = context._sent = context.arg;
          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);
          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;
          var record = tryCatch(innerFn, self, context);

          if (record.type === "normal") {
            // If an exception is thrown from innerFn, we leave state ===
            // GenStateExecuting and loop back for another invocation.
            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };
          } else if (record.type === "throw") {
            state = GenStateCompleted; // Dispatch the exception by looping back around to the
            // context.dispatchException(context.arg) call above.

            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    } // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.


    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];

      if (method === undefined$1) {
        // A .throw or .return when the delegate iterator has no .throw
        // method always terminates the yield* loop.
        context.delegate = null;

        if (context.method === "throw") {
          // Note: ["return"] must be used for ES3 parsing compatibility.
          if (delegate.iterator["return"]) {
            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            context.method = "return";
            context.arg = undefined$1;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              // If maybeInvokeDelegate(context) changed context.method from
              // "return" to "throw", let that override the TypeError below.
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError("The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (!info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        // Assign the result of the finished delegate to the temporary
        // variable specified by delegate.resultName (see delegateYield).
        context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

        context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
        // exception, let the outer generator proceed normally. If
        // context.method was "next", forget context.arg since it has been
        // "consumed" by the delegate iterator. If context.method was
        // "return", allow the original .return call to continue in the
        // outer generator.

        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined$1;
        }
      } else {
        // Re-yield the result returned by the delegate method.
        return info;
      } // The delegate iterator is finished, so forget it and continue with
      // the outer generator.


      context.delegate = null;
      return ContinueSentinel;
    } // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.


    defineIteratorMethods(Gp);
    define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.

    Gp[iteratorSymbol] = function () {
      return this;
    };

    Gp.toString = function () {
      return "[object Generator]";
    };

    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      // The root entry object (effectively a try statement without a catch
      // or a finally block) gives us a place to store values thrown from
      // locations where there is no enclosing try statement.
      this.tryEntries = [{
        tryLoc: "root"
      }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    exports.keys = function (object) {
      var keys = [];

      for (var key in object) {
        keys.push(key);
      }

      keys.reverse(); // Rather than returning an object with a next method, we keep
      // things simple and return the next function itself.

      return function next() {
        while (keys.length) {
          var key = keys.pop();

          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        } // To avoid creating an additional object, we just hang the .value
        // and .done properties off the next function object itself. This
        // also ensures that the minifier will not anonymize the function.


        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];

        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1,
              next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined$1;
            next.done = true;
            return next;
          };

          return next.next = next;
        }
      } // Return an iterator with no values.


      return {
        next: doneResult
      };
    }

    exports.values = values;

    function doneResult() {
      return {
        value: undefined$1,
        done: true
      };
    }

    Context.prototype = {
      constructor: Context,
      reset: function reset(skipTempReset) {
        this.prev = 0;
        this.next = 0; // Resetting context._sent for legacy support of Babel's
        // function.sent implementation.

        this.sent = this._sent = undefined$1;
        this.done = false;
        this.delegate = null;
        this.method = "next";
        this.arg = undefined$1;
        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            // Not sure about the optimal order of these conditions:
            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
              this[name] = undefined$1;
            }
          }
        }
      },
      stop: function stop() {
        this.done = true;
        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;

        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },
      dispatchException: function dispatchException(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;

        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            context.method = "next";
            context.arg = undefined$1;
          }

          return !!caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            // Exception thrown outside of any try block that could handle
            // it, so set the completion value of the entire function to
            // throw the exception.
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },
      abrupt: function abrupt(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          // Ignore the finally entry if control is not jumping to a
          // location outside the try/catch block.
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },
      complete: function complete(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },
      finish: function finish(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },
      "catch": function _catch(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;

            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }

            return thrown;
          }
        } // The context.catch method must only be called with a location
        // argument that corresponds to a known catch block.


        throw new Error("illegal catch attempt");
      },
      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          // Deliberately forget the last sent value so that we don't
          // accidentally pass it on to the delegate.
          this.arg = undefined$1;
        }

        return ContinueSentinel;
      }
    }; // Regardless of whether this script is executing as a CommonJS module
    // or not, return the runtime object so that we can declare the variable
    // regeneratorRuntime in the outer scope, which allows this module to be
    // injected easily by `bin/regenerator --include-runtime script.js`.

    return exports;
  }( // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports );

  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    // This module should not be running in strict mode, so the above
    // assignment should always work unless something is misconfigured. Just
    // in case runtime.js accidentally runs in strict mode, we can escape
    // strict mode using a global Function call. This could conceivably fail
    // if a Content Security Policy forbids using Function, but in that case
    // the proper solution is to fix the accidental strict mode problem. If
    // you've misconfigured your bundler to force strict mode and applied a
    // CSP to forbid Function, and you're not willing to fix either of those
    // problems, please detail your unique predicament in a GitHub issue.
    Function("r", "regeneratorRuntime = r")(runtime);
  }
});

var WiggleBaseRenderer = /*#__PURE__*/function (_FeatureRendererType) {
  _inherits(WiggleBaseRenderer, _FeatureRendererType);

  var _super = /*#__PURE__*/_createSuper(WiggleBaseRenderer);

  function WiggleBaseRenderer() {
    var _this;

    _classCallCheck(this, WiggleBaseRenderer);

    _this = _super.apply(this, arguments);
    _this.supportsSVG = true;
    return _this;
  }

  _createClass(WiggleBaseRenderer, [{
    key: "render",
    value: function () {
      var _render = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(renderProps) {
        var _this2 = this;

        var features, height, regions, bpPerPx, _regions, region, width, res, results;

        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.getFeatures(renderProps);

              case 2:
                features = _context.sent;
                height = renderProps.height, regions = renderProps.regions, bpPerPx = renderProps.bpPerPx;
                _regions = _slicedToArray(regions, 1), region = _regions[0];
                width = (region.end - region.start) / bpPerPx;
                _context.next = 8;
                return renderToAbstractCanvas(width, height, renderProps, function (ctx) {
                  return _this2.draw(ctx, _objectSpread2(_objectSpread2({}, renderProps), {}, {
                    features: features
                  }));
                });

              case 8:
                res = _context.sent;
                _context.next = 11;
                return _get(_getPrototypeOf(WiggleBaseRenderer.prototype), "render", this).call(this, _objectSpread2(_objectSpread2(_objectSpread2({}, renderProps), res), {}, {
                  features: features,
                  height: height,
                  width: width
                }));

              case 11:
                results = _context.sent;
                return _context.abrupt("return", _objectSpread2(_objectSpread2(_objectSpread2({}, results), res), {}, {
                  features: features,
                  height: height,
                  width: width
                }));

              case 13:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function render(_x) {
        return _render.apply(this, arguments);
      }

      return render;
    }()
  }]);

  return WiggleBaseRenderer;
}(FeatureRendererType);

function WiggleRendering(props) {
  var regions = props.regions,
      features = props.features,
      bpPerPx = props.bpPerPx,
      width = props.width,
      height = props.height,
      _props$onMouseLeave = props.onMouseLeave,
      _onMouseLeave = _props$onMouseLeave === void 0 ? function () {} : _props$onMouseLeave,
      _props$onMouseMove = props.onMouseMove,
      _onMouseMove = _props$onMouseMove === void 0 ? function () {} : _props$onMouseMove,
      _props$onFeatureClick = props.onFeatureClick,
      onFeatureClick = _props$onFeatureClick === void 0 ? function () {} : _props$onFeatureClick;

  var _regions = _slicedToArray(regions, 1),
      region = _regions[0];

  var ref = useRef(null);

  function getFeatureUnderMouse(eventClientX) {
    // calculates feature under mouse
    var offset = 0;

    if (ref.current) {
      offset = ref.current.getBoundingClientRect().left;
    }

    var offsetX = eventClientX - offset;
    var px = region.reversed ? width - offsetX : offsetX;
    var clientBp = region.start + bpPerPx * px;
    var featureUnderMouse;

    var _iterator = _createForOfIteratorHelper(features.values()),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var feature = _step.value;

        if (clientBp <= feature.get('end') && clientBp >= feature.get('start')) {
          featureUnderMouse = feature;
          break;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return featureUnderMouse;
  }

  return React.createElement("div", {
    ref: ref,
    "data-testid": "wiggle-rendering-test",
    onMouseMove: function onMouseMove(event) {
      var featureUnderMouse = getFeatureUnderMouse(event.clientX);

      _onMouseMove(event, featureUnderMouse ? featureUnderMouse.id() : undefined);
    },
    onClick: function onClick(event) {
      var featureUnderMouse = getFeatureUnderMouse(event.clientX);
      onFeatureClick(event, featureUnderMouse ? featureUnderMouse.id() : undefined);
    },
    onMouseLeave: function onMouseLeave(event) {
      return _onMouseLeave(event);
    },
    role: "presentation",
    className: "WiggleRendering",
    style: {
      overflow: 'visible',
      position: 'relative',
      height: height
    }
  }, React.createElement(PrerenderedCanvas, Object.assign({}, props)));
}

var XYPlotRendererReactComponent = /*#__PURE__*/observer(WiggleRendering);

var bigWigAdapterConfigSchema = /*#__PURE__*/ConfigurationSchema('BigWigAdapter', {
  bigWigLocation: {
    type: 'fileLocation',
    defaultValue: {
      uri: '/path/to/my.bw'
    }
  }
}, {
  explicitlyTyped: true
});

var BigWigAdapter = /*#__PURE__*/function (_BaseFeatureDataAdapt) {
  _inherits(BigWigAdapter, _BaseFeatureDataAdapt);

  var _super = /*#__PURE__*/_createSuper(BigWigAdapter);

  function BigWigAdapter(config) {
    var _this;

    _classCallCheck(this, BigWigAdapter);

    _this = _super.call(this, config);
    _this.bigwig = new BigWig({
      filehandle: openLocation(readConfObject(config, 'bigWigLocation'))
    });
    return _this;
  }

  _createClass(BigWigAdapter, [{
    key: "setup",
    value: function () {
      var _setup = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(opts) {
        var _ref, _ref$statusCallback, statusCallback, result;

        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _ref = opts || {}, _ref$statusCallback = _ref.statusCallback, statusCallback = _ref$statusCallback === void 0 ? function () {} : _ref$statusCallback;
                statusCallback('Downloading bigwig header');
                _context.next = 4;
                return this.bigwig.getHeader(opts);

              case 4:
                result = _context.sent;
                statusCallback('');
                return _context.abrupt("return", result);

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function setup(_x) {
        return _setup.apply(this, arguments);
      }

      return setup;
    }()
  }, {
    key: "getRefNames",
    value: function () {
      var _getRefNames = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(opts) {
        var header;
        return runtime_1.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.setup(opts);

              case 2:
                header = _context2.sent;
                return _context2.abrupt("return", Object.keys(header.refsByName));

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getRefNames(_x2) {
        return _getRefNames.apply(this, arguments);
      }

      return getRefNames;
    }()
  }, {
    key: "refIdToName",
    value: function () {
      var _refIdToName = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(refId) {
        var h;
        return runtime_1.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.setup();

              case 2:
                h = _context3.sent;
                return _context3.abrupt("return", (h.refsByNumber[refId] || {
                  name: undefined
                }).name);

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function refIdToName(_x3) {
        return _refIdToName.apply(this, arguments);
      }

      return refIdToName;
    }()
  }, {
    key: "getGlobalStats",
    value: function () {
      var _getGlobalStats = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(opts) {
        var header;
        return runtime_1.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.setup(opts);

              case 2:
                header = _context4.sent;
                return _context4.abrupt("return", rectifyStats(header.totalSummary));

              case 4:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function getGlobalStats(_x4) {
        return _getGlobalStats.apply(this, arguments);
      }

      return getGlobalStats;
    }()
  }, {
    key: "getFeatures",
    value: function getFeatures(region) {
      var _this2 = this;

      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var refName = region.refName,
          start = region.start,
          end = region.end;
      var _opts$bpPerPx = opts.bpPerPx,
          bpPerPx = _opts$bpPerPx === void 0 ? 0 : _opts$bpPerPx,
          signal = opts.signal,
          _opts$resolution = opts.resolution,
          resolution = _opts$resolution === void 0 ? 1 : _opts$resolution,
          _opts$statusCallback = opts.statusCallback,
          statusCallback = _opts$statusCallback === void 0 ? function () {} : _opts$statusCallback;
      return ObservableCreate( /*#__PURE__*/function () {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(observer) {
          var ob;
          return runtime_1.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  statusCallback('Downloading bigwig data');
                  _context5.next = 3;
                  return _this2.bigwig.getFeatureStream(refName, start, end, _objectSpread2(_objectSpread2({}, opts), {}, {
                    basesPerSpan: bpPerPx / resolution
                  }));

                case 3:
                  ob = _context5.sent;
                  ob.pipe(mergeAll(), map(function (record) {
                    return new SimpleFeature({
                      id: "".concat(refName, ":").concat(record.start, "-").concat(record.end),
                      data: _objectSpread2(_objectSpread2({}, record), {}, {
                        refName: refName
                      })
                    });
                  })).subscribe(observer);

                case 5:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5);
        }));

        return function (_x5) {
          return _ref2.apply(this, arguments);
        };
      }(), signal);
    }
  }, {
    key: "freeResources",
    value: function freeResources() {}
  }]);

  return BigWigAdapter;
}(BaseFeatureDataAdapter);
BigWigAdapter.capabilities = ['hasResolution', 'hasLocalStats', 'hasGlobalStats'];
var adapterCapabilities = BigWigAdapter.capabilities;

var BigWigAdapter$1 = {
  __proto__: null,
  'default': BigWigAdapter,
  adapterCapabilities: adapterCapabilities
};

/**
 * produces a d3-scale from arguments. applies a "nice domain" adjustment
 *
 * @param object - containing attributes
 *   - domain [min,max]
 *   - range [min,max]
 *   - bounds [min,max]
 *   - scaleType (linear or log)
 *   - pivotValue (number)
 *   - inverted (boolean)
 */

function getScale(_ref) {
  var _ref$domain = _ref.domain,
      domain = _ref$domain === void 0 ? [] : _ref$domain,
      _ref$range = _ref.range,
      range = _ref$range === void 0 ? [] : _ref$range,
      scaleType = _ref.scaleType,
      pivotValue = _ref.pivotValue,
      inverted = _ref.inverted;
  var scale;

  var _domain = _slicedToArray(domain, 2),
      min = _domain[0],
      max = _domain[1];

  if (min === undefined || max === undefined) {
    throw new Error('invalid domain');
  }

  if (scaleType === 'linear') {
    scale = scaleLinear();
  } else if (scaleType === 'log') {
    scale = scaleLog();
    scale.base(2);
  } else if (scaleType === 'quantize') {
    scale = scaleQuantize();
  } else {
    throw new Error('undefined scaleType');
  }

  scale.domain(pivotValue !== undefined ? [min, pivotValue, max] : [min, max]); // console.log('before', scale.domain())

  scale.nice();

  var _range = _slicedToArray(range, 2),
      rangeMin = _range[0],
      rangeMax = _range[1];

  if (rangeMin === undefined || rangeMax === undefined) {
    throw new Error('invalid range');
  }

  scale.range(inverted ? range.slice().reverse() : range); // console.log('after', scale.domain())

  return scale;
}
/**
 * gets the origin for drawing the graph. for linear this is 0, for log this is arbitrarily set to log(1)==0
 *
 * @param scaleType -
 */

function getOrigin(scaleType
/* , pivot, stats */
) {
  // if (pivot) {
  //   if (pivot === 'mean') {
  //     return stats.scoreMean || 0
  //   }
  //   if (pivot === 'zero') {
  //     return 0
  //   }
  //   return parseFloat()
  // }
  // if (scaleType === 'z_score') {
  //   return stats.scoreMean || 0
  // }
  if (scaleType === 'log') {
    return 1;
  }

  return 0;
}
/**
 * produces a "nice" domain that actually rounds down to 0 for the min
 * or 0 to the max depending on if all values are positive or negative
 *
 * @param object - containing attributes
 *   - domain [min,max]
 *   - bounds [min,max]
 *   - mean
 *   - stddev
 *   - scaleType (linear or log)
 */

function getNiceDomain(_ref2) {
  var scaleType = _ref2.scaleType,
      domain = _ref2.domain,
      bounds = _ref2.bounds;

  var _bounds = _slicedToArray(bounds, 2),
      minScore = _bounds[0],
      maxScore = _bounds[1];

  var _domain2 = _slicedToArray(domain, 2),
      min = _domain2[0],
      max = _domain2[1];

  if (scaleType === 'linear') {
    if (max < 0) {
      max = 0;
    }

    if (min > 0) {
      min = 0;
    }
  }

  if (scaleType === 'log') {
    // if the min is 0, assume that it's just something
    // with no read coverage and that we should ignore it in calculations
    // if it's greater than 1 pin to 1 for the full range also
    // otherwise, we may see bigwigs with fractional values
    if (min === 0 || min > 1) {
      min = 1;
    }
  }

  if (min === undefined || max === undefined) {
    throw new Error('invalid domain');
  }

  if (minScore !== undefined && minScore !== Number.MIN_VALUE) {
    min = minScore;
  }

  if (maxScore !== undefined && maxScore !== Number.MAX_VALUE) {
    max = maxScore;
  }

  var getScaleType = function getScaleType(type) {
    if (type === 'linear') {
      return scaleLinear();
    }

    if (type === 'log') {
      var _scale = scaleLog();

      _scale.base(2);

      return _scale;
    }

    if (type === 'quantize') {
      return scaleQuantize();
    }

    throw new Error("undefined scaleType ".concat(type));
  };

  var scale = getScaleType(scaleType);
  scale.domain([min, max]);
  scale.nice();
  return scale.domain();
}

var utils = {
  __proto__: null,
  getScale: getScale,
  getOrigin: getOrigin,
  getNiceDomain: getNiceDomain
};

var ConfigSchema = /*#__PURE__*/ConfigurationSchema('WiggleRenderer', {
  color: {
    type: 'color',
    description: 'the color of track, overrides posColor and negColor',
    defaultValue: '#f0f'
  },
  posColor: {
    type: 'color',
    description: 'the color to use when the score is positive',
    defaultValue: 'blue'
  },
  negColor: {
    type: 'color',
    description: 'the color to use when the score is negative',
    defaultValue: 'red'
  },
  highlightColor: {
    type: 'color',
    description: 'the color of highlights over the wiggle track',
    defaultValue: 'rgba(255,255,0,0.5)'
  },
  clipColor: {
    type: 'color',
    description: 'the color of the clipping marker',
    defaultValue: 'red'
  },
  renderType: {
    type: 'stringEnum',
    model: /*#__PURE__*/types.enumeration('Rendering type', ['xyplot', 'density', 'line']),
    description: 'The type of rendering for wiggle data to use',
    defaultValue: 'xyplot'
  },
  filled: {
    type: 'boolean',
    description: 'fill in histogram',
    defaultValue: true
  },
  bicolorPivot: {
    type: 'stringEnum',
    model: /*#__PURE__*/types.enumeration('Scale type', ['numeric', 'mean', 'z_score', 'none']),
    description: 'type of bicolor pivot',
    defaultValue: 'numeric'
  },
  bicolorPivotValue: {
    type: 'number',
    defaultValue: 0,
    description: 'value to use for bicolor pivot'
  },
  summaryScoreMode: {
    type: 'stringEnum',
    model: /*#__PURE__*/types.enumeration('Score type', ['max', 'min', 'avg', 'whiskers']),
    description: 'choose whether to use max/min/average or whiskers which combines all three into the same rendering',
    defaultValue: 'whiskers'
  },
  displayCrossHatches: {
    type: 'boolean',
    description: 'choose to draw cross hatches (sideways lines)',
    defaultValue: false
  }
}, {
  explicitlyTyped: true
});

var DensityRenderer = /*#__PURE__*/function (_WiggleBaseRenderer) {
  _inherits(DensityRenderer, _WiggleBaseRenderer);

  var _super = /*#__PURE__*/_createSuper(DensityRenderer);

  function DensityRenderer() {
    _classCallCheck(this, DensityRenderer);

    return _super.apply(this, arguments);
  }

  _createClass(DensityRenderer, [{
    key: "draw",
    value: function draw(ctx, props) {
      var features = props.features,
          regions = props.regions,
          bpPerPx = props.bpPerPx,
          scaleOpts = props.scaleOpts,
          height = props.height,
          config = props.config;

      var _regions = _slicedToArray(regions, 1),
          region = _regions[0];

      var pivot = readConfObject(config, 'bicolorPivot');
      var pivotValue = readConfObject(config, 'bicolorPivotValue');
      var negColor = readConfObject(config, 'negColor');
      var posColor = readConfObject(config, 'posColor');
      var colorCallback;
      var colorScale;

      if (readConfObject(config, 'color') === '#f0f') {
        // default color, use posColor/negColor instead
        colorScale = pivot !== 'none' ? getScale(_objectSpread2(_objectSpread2({}, scaleOpts), {}, {
          pivotValue: pivotValue,
          range: [negColor, 'white', posColor]
        })) : getScale(_objectSpread2(_objectSpread2({}, scaleOpts), {}, {
          range: ['white', posColor]
        }));

        colorCallback = function colorCallback(feature) {
          return colorScale(feature.get('score'));
        };
      } else {
        colorCallback = function colorCallback(feature) {
          return readConfObject(config, 'color', {
            feature: feature
          });
        };
      }

      var _iterator = _createForOfIteratorHelper(features.values()),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var feature = _step.value;

          var _featureSpanPx = featureSpanPx(feature, region, bpPerPx),
              _featureSpanPx2 = _slicedToArray(_featureSpanPx, 2),
              leftPx = _featureSpanPx2[0],
              rightPx = _featureSpanPx2[1];

          var w = rightPx - leftPx + 0.3; // fudge factor for subpixel rendering

          ctx.fillStyle = colorCallback(feature);
          ctx.fillRect(leftPx, 0, w, height);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }]);

  return DensityRenderer;
}(WiggleBaseRenderer);
var configSchema = /*#__PURE__*/ConfigurationSchema('DensityRenderer', {}, {
  baseConfiguration: ConfigSchema,
  explicitlyTyped: true
});

function WiggleConfigFactory(pluginManager) {
  var XYPlotRendererConfigSchema = pluginManager.getRendererType('XYPlotRenderer').configSchema;
  var DensityRendererConfigSchema = pluginManager.getRendererType('DensityRenderer').configSchema;
  var LinePlotRendererConfigSchema = pluginManager.getRendererType('LinePlotRenderer').configSchema;
  return ConfigurationSchema('LinearWiggleDisplay', {
    autoscale: {
      type: 'stringEnum',
      defaultValue: 'local',
      model: types.enumeration('Autoscale type', ['global', 'local', 'globalsd', 'localsd', 'zscore']),
      description: 'global/local using their min/max values or w/ standard deviations (globalsd/localsd)'
    },
    minScore: {
      type: 'number',
      defaultValue: Number.MIN_VALUE,
      description: 'minimum value for the y-scale'
    },
    maxScore: {
      type: 'number',
      description: 'maximum value for the y-scale',
      defaultValue: Number.MAX_VALUE
    },
    numStdDev: {
      type: 'number',
      description: 'number of standard deviations to use for autoscale types globalsd or localsd',
      defaultValue: 3
    },
    scaleType: {
      type: 'stringEnum',
      model: types.enumeration('Scale type', ['linear', 'log']),
      description: 'The type of scale to use',
      defaultValue: 'linear'
    },
    inverted: {
      type: 'boolean',
      description: 'draw upside down',
      defaultValue: false
    },
    defaultRendering: {
      type: 'stringEnum',
      model: types.enumeration('Rendering', ['density', 'xyplot', 'line']),
      defaultValue: 'xyplot'
    },
    renderers: ConfigurationSchema('RenderersConfiguration', {
      DensityRenderer: DensityRendererConfigSchema,
      XYPlotRenderer: XYPlotRendererConfigSchema,
      LinePlotRenderer: LinePlotRendererConfigSchema
    })
  }, {
    baseConfiguration: baseLinearDisplayConfigSchema,
    explicitlyTyped: true
  });
}

/* eslint-disable @typescript-eslint/no-explicit-any */

var toP = function toP() {
  var s = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  return parseFloat(s.toPrecision(6));
};

var useStyles = /*#__PURE__*/makeStyles(function (theme) {
  return {
    popper: {
      fontSize: '0.8em',
      // important to have a zIndex directly on the popper itself
      // @material-ui/Tooltip uses popper and has similar thing
      zIndex: theme.zIndex.tooltip,
      // needed to avoid rapid mouseLeave/mouseEnter on popper
      pointerEvents: 'none'
    },
    hoverVertical: {
      background: '#333',
      border: 'none',
      width: 1,
      height: '100%',
      top: 0,
      cursor: 'default',
      position: 'absolute',
      pointerEvents: 'none'
    }
  };
});

function TooltipContents(props) {
  var feature = props.feature;
  var ref = feature.get('refName');
  var displayRef = "".concat(ref ? "".concat(ref, ":") : '');
  var start = (feature.get('start') + 1).toLocaleString('en-US');
  var end = feature.get('end').toLocaleString('en-US');
  var coord = start === end ? start : "".concat(start, "..").concat(end);
  var loc = "".concat(displayRef).concat(coord);
  return feature.get('summary') !== undefined ? React.createElement("div", null, loc, React.createElement("br", null), "Max: ", toP(feature.get('maxScore')), React.createElement("br", null), "Avg: ", toP(feature.get('score')), React.createElement("br", null), "Min: ", toP(feature.get('minScore'))) : React.createElement("div", null, loc, React.createElement("br", null), "".concat(toP(feature.get('score'))));
}

var Tooltip = /*#__PURE__*/observer(function (_ref) {
  var model = _ref.model,
      height = _ref.height,
      mouseCoord = _ref.mouseCoord;
  var featureUnderMouse = model.featureUnderMouse;
  var classes = useStyles();
  return featureUnderMouse ? React.createElement(React.Fragment, null, React.createElement(MUITooltip, {
    placement: "right-start",
    className: classes.popper,
    open: true,
    title: React.createElement(TooltipContents, {
      feature: featureUnderMouse
    })
  }, React.createElement("div", {
    style: {
      position: 'absolute',
      left: mouseCoord[0],
      top: 5
    }
  }, ' ')), React.createElement("div", {
    className: classes.hoverVertical,
    style: {
      left: mouseCoord[0],
      height: height - YSCALEBAR_LABEL_OFFSET * 2
    }
  })) : null;
});

var YScaleBar = /*#__PURE__*/observer(function (_ref) {
  var model = _ref.model,
      orientation = _ref.orientation;
  var ticks = model.ticks;
  return React.createElement(Axis, Object.assign({}, ticks, {
    format: function format(n) {
      return n;
    },
    style: {
      orient: orientation === 'left' ? LEFT : RIGHT
    }
  }));
});
var LinearWiggleDisplay = /*#__PURE__*/observer(function (props) {
  var model = props.model;
  var ready = model.ready,
      stats = model.stats,
      height = model.height,
      needsScalebar = model.needsScalebar;
  return React.createElement("div", null, React.createElement(BaseLinearDisplayComponent, Object.assign({}, props)), ready && stats && needsScalebar ? React.createElement("svg", {
    style: {
      position: 'absolute',
      top: 0,
      left: 300,
      pointerEvents: 'none',
      height: height,
      width: 50
    }
  }, React.createElement(YScaleBar, {
    model: model
  })) : null);
});

var SetMinMaxDlg = /*#__PURE__*/lazy(function () {
  return Promise.resolve().then(function () { return SetMinMaxDialog; });
});
var SetColorDlg = /*#__PURE__*/lazy(function () {
  return Promise.resolve().then(function () { return SetColorDialog$1; });
}); // fudge factor for making all labels on the YScalebar visible

var YSCALEBAR_LABEL_OFFSET = 5; // using a map because it preserves order

var rendererTypes = /*#__PURE__*/new Map([['xyplot', 'XYPlotRenderer'], ['density', 'DensityRenderer'], ['line', 'LinePlotRenderer']]);

function logb(x, y) {
  return Math.log(y) / Math.log(x);
}

function round(v) {
  var b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1.5;
  return (v >= 0 ? 1 : -1) * Math.pow(b, 1 + Math.floor(logb(b, Math.abs(v))));
}

var stateModelFactory = function stateModelFactory(pluginManager, configSchema) {
  return types.compose('LinearWiggleDisplay', BaseLinearDisplay, types.model({
    type: types.literal('LinearWiggleDisplay'),
    configuration: ConfigurationReference(configSchema),
    selectedRendering: types.optional(types.string, ''),
    resolution: types.optional(types.number, 1),
    fill: types.maybe(types["boolean"]),
    color: types.maybe(types.string),
    summaryScoreMode: types.maybe(types.string),
    rendererTypeNameState: types.maybe(types.string),
    scale: types.maybe(types.string),
    autoscale: types.maybe(types.string),
    displayCrossHatches: types.maybe(types["boolean"]),
    constraints: types.optional(types.model({
      max: types.maybe(types.number),
      min: types.maybe(types.number)
    }), {})
  }))["volatile"](function () {
    return {
      ready: false,
      message: undefined,
      stats: observable({
        scoreMin: 0,
        scoreMax: 50
      }),
      statsFetchInProgress: undefined
    };
  }).actions(function (self) {
    return {
      updateStats: function updateStats(stats) {
        self.stats.scoreMin = stats.scoreMin;
        self.stats.scoreMax = stats.scoreMax;
        self.ready = true;
      },
      setColor: function setColor(color) {
        self.color = color;
      },
      setLoading: function setLoading(aborter) {
        var statsFetch = self.statsFetchInProgress;

        if (statsFetch !== undefined && !statsFetch.signal.aborted) {
          statsFetch.abort();
        }

        self.statsFetchInProgress = aborter;
      },
      // this overrides the BaseLinearDisplayModel to avoid popping up a
      // feature detail display, but still sets the feature selection on the
      // model so listeners can detect a click
      selectFeature: function selectFeature(feature) {
        var session = getSession(self);

        if (isSelectionContainer(session)) {
          session.setSelection(feature);
        }
      },
      setResolution: function setResolution(res) {
        self.resolution = res;
      },
      setFill: function setFill(fill) {
        self.fill = fill;
      },
      toggleLogScale: function toggleLogScale() {
        if (self.scale !== 'log') {
          self.scale = 'log';
        } else {
          self.scale = 'linear';
        }
      },
      setScaleType: function setScaleType(scale) {
        self.scale = scale;
      },
      setSummaryScoreMode: function setSummaryScoreMode(val) {
        self.summaryScoreMode = val;
      },
      setAutoscale: function setAutoscale(val) {
        self.autoscale = val;
      },
      setMaxScore: function setMaxScore(val) {
        self.constraints.max = val;
      },
      setRendererType: function setRendererType(val) {
        self.rendererTypeNameState = val;
      },
      setMinScore: function setMinScore(val) {
        self.constraints.min = val;
      },
      toggleCrossHatches: function toggleCrossHatches() {
        self.displayCrossHatches = !self.displayCrossHatches;
      },
      setCrossHatches: function setCrossHatches(cross) {
        self.displayCrossHatches = cross;
      }
    };
  }).views(function (self) {
    return {
      get TooltipComponent() {
        return Tooltip;
      },

      get adapterTypeName() {
        return self.adapterConfig.type;
      },

      get rendererTypeName() {
        var viewName = self.rendererTypeNameState || getConf(self, 'defaultRendering');
        var rendererType = rendererTypes.get(viewName);

        if (!rendererType) {
          throw new Error("unknown alignments view name ".concat(viewName));
        }

        return rendererType;
      },

      // subclasses can define these, as snpcoverage track does
      get filters() {
        return undefined;
      },

      get scaleType() {
        return self.scale || getConf(self, 'scaleType');
      },

      get filled() {
        return typeof self.fill !== 'undefined' ? self.fill : readConfObject(this.rendererConfig, 'filled');
      },

      get maxScore() {
        var max = self.constraints.max;
        return max !== undefined ? max : getConf(self, 'maxScore');
      },

      get minScore() {
        var min = self.constraints.min;
        return min !== undefined ? min : getConf(self, 'minScore');
      },

      get rendererConfig() {
        var configBlob = getConf(self, ['renderers', this.rendererTypeName]) || {};
        return self.rendererType.configSchema.create(_objectSpread2(_objectSpread2({}, configBlob), {}, {
          filled: self.fill,
          scaleType: this.scaleType,
          displayCrossHatches: self.displayCrossHatches,
          summaryScoreMode: self.summaryScoreMode,
          color: self.color
        }), getEnv(self));
      }

    };
  }).views(function (self) {
    var oldDomain = [0, 0];
    return {
      get summaryScoreModeSetting() {
        return self.summaryScoreMode || readConfObject(self.rendererConfig, 'summaryScoreMode');
      },

      get domain() {
        var stats = self.stats,
            scaleType = self.scaleType,
            minScore = self.minScore,
            maxScore = self.maxScore;
        var ret = getNiceDomain({
          domain: [stats.scoreMin, stats.scoreMax],
          bounds: [minScore, maxScore],
          scaleType: scaleType
        });
        var headroom = getConf(self, 'headroom') || 0; // avoid weird scalebar if log value and empty region displayed

        if (scaleType === 'log' && ret[1] === Number.MIN_VALUE) {
          return [0, Number.MIN_VALUE];
        } // heuristic to just give some extra headroom on bigwig scores if no
        // maxScore/minScore specified (they have MAX_VALUE/MIN_VALUE if so)


        if (maxScore === Number.MAX_VALUE && ret[1] > 1.0) {
          ret[1] = round(ret[1] + headroom);
        }

        if (minScore === Number.MIN_VALUE && ret[0] < -1.0) {
          ret[0] = round(ret[0] - headroom);
        } // avoid returning a new object if it matches the old value


        if (JSON.stringify(oldDomain) !== JSON.stringify(ret)) {
          oldDomain = ret;
        }

        return oldDomain;
      },

      get needsScalebar() {
        return self.rendererTypeName === 'XYPlotRenderer' || self.rendererTypeName === 'LinePlotRenderer';
      },

      get scaleOpts() {
        return {
          domain: this.domain,
          stats: self.stats,
          autoscaleType: this.autoscaleType,
          scaleType: self.scaleType,
          inverted: getConf(self, 'inverted')
        };
      },

      get canHaveFill() {
        return self.rendererTypeName === 'XYPlotRenderer';
      },

      get autoscaleType() {
        return self.autoscale || getConf(self, 'autoscale');
      },

      get displayCrossHatchesSetting() {
        return self.displayCrossHatches || readConfObject(self.rendererConfig, 'displayCrossHatches');
      }

    };
  }).views(function (self) {
    var trackMenuItems = self.trackMenuItems;
    return {
      get ticks() {
        var scaleType = self.scaleType,
            domain = self.domain,
            height = self.height;
        var range = [height - YSCALEBAR_LABEL_OFFSET, YSCALEBAR_LABEL_OFFSET];
        var scale = getScale({
          scaleType: scaleType,
          domain: domain,
          range: range,
          inverted: getConf(self, 'inverted')
        });
        var ticks = height < 50 ? 2 : 4;
        return axisPropsFromTickScale(scale, ticks);
      },

      get renderProps() {
        return _objectSpread2(_objectSpread2(_objectSpread2({}, self.composedRenderProps), getParentRenderProps(self)), {}, {
          notReady: !self.ready,
          rpcDriverName: self.rpcDriverName,
          displayModel: self,
          config: self.rendererConfig,
          scaleOpts: self.scaleOpts,
          resolution: self.resolution,
          height: self.height,
          ticks: this.ticks,
          displayCrossHatches: self.displayCrossHatches,
          filters: self.filters
        });
      },

      get adapterCapabilities() {
        var _pluginManager$getAda = pluginManager.getAdapterType(self.adapterTypeName),
            adapterCapabilities = _pluginManager$getAda.adapterCapabilities;

        return adapterCapabilities;
      },

      get hasResolution() {
        return this.adapterCapabilities.includes('hasResolution');
      },

      get hasGlobalStats() {
        return this.adapterCapabilities.includes('hasGlobalStats');
      },

      get composedTrackMenuItems() {
        return [].concat(_toConsumableArray(this.hasResolution ? [{
          label: 'Resolution',
          subMenu: [{
            label: 'Finer resolution',
            onClick: function onClick() {
              self.setResolution(self.resolution * 5);
            }
          }, {
            label: 'Coarser resolution',
            onClick: function onClick() {
              self.setResolution(self.resolution / 5);
            }
          }]
        }, {
          label: 'Summary score mode',
          subMenu: ['min', 'max', 'avg', 'whiskers'].map(function (elt) {
            return {
              label: elt,
              onClick: function onClick() {
                return self.setSummaryScoreMode(elt);
              }
            };
          })
        }] : []), _toConsumableArray(self.canHaveFill ? [{
          label: self.filled ? 'Turn off histogram fill' : 'Turn on histogram fill',
          onClick: function onClick() {
            self.setFill(!self.filled);
          }
        }] : []), [{
          label: self.scaleType === 'log' ? 'Set linear scale' : 'Set log scale',
          onClick: function onClick() {
            self.toggleLogScale();
          }
        }, {
          type: 'checkbox',
          label: 'Draw cross hatches',
          checked: self.displayCrossHatchesSetting,
          onClick: function onClick() {
            self.toggleCrossHatches();
          }
        }], _toConsumableArray(Object.keys(getConf(self, 'renderers') || {}).length > 1 ? [{
          label: 'Renderer type',
          subMenu: _toConsumableArray(rendererTypes.keys()).map(function (key) {
            return {
              label: key,
              onClick: function onClick() {
                return self.setRendererType(key);
              }
            };
          })
        }] : []), [{
          label: 'Autoscale type',
          subMenu: [['local', 'Local']].concat(_toConsumableArray(this.hasGlobalStats ? [['global', 'Global'], ['globalsd', 'Global ± 3σ']] : []), [['localsd', 'Local ± 3σ']]).map(function (_ref) {
            var _ref2 = _slicedToArray(_ref, 2),
                val = _ref2[0],
                label = _ref2[1];

            return {
              label: label,
              onClick: function onClick() {
                self.setAutoscale(val);
              }
            };
          })
        }, {
          label: 'Set min/max score',
          onClick: function onClick() {
            getSession(self).setDialogComponent(SetMinMaxDlg, {
              model: self
            });
          }
        }, {
          label: 'Set color',
          onClick: function onClick() {
            getSession(self).setDialogComponent(SetColorDlg, {
              model: self
            });
          }
        }]);
      },

      get trackMenuItems() {
        return [].concat(_toConsumableArray(trackMenuItems), _toConsumableArray(this.composedTrackMenuItems));
      }

    };
  }).actions(function (self) {
    var superReload = self.reload;
    var superRenderSvg = self.renderSvg;

    function getStats(_x) {
      return _getStats.apply(this, arguments);
    }

    function _getStats() {
      _getStats = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(opts) {
        var _getSession, rpcManager, nd, adapterConfig, autoscaleType, sessionId, params, results, scoreMin, scoreMean, scoreStdDev, _getContainingView2, dynamicBlocks, bpPerPx, _results, _scoreMin, _scoreMean, _scoreStdDev;

        return runtime_1.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _getSession = getSession(self), rpcManager = _getSession.rpcManager;
                nd = getConf(self, 'numStdDev') || 3;
                adapterConfig = self.adapterConfig, autoscaleType = self.autoscaleType;
                sessionId = getRpcSessionId(self);
                params = _objectSpread2({
                  sessionId: sessionId,
                  adapterConfig: adapterConfig,
                  statusCallback: function statusCallback(message) {
                    if (isAlive(self)) {
                      self.setMessage(message);
                    }
                  }
                }, opts);

                if (!(autoscaleType === 'global' || autoscaleType === 'globalsd')) {
                  _context4.next = 11;
                  break;
                }

                _context4.next = 8;
                return rpcManager.call(sessionId, 'WiggleGetGlobalStats', params);

              case 8:
                results = _context4.sent;
                scoreMin = results.scoreMin, scoreMean = results.scoreMean, scoreStdDev = results.scoreStdDev; // globalsd uses heuristic to avoid unnecessary scoreMin<0
                // if the scoreMin is never less than 0
                // helps with most coverage bigwigs just being >0

                return _context4.abrupt("return", autoscaleType === 'globalsd' ? _objectSpread2(_objectSpread2({}, results), {}, {
                  scoreMin: scoreMin >= 0 ? 0 : scoreMean - nd * scoreStdDev,
                  scoreMax: scoreMean + nd * scoreStdDev
                }) : results);

              case 11:
                if (!(autoscaleType === 'local' || autoscaleType === 'localsd')) {
                  _context4.next = 18;
                  break;
                }

                _getContainingView2 = getContainingView(self), dynamicBlocks = _getContainingView2.dynamicBlocks, bpPerPx = _getContainingView2.bpPerPx;
                _context4.next = 15;
                return rpcManager.call(sessionId, 'WiggleGetMultiRegionStats', _objectSpread2(_objectSpread2({}, params), {}, {
                  assemblyName: getTrackAssemblyNames(self.parentTrack)[0],
                  regions: JSON.parse(JSON.stringify(dynamicBlocks.contentBlocks.map(function (region) {
                    var start = region.start,
                        end = region.end;
                    return _objectSpread2(_objectSpread2({}, region), {}, {
                      start: Math.floor(start),
                      end: Math.ceil(end)
                    });
                  }))),
                  bpPerPx: bpPerPx
                }));

              case 15:
                _results = _context4.sent;
                _scoreMin = _results.scoreMin, _scoreMean = _results.scoreMean, _scoreStdDev = _results.scoreStdDev; // localsd uses heuristic to avoid unnecessary scoreMin<0
                // if the scoreMin is never less than 0
                // helps with most coverage bigwigs just being >0

                return _context4.abrupt("return", autoscaleType === 'localsd' ? _objectSpread2(_objectSpread2({}, _results), {}, {
                  scoreMin: _scoreMin >= 0 ? 0 : _scoreMean - nd * _scoreStdDev,
                  scoreMax: _scoreMean + nd * _scoreStdDev
                }) : _results);

              case 18:
                if (!(autoscaleType === 'zscale')) {
                  _context4.next = 20;
                  break;
                }

                return _context4.abrupt("return", rpcManager.call(sessionId, 'WiggleGetGlobalStats', params));

              case 20:
                throw new Error("invalid autoscaleType '".concat(autoscaleType, "'"));

              case 21:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));
      return _getStats.apply(this, arguments);
    }

    return {
      // re-runs stats and refresh whole display on reload
      reload: function reload() {
        return _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
          var aborter, stats;
          return runtime_1.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  self.setError();
                  aborter = new AbortController();
                  _context.next = 4;
                  return getStats({
                    signal: aborter.signal,
                    filters: self.filters
                  });

                case 4:
                  stats = _context.sent;

                  if (isAlive(self)) {
                    self.updateStats(stats);
                    superReload();
                  }

                case 6:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }))();
      },
      afterAttach: function afterAttach() {
        addDisposer(self, autorun( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2() {
          var aborter, view, stats;
          return runtime_1.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.prev = 0;
                  aborter = new AbortController();
                  view = getContainingView(self);
                  self.setLoading(aborter);

                  if (view.initialized) {
                    _context2.next = 6;
                    break;
                  }

                  return _context2.abrupt("return");

                case 6:
                  if (!(view.bpPerPx > self.maxViewBpPerPx)) {
                    _context2.next = 8;
                    break;
                  }

                  return _context2.abrupt("return");

                case 8:
                  _context2.next = 10;
                  return getStats({
                    signal: aborter.signal,
                    filters: self.filters
                  });

                case 10:
                  stats = _context2.sent;

                  if (isAlive(self)) {
                    self.updateStats(stats);
                  }

                  _context2.next = 17;
                  break;

                case 14:
                  _context2.prev = 14;
                  _context2.t0 = _context2["catch"](0);

                  if (!isAbortException(_context2.t0) && isAlive(self)) {
                    self.setError(_context2.t0);
                  }

                case 17:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, null, [[0, 14]]);
        })), {
          delay: 1000
        }));
      },
      renderSvg: function renderSvg(opts) {
        return _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3() {
          var needsScalebar, stats, _getContainingView, offsetPx;

          return runtime_1.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.next = 2;
                  return when(function () {
                    return self.ready && !!self.regionCannotBeRenderedText;
                  });

                case 2:
                  needsScalebar = self.needsScalebar, stats = self.stats;
                  _getContainingView = getContainingView(self), offsetPx = _getContainingView.offsetPx;
                  _context3.t0 = React;
                  _context3.t1 = React.Fragment;
                  _context3.t2 = React;
                  _context3.t3 = {
                    id: "snpcov"
                  };
                  _context3.next = 10;
                  return superRenderSvg(opts);

                case 10:
                  _context3.t4 = _context3.sent;
                  _context3.t5 = _context3.t2.createElement.call(_context3.t2, "g", _context3.t3, _context3.t4);
                  _context3.t6 = needsScalebar && stats ? React.createElement("g", {
                    transform: "translate(".concat(Math.max(-offsetPx, 0), ")")
                  }, React.createElement(YScaleBar, {
                    model: self,
                    orientation: "left"
                  })) : null;
                  return _context3.abrupt("return", _context3.t0.createElement.call(_context3.t0, _context3.t1, null, _context3.t5, _context3.t6));

                case 14:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3);
        }))();
      }
    };
  });
};

var XYPlotRenderer = /*#__PURE__*/function (_WiggleBaseRenderer) {
  _inherits(XYPlotRenderer, _WiggleBaseRenderer);

  var _super = /*#__PURE__*/_createSuper(XYPlotRenderer);

  function XYPlotRenderer() {
    _classCallCheck(this, XYPlotRenderer);

    return _super.apply(this, arguments);
  }

  _createClass(XYPlotRenderer, [{
    key: "draw",
    value: function draw(ctx, props) {
      var features = props.features,
          bpPerPx = props.bpPerPx,
          regions = props.regions,
          scaleOpts = props.scaleOpts,
          unadjustedHeight = props.height,
          config = props.config,
          values = props.ticks.values,
          displayCrossHatches = props.displayCrossHatches;

      var _regions = _slicedToArray(regions, 1),
          region = _regions[0];

      var width = (region.end - region.start) / bpPerPx; // the adjusted height takes into account YSCALEBAR_LABEL_OFFSET from the
      // wiggle display, and makes the height of the actual drawn area add
      // "padding" to the top and bottom of the display

      var offset = YSCALEBAR_LABEL_OFFSET;
      var height = unadjustedHeight - offset * 2;
      var pivotValue = readConfObject(config, 'bicolorPivotValue');
      var negColor = readConfObject(config, 'negColor');
      var posColor = readConfObject(config, 'posColor');
      var filled = readConfObject(config, 'filled');
      var clipColor = readConfObject(config, 'clipColor');
      var highlightColor = readConfObject(config, 'highlightColor');
      var summaryScoreMode = readConfObject(config, 'summaryScoreMode');
      var scale = getScale(_objectSpread2(_objectSpread2({}, scaleOpts), {}, {
        range: [0, height]
      }));
      var originY = getOrigin(scaleOpts.scaleType);

      var _scale$domain = scale.domain(),
          _scale$domain2 = _slicedToArray(_scale$domain, 2),
          niceMin = _scale$domain2[0],
          niceMax = _scale$domain2[1];

      var toY = function toY(n) {
        return height - scale(n) + offset;
      };

      var toHeight = function toHeight(n) {
        return toY(originY) - toY(n);
      };

      var colorCallback = readConfObject(config, 'color') === '#f0f' ? function (_, score) {
        return score < pivotValue ? negColor : posColor;
      } : function (feature, _score) {
        return readConfObject(config, 'color', {
          feature: feature
        });
      };
      ctx.strokeStyle = 'grey';
      ctx.moveTo(0, toY(0));
      ctx.lineTo(width, toY(0));
      ctx.stroke();
      var crossingOrigin = niceMin < pivotValue && niceMax > pivotValue;

      var _iterator = _createForOfIteratorHelper(features.values()),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var feature = _step.value;

          var _featureSpanPx = featureSpanPx(feature, region, bpPerPx),
              _featureSpanPx2 = _slicedToArray(_featureSpanPx, 2),
              leftPx = _featureSpanPx2[0],
              rightPx = _featureSpanPx2[1];

          var score = feature.get('score');
          var maxr = feature.get('maxScore');
          var minr = feature.get('minScore');
          var lowClipping = score < niceMin;
          var highClipping = score > niceMax;
          var w = rightPx - leftPx + 0.4; // fudge factor for subpixel rendering

          var summary = feature.get('summary');

          if (summaryScoreMode === 'max') {
            score = summary ? maxr : score;
            ctx.fillStyle = colorCallback(feature, score);
            ctx.fillRect(leftPx, toY(score), w, filled ? toHeight(score) : 1);
          } else if (summaryScoreMode === 'min') {
            score = summary ? minr : score;
            ctx.fillStyle = colorCallback(feature, score);
            ctx.fillRect(leftPx, toY(score), w, filled ? toHeight(score) : 1);
          } else if (summaryScoreMode === 'whiskers') {
            var c = colorCallback(feature, score);

            if (summary) {
              ctx.fillStyle = crossingOrigin ? colorCallback(feature, maxr) : Color(c).lighten(0.6).toString();
              ctx.fillRect(leftPx, toY(maxr), w, filled ? toHeight(maxr) - toHeight(score) : 1);
            } // normal


            ctx.fillStyle = crossingOrigin && summary ? Color(colorCallback(feature, maxr)).mix(Color(colorCallback(feature, minr))) : c;
            ctx.fillRect(leftPx, toY(score), w, filled ? toHeight(score) - (summary ? toHeight(minr) : 0) : 1); // min

            if (summary) {
              ctx.fillStyle = crossingOrigin ? colorCallback(feature, minr) : Color(c).darken(0.6).toString();
              ctx.fillRect(leftPx, toY(minr), w, filled ? toHeight(minr) : 1);
            }
          } else {
            ctx.fillStyle = colorCallback(feature, score);
            ctx.fillRect(leftPx, toY(score), w, filled ? toHeight(score) : 1);
          }

          if (highClipping) {
            ctx.fillStyle = clipColor;
            ctx.fillRect(leftPx, 0, w, 4);
          } else if (lowClipping && scaleOpts.scaleType !== 'log') {
            ctx.fillStyle = clipColor;
            ctx.fillRect(leftPx, unadjustedHeight - 4, w, 4);
          }

          if (feature.get('highlighted')) {
            ctx.fillStyle = highlightColor;
            ctx.fillRect(leftPx, 0, w, height);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      if (displayCrossHatches) {
        ctx.lineWidth = 1;
        ctx.strokeStyle = 'rgba(200,200,200,0.8)';
        values.forEach(function (tick) {
          ctx.beginPath();
          ctx.moveTo(0, Math.round(toY(tick)));
          ctx.lineTo(width, Math.round(toY(tick)));
          ctx.stroke();
        });
      }
    }
  }]);

  return XYPlotRenderer;
}(WiggleBaseRenderer);

var configSchema$1 = /*#__PURE__*/ConfigurationSchema('XYPlotRenderer', {}, {
  baseConfiguration: ConfigSchema,
  explicitlyTyped: true
});

var LinePlotRenderer = /*#__PURE__*/function (_WiggleBaseRenderer) {
  _inherits(LinePlotRenderer, _WiggleBaseRenderer);

  var _super = /*#__PURE__*/_createSuper(LinePlotRenderer);

  function LinePlotRenderer() {
    _classCallCheck(this, LinePlotRenderer);

    return _super.apply(this, arguments);
  }

  _createClass(LinePlotRenderer, [{
    key: "draw",
    value: function draw(ctx, props) {
      var features = props.features,
          regions = props.regions,
          bpPerPx = props.bpPerPx,
          scaleOpts = props.scaleOpts,
          unadjustedHeight = props.height,
          values = props.ticks.values,
          displayCrossHatches = props.displayCrossHatches,
          config = props.config;

      var _regions = _slicedToArray(regions, 1),
          region = _regions[0];

      var width = (region.end - region.start) / bpPerPx;
      var offset = YSCALEBAR_LABEL_OFFSET; // the adjusted height takes into account YSCALEBAR_LABEL_OFFSET from the
      // wiggle display, and makes the height of the actual drawn area add
      // "padding" to the top and bottom of the display

      var height = unadjustedHeight - offset * 2;
      var clipColor = readConfObject(config, 'clipColor');
      var highlightColor = readConfObject(config, 'highlightColor');
      var scale = getScale(_objectSpread2(_objectSpread2({}, scaleOpts), {}, {
        range: [0, height]
      }));

      var _scale$domain = scale.domain(),
          _scale$domain2 = _slicedToArray(_scale$domain, 2),
          niceMin = _scale$domain2[0],
          niceMax = _scale$domain2[1];

      var toY = function toY(rawscore) {
        return height - scale(rawscore) + offset;
      };

      var colorCallback = readConfObject(config, 'color') === '#f0f' ? function () {
        return 'grey';
      } : function (feature) {
        return readConfObject(config, 'color', {
          feature: feature
        });
      };
      ctx.strokeStyle = 'grey';
      ctx.moveTo(0, toY(0));
      ctx.lineTo(width, toY(0));
      ctx.stroke();
      var lastVal;

      var _iterator = _createForOfIteratorHelper(features.values()),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var feature = _step.value;

          var _featureSpanPx = featureSpanPx(feature, region, bpPerPx),
              _featureSpanPx2 = _slicedToArray(_featureSpanPx, 2),
              leftPx = _featureSpanPx2[0],
              rightPx = _featureSpanPx2[1];

          var score = feature.get('score');
          var lowClipping = score < niceMin;
          var highClipping = score > niceMax;
          var w = rightPx - leftPx + 0.3; // fudge factor for subpixel rendering

          var c = colorCallback(feature);
          ctx.strokeStyle = c;
          ctx.beginPath();

          if (!region.reversed) {
            ctx.moveTo(leftPx, toY(typeof lastVal !== 'undefined' ? lastVal : score));
            ctx.lineTo(leftPx, toY(score));
            ctx.lineTo(rightPx, toY(score));
          } else {
            ctx.moveTo(rightPx, toY(typeof lastVal !== 'undefined' ? lastVal : score));
            ctx.lineTo(rightPx, toY(score));
            ctx.lineTo(leftPx, toY(score));
          }

          ctx.stroke();
          lastVal = score;

          if (highClipping) {
            ctx.fillStyle = clipColor;
            ctx.fillRect(leftPx, 0, w, 4);
          } else if (lowClipping && scaleOpts.scaleType !== 'log') {
            ctx.fillStyle = clipColor;
            ctx.fillRect(leftPx, height - 4, w, height);
          }

          if (feature.get('highlighted')) {
            ctx.fillStyle = highlightColor;
            ctx.fillRect(leftPx, 0, w, height);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      if (displayCrossHatches) {
        ctx.lineWidth = 1;
        ctx.strokeStyle = 'rgba(200,200,200,0.8)';
        values.forEach(function (tick) {
          ctx.beginPath();
          ctx.moveTo(0, Math.round(toY(tick)));
          ctx.lineTo(width, Math.round(toY(tick)));
          ctx.stroke();
        });
      }
    }
  }]);

  return LinePlotRenderer;
}(WiggleBaseRenderer);

var configSchema$2 = /*#__PURE__*/ConfigurationSchema('LinePlotRenderer', {}, {
  baseConfiguration: ConfigSchema,
  explicitlyTyped: true
});

var WiggleGetGlobalStats = /*#__PURE__*/function (_RpcMethodType) {
  _inherits(WiggleGetGlobalStats, _RpcMethodType);

  var _super = /*#__PURE__*/_createSuper(WiggleGetGlobalStats);

  function WiggleGetGlobalStats() {
    var _this;

    _classCallCheck(this, WiggleGetGlobalStats);

    _this = _super.apply(this, arguments);
    _this.name = 'WiggleGetGlobalStats';
    return _this;
  } // eslint-disable-next-line @typescript-eslint/no-explicit-any


  _createClass(WiggleGetGlobalStats, [{
    key: "deserializeArguments",
    value: function () {
      var _deserializeArguments = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(args, rpcDriverClassName) {
        var l;
        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _get(_getPrototypeOf(WiggleGetGlobalStats.prototype), "deserializeArguments", this).call(this, args, rpcDriverClassName);

              case 2:
                l = _context.sent;
                return _context.abrupt("return", _objectSpread2(_objectSpread2({}, l), {}, {
                  filters: args.filters ? new SerializableFilterChain({
                    filters: args.filters
                  }) : undefined
                }));

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function deserializeArguments(_x, _x2) {
        return _deserializeArguments.apply(this, arguments);
      }

      return deserializeArguments;
    }()
  }, {
    key: "execute",
    value: function () {
      var _execute = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(args, rpcDriverClassName) {
        var deserializedArgs, adapterConfig, sessionId, _yield$getAdapter, dataAdapter;

        return runtime_1.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.deserializeArguments(args, rpcDriverClassName);

              case 2:
                deserializedArgs = _context2.sent;
                adapterConfig = deserializedArgs.adapterConfig, sessionId = deserializedArgs.sessionId;
                _context2.next = 6;
                return getAdapter(this.pluginManager, sessionId, adapterConfig);

              case 6:
                _yield$getAdapter = _context2.sent;
                dataAdapter = _yield$getAdapter.dataAdapter;

                if (!(dataAdapter instanceof BaseFeatureDataAdapter)) {
                  _context2.next = 12;
                  break;
                }

                if (!dataAdapter.capabilities.includes('hasGlobalStats')) {
                  _context2.next = 11;
                  break;
                }

                return _context2.abrupt("return", dataAdapter.getGlobalStats(deserializedArgs));

              case 11:
                throw new Error('Data adapter does not support global stats');

              case 12:
                throw new Error('Data adapter not found');

              case 13:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function execute(_x3, _x4) {
        return _execute.apply(this, arguments);
      }

      return execute;
    }()
  }]);

  return WiggleGetGlobalStats;
}(RpcMethodType);
var WiggleGetMultiRegionStats = /*#__PURE__*/function (_RpcMethodType2) {
  _inherits(WiggleGetMultiRegionStats, _RpcMethodType2);

  var _super2 = /*#__PURE__*/_createSuper(WiggleGetMultiRegionStats);

  function WiggleGetMultiRegionStats() {
    var _this2;

    _classCallCheck(this, WiggleGetMultiRegionStats);

    _this2 = _super2.apply(this, arguments);
    _this2.name = 'WiggleGetMultiRegionStats';
    return _this2;
  } // eslint-disable-next-line @typescript-eslint/no-explicit-any


  _createClass(WiggleGetMultiRegionStats, [{
    key: "deserializeArguments",
    value: function () {
      var _deserializeArguments2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(args, rpcDriverClassName) {
        var l;
        return runtime_1.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return _get(_getPrototypeOf(WiggleGetMultiRegionStats.prototype), "deserializeArguments", this).call(this, args, rpcDriverClassName);

              case 2:
                l = _context3.sent;
                return _context3.abrupt("return", _objectSpread2(_objectSpread2({}, l), {}, {
                  filters: args.filters ? new SerializableFilterChain({
                    filters: args.filters
                  }) : undefined
                }));

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function deserializeArguments(_x5, _x6) {
        return _deserializeArguments2.apply(this, arguments);
      }

      return deserializeArguments;
    }()
  }, {
    key: "serializeArguments",
    value: function () {
      var _serializeArguments = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(args) {
        var _this$pluginManager$r, _this$pluginManager$r2;

        var assemblyManager;
        return runtime_1.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assemblyManager = (_this$pluginManager$r = this.pluginManager.rootModel) === null || _this$pluginManager$r === void 0 ? void 0 : (_this$pluginManager$r2 = _this$pluginManager$r.session) === null || _this$pluginManager$r2 === void 0 ? void 0 : _this$pluginManager$r2.assemblyManager;

                if (assemblyManager) {
                  _context4.next = 3;
                  break;
                }

                return _context4.abrupt("return", args);

              case 3:
                return _context4.abrupt("return", renameRegionsIfNeeded(assemblyManager, _objectSpread2(_objectSpread2({}, args), {}, {
                  filters: args.filters && args.filters.toJSON().filters
                })));

              case 4:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function serializeArguments(_x7) {
        return _serializeArguments.apply(this, arguments);
      }

      return serializeArguments;
    }()
  }, {
    key: "execute",
    value: function () {
      var _execute2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(args, rpcDriverClassName) {
        var deserializedArgs, regions, adapterConfig, sessionId, _yield$getAdapter2, dataAdapter;

        return runtime_1.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this.deserializeArguments(args, rpcDriverClassName);

              case 2:
                deserializedArgs = _context5.sent;
                regions = deserializedArgs.regions, adapterConfig = deserializedArgs.adapterConfig, sessionId = deserializedArgs.sessionId;
                _context5.next = 6;
                return getAdapter(this.pluginManager, sessionId, adapterConfig);

              case 6:
                _yield$getAdapter2 = _context5.sent;
                dataAdapter = _yield$getAdapter2.dataAdapter;

                if (!(dataAdapter instanceof BaseFeatureDataAdapter)) {
                  _context5.next = 10;
                  break;
                }

                return _context5.abrupt("return", dataAdapter.getMultiRegionStats(regions, deserializedArgs));

              case 10:
                throw new Error('Data adapter not found');

              case 11:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function execute(_x8, _x9) {
        return _execute2.apply(this, arguments);
      }

      return execute;
    }()
  }]);

  return WiggleGetMultiRegionStats;
}(RpcMethodType);

var WigglePlugin = /*#__PURE__*/function (_Plugin) {
  _inherits(WigglePlugin, _Plugin);

  var _super = /*#__PURE__*/_createSuper(WigglePlugin);

  function WigglePlugin() {
    var _this;

    _classCallCheck(this, WigglePlugin);

    _this = _super.apply(this, arguments);
    _this.name = 'WigglePlugin';
    _this.exports = {
      LinearWiggleDisplayReactComponent: LinearWiggleDisplay,
      XYPlotRendererReactComponent: XYPlotRendererReactComponent,
      XYPlotRenderer: XYPlotRenderer,
      xyPlotRendererConfigSchema: configSchema$1,
      utils: utils,
      WiggleBaseRenderer: WiggleBaseRenderer,
      linearWiggleDisplayModelFactory: stateModelFactory
    };
    return _this;
  }

  _createClass(WigglePlugin, [{
    key: "install",
    value: function install(pluginManager) {
      pluginManager.addTrackType(function () {
        var configSchema = ConfigurationSchema('QuantitativeTrack', {}, {
          baseConfiguration: createBaseTrackConfig(pluginManager)
        });
        return new TrackType({
          name: 'QuantitativeTrack',
          configSchema: configSchema,
          stateModel: createBaseTrackModel(pluginManager, 'QuantitativeTrack', configSchema)
        });
      });
      pluginManager.addDisplayType(function () {
        var configSchema = WiggleConfigFactory(pluginManager);
        return new DisplayType({
          name: 'LinearWiggleDisplay',
          configSchema: configSchema,
          stateModel: stateModelFactory(pluginManager, configSchema),
          trackType: 'QuantitativeTrack',
          viewType: 'LinearGenomeView',
          ReactComponent: LinearWiggleDisplay
        });
      });
      pluginManager.addAdapterType(function () {
        return new AdapterType({
          name: 'BigWigAdapter',
          configSchema: bigWigAdapterConfigSchema,
          adapterCapabilities: adapterCapabilities,
          getAdapterClass: function getAdapterClass() {
            return Promise.resolve().then(function () { return BigWigAdapter$1; }).then(function (r) {
              return r["default"];
            });
          }
        });
      });
      pluginManager.addRendererType(function () {
        return new DensityRenderer({
          name: 'DensityRenderer',
          ReactComponent: XYPlotRendererReactComponent,
          configSchema: configSchema,
          pluginManager: pluginManager
        });
      });
      pluginManager.addRendererType(function () {
        return new LinePlotRenderer({
          name: 'LinePlotRenderer',
          ReactComponent: XYPlotRendererReactComponent,
          configSchema: configSchema$2,
          pluginManager: pluginManager
        });
      });
      pluginManager.addRendererType(function () {
        return new XYPlotRenderer({
          name: 'XYPlotRenderer',
          ReactComponent: XYPlotRendererReactComponent,
          configSchema: configSchema$1,
          pluginManager: pluginManager
        });
      });
      pluginManager.addRpcMethod(function () {
        return new WiggleGetGlobalStats(pluginManager);
      });
      pluginManager.addRpcMethod(function () {
        return new WiggleGetMultiRegionStats(pluginManager);
      });
    }
  }]);

  return WigglePlugin;
}(Plugin);

var useStyles$1 = /*#__PURE__*/makeStyles(function (theme) {
  return {
    root: {},
    closeButton: {
      position: 'absolute',
      right: theme.spacing(1),
      top: theme.spacing(1),
      color: theme.palette.grey[500]
    }
  };
});
function SetMinMaxDlg$1(props) {
  var classes = useStyles$1();
  var model = props.model,
      handleClose = props.handleClose;
  var minScore = model.minScore,
      maxScore = model.maxScore,
      scaleType = model.scaleType;

  var _useState = useState("".concat(minScore !== Number.MIN_VALUE ? minScore : '')),
      _useState2 = _slicedToArray(_useState, 2),
      min = _useState2[0],
      setMin = _useState2[1];

  var _useState3 = useState("".concat(maxScore !== Number.MAX_VALUE ? maxScore : '')),
      _useState4 = _slicedToArray(_useState3, 2),
      max = _useState4[0],
      setMax = _useState4[1];

  var ok = min !== '' && max !== '' && !Number.isNaN(+min) && !Number.isNaN(+max) ? +max > +min : true;
  var logOk = scaleType === 'log' && min !== '' && !Number.isNaN(+min) ? +min > 0 : true;
  return React.createElement(Dialog, {
    open: true,
    onClose: handleClose
  }, React.createElement(DialogTitle, null, "Set min/max score for track", React.createElement(IconButton, {
    className: classes.closeButton,
    onClick: handleClose
  }, React.createElement(CloseIcon, null))), React.createElement(DialogContent, {
    style: {
      overflowX: 'hidden'
    }
  }, React.createElement("div", {
    className: classes.root
  }, React.createElement(Typography, null, "Enter min/max score: "), !ok ? React.createElement(Typography, {
    color: "error"
  }, "Max is greater than or equal to min") : null, !logOk ? React.createElement(Typography, {
    color: "error"
  }, "Min score should be greater than 0 for log scale") : null, React.createElement(TextField, {
    value: min,
    onChange: function onChange(event) {
      setMin(event.target.value);
    },
    placeholder: "Enter min score"
  }), React.createElement(TextField, {
    value: max,
    onChange: function onChange(event) {
      setMax(event.target.value);
    },
    placeholder: "Enter max score"
  }), React.createElement(Button, {
    variant: "contained",
    color: "primary",
    type: "submit",
    style: {
      marginLeft: 20
    },
    disabled: !ok,
    onClick: function onClick() {
      model.setMinScore(min !== '' && !Number.isNaN(+min) ? +min : undefined);
      model.setMaxScore(max !== '' && !Number.isNaN(+max) ? +max : undefined);
      handleClose();
    }
  }, "Submit"))));
}

var SetMinMaxDialog = {
  __proto__: null,
  'default': SetMinMaxDlg$1
};

var useStyles$2 = /*#__PURE__*/makeStyles(function (theme) {
  return {
    root: {},
    closeButton: {
      position: 'absolute',
      right: theme.spacing(1),
      top: theme.spacing(1),
      color: theme.palette.grey[500]
    }
  };
}); // this is needed because passing a entire color object into the react-color
// for alpha, can't pass in an rgba string for example

function serializeColor(color) {
  if (color instanceof Object) {
    var r = color.r,
        g = color.g,
        b = color.b,
        a = color.a;
    return "rgb(".concat(r, ",").concat(g, ",").concat(b, ",").concat(a, ")");
  }

  return color;
}

function SetColorDialog(props) {
  var classes = useStyles$2();
  var model = props.model,
      handleClose = props.handleClose;
  return React.createElement(Dialog$1, {
    open: true,
    onClose: handleClose,
    "aria-labelledby": "alert-dialog-title",
    "aria-describedby": "alert-dialog-description"
  }, React.createElement(DialogTitle$1, {
    id: "alert-dialog-title"
  }, "Select a color", React.createElement(IconButton$1, {
    "aria-label": "close",
    className: classes.closeButton,
    onClick: handleClose
  }, React.createElement(CloseIcon, null))), React.createElement(DialogContent$1, {
    style: {
      overflowX: 'hidden'
    }
  }, React.createElement("div", {
    className: classes.root
  }, React.createElement(CompactPicker, {
    onChange: function onChange(event) {
      model.setColor(serializeColor(event.rgb));
    }
  }), React.createElement("br", null), React.createElement("div", {
    style: {
      margin: 20
    }
  }, React.createElement(Button$1, {
    onClick: function onClick() {
      model.setColor(undefined);
    },
    color: "secondary",
    variant: "contained"
  }, "Restore default from config"), React.createElement(Button$1, {
    variant: "contained",
    color: "primary",
    type: "submit",
    onClick: function onClick() {
      handleClose();
    }
  }, "Submit")))));
}

var SetColorDialog$1 = {
  __proto__: null,
  'default': SetColorDialog
};

export default WigglePlugin;
export { LinearWiggleDisplay as LinearWiggleDisplayReactComponent, WiggleBaseRenderer, XYPlotRendererReactComponent as WiggleRendering, YSCALEBAR_LABEL_OFFSET, getNiceDomain, getOrigin, getScale, stateModelFactory as linearWiggleDisplayModelFactory };
//# sourceMappingURL=plugin-wiggle.esm.js.map
