import RpcMethodType from '@jbrowse/core/pluggableElementTypes/RpcMethodType';
import { RenderArgs } from '@jbrowse/core/rpc/coreRpcMethods';
import { Region } from '@jbrowse/core/util/types';
import { RemoteAbortSignal } from '@jbrowse/core/rpc/remoteAbortSignals';
import { FeatureStats } from '@jbrowse/core/util/stats';
export declare class WiggleGetGlobalStats extends RpcMethodType {
    name: string;
    deserializeArguments(args: any, rpcDriverClassName: string): Promise<any>;
    execute(args: {
        adapterConfig: {};
        signal?: RemoteAbortSignal;
        headers?: Record<string, string>;
        sessionId: string;
    }, rpcDriverClassName: string): Promise<FeatureStats>;
}
export declare class WiggleGetMultiRegionStats extends RpcMethodType {
    name: string;
    deserializeArguments(args: any, rpcDriverClassName: string): Promise<any>;
    serializeArguments(args: RenderArgs & {
        signal?: AbortSignal;
        statusCallback?: Function;
    }): Promise<(RenderArgs & {
        signal?: AbortSignal | undefined;
        statusCallback?: Function | undefined;
    }) | {
        filters: string[];
        adapterConfig: {};
        rendererType: string;
        config: import("mobx-state-tree").ModelCreationType<import("mobx-state-tree/dist/internal").ExtractCFromProps<Record<string, any>>> | (import("mobx-state-tree").ModelInstanceTypeProps<Record<string, any>> & {
            setSubschema(slotName: string, data: import("@jbrowse/core/configuration/configurationSchema").AnyConfigurationSchemaType | import("mobx-state-tree").ModelPropertiesDeclaration): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration/configurationSchema").AnyConfigurationSchemaType>) | undefined;
        sessionId: string;
        signal?: AbortSignal | undefined;
        theme: import("@material-ui/core").ThemeOptions;
        exportSVG: {
            rasterizeLayers?: boolean | undefined;
        };
        statusCallback?: Function | undefined;
    }>;
    execute(args: {
        adapterConfig: {};
        signal?: RemoteAbortSignal;
        sessionId: string;
        headers?: Record<string, string>;
        regions: Region[];
        bpPerPx: number;
    }, rpcDriverClassName: string): Promise<FeatureStats>;
}
