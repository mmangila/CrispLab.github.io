{"version":3,"sources":["../../../plugins/menus/src/ImportSessionWidget/components/ImportSessionWidget.js"],"names":["MAX_FILE_SIZE","styledBy","property","mapping","props","useStyles","makeStyles","theme","root","margin","paper","display","flexDirection","dropZone","textAlign","padding","borderWidth","borderRadius","borderColor","true","false","divider","borderStyle","backgroundColor","alpha","default","outline","transition","light","uploadIcon","color","secondary","rejectedFiles","marginTop","listItem","expandIcon","error","errorHeader","background","errorMessage","observer","useState","setErrorMessage","model","useDropzone","accept","maxSize","multiple","onDrop","a","acceptedFiles","Math","file","fileHandle","openLocation","storeBlobLocation","blob","sessionText","console","sessionContents","JSON","session","getSession","getRootProps","getInputProps","isDragActive","classes","className","fontSize","align","variant"],"mappings":"kTAaMA,EAAgB,IAAM,KAAN,SAAtB,GAEA,SAASC,EAASC,EAAUC,GAC1B,OAAO,SAAAC,GAAK,OAAID,EAAQC,EAAZ,KAGd,IAAMC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,OAAQF,cAEVG,MAAO,CACLC,QADK,OAELC,cAAe,UAEjBC,SAAU,CACRC,UADQ,SAERL,OAAQF,UAFA,GAGRQ,QAASR,UAHD,GAIRS,YAJQ,EAKRC,aALQ,EAMRC,YAAajB,EAAS,eAAgB,CACpCkB,KAAMZ,oBAD8B,MAEpCa,MAAOb,UAAcc,UAEvBC,YAVQ,SAWRC,gBAAiBtB,EAAS,eAAgB,CACxCkB,KAAMK,YACJjB,eADS,QAETA,iBAHsC,cAKxCa,MAAOb,qBAAyBkB,UAElCC,QAlBQ,OAmBRC,WAnBQ,0BAoBR,UAAW,CACTT,YAAaX,oBAAwBqB,QAGzCC,WAAY,CACVC,MAAOvB,eAAmBwB,WAE5BC,cAAe,CACbC,UAAW1B,cAEb2B,SAAU,CACRnB,QAASR,gBAEX4B,WAAY,CACVL,MAAO,WAETM,MAAO,CACL3B,OAAQF,cAEV8B,YAAa,CACXC,WAAY/B,gBADD,MAEXuB,MAAOvB,gBAFI,aAGXQ,QAASR,UAHE,GAIXO,UAAW,UAEbyB,aAAc,CACZxB,QAASR,kBAgGEiC,8BA5Ff,SAAuBpC,GACrB,MAAwCqC,mBAAxC,uBAAOF,EAAP,KAAqBG,EAArB,KACQC,EAAUvC,EAAlB,MACA,EAAsDwC,YAAY,CAChEC,OADgE,mBAEhEC,QAFgE,EAGhEC,UAHgE,EAIhEC,OAAQ,WAAF,4BAAE,yCAAAC,EAAA,0DACFjB,EADE,8BAEAkB,UAAwBlB,SAA5B,EACEU,gDACSV,UAAJ,EACLU,EAAgB,2BAAD,OACcS,WACzBnB,wBAFW,kCAGUhC,EAAgB,KAAH,SAHvB,GAAf0C,SAKK,qBAAIV,UACTU,qCAEAA,+BAbE,oDAiBCU,EAjBD,KAkBAC,EAAaC,uBAAaC,4BAAkB,CAAEC,KAAMJ,KAlBpD,kBAqBgBC,WArBhB,eAqBJI,EArBI,gEAuBJC,oBACAhB,EAAgB,wBAAD,OAAyBU,EAAzB,oBAAfV,KAxBI,2BA4BN,IACEiB,EAAkBC,cAAlBD,QACA,MAAOvB,GACPsB,iBACAC,EAAkB,CAAEvB,MAAO,iBAAF,OAAmBgB,EAAnB,sBAErBS,EAAUC,qBAlCV,GAmCN,IACED,gBACA,MAAOzB,GACPsB,iBACAhB,EAAgB,6BAAD,SAAfA,MAvCI,0DAAF,qDAAE,KAJFqB,EAAR,eAAsBC,EAAtB,gBAAqCC,EAArC,eA+CMC,EAAU7D,EAAU,CAAE4D,iBAE5B,OACE,yBAAKE,UAAWD,EAAQ1D,MACtB,uBAAO2D,UAAWD,EAAQxD,OACxB,wBAASqD,EAAa,CAAEI,UAAWD,EAAQrD,WACzC,0BAAWmD,KACX,uBAAiBG,UAAWD,EAA5B,WAAgDE,SAAS,UACzD,uBAAYtC,MAAZ,gBAAkCuC,MAAlC,SAAiDC,QAAQ,SAH3D,4BAME,uBAAYxC,MAAZ,gBAAkCuC,MAAlC,SAAiDC,QAAQ,SAN3D,MASE,uBAAQxC,MAAR,UAAwBwC,QAAQ,aAXtC,kBAgBG/B,EACC,uBAAO4B,UAAWD,EAAQ9B,OACxB,yBAAK+B,UAAWD,EAAQ7B,aACtB,uBAAWP,MAAX,UAA2BsC,SAAS,UACpC,6BACE,uBAAYE,QAAZ,KAAyBxC,MAAzB,UAAyCuC,MAAM,UAJrD,kBASE,uBAAYF,UAAWD,EAAQ3B,cAVtB,IAjBjB","file":"static/js/44.6061ea22.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { getSession } from '@jbrowse/core/util'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { storeBlobLocation } from '@jbrowse/core/util/tracks'\nimport { Button, Paper, Typography, makeStyles } from '@material-ui/core'\nimport { alpha } from '@material-ui/core/styles'\nimport { observer, PropTypes as MobxPropTypes } from 'mobx-react'\nimport { useDropzone } from 'react-dropzone'\n\n// icons\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload'\nimport ErrorIcon from '@material-ui/icons/Error'\n\nconst MAX_FILE_SIZE = 512 * 1024 ** 2 // 512 MiB\n\nfunction styledBy(property, mapping) {\n  return props => mapping[props[property]]\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    margin: theme.spacing(1),\n  },\n  paper: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  dropZone: {\n    textAlign: 'center',\n    margin: theme.spacing(2),\n    padding: theme.spacing(2),\n    borderWidth: 2,\n    borderRadius: 2,\n    borderColor: styledBy('isDragActive', {\n      true: theme.palette.secondary.light,\n      false: theme.palette.divider,\n    }),\n    borderStyle: 'dashed',\n    backgroundColor: styledBy('isDragActive', {\n      true: alpha(\n        theme.palette.text.primary,\n        theme.palette.action.hoverOpacity,\n      ),\n      false: theme.palette.background.default,\n    }),\n    outline: 'none',\n    transition: 'border .24s ease-in-out',\n    '&:focus': {\n      borderColor: theme.palette.secondary.light,\n    },\n  },\n  uploadIcon: {\n    color: theme.palette.text.secondary,\n  },\n  rejectedFiles: {\n    marginTop: theme.spacing(4),\n  },\n  listItem: {\n    padding: theme.spacing(0, 4),\n  },\n  expandIcon: {\n    color: '#FFFFFF',\n  },\n  error: {\n    margin: theme.spacing(2),\n  },\n  errorHeader: {\n    background: theme.palette.error.light,\n    color: theme.palette.error.contrastText,\n    padding: theme.spacing(2),\n    textAlign: 'center',\n  },\n  errorMessage: {\n    padding: theme.spacing(2),\n  },\n}))\n\nfunction ImportSession(props) {\n  const [errorMessage, setErrorMessage] = useState('')\n  const { model } = props\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    accept: 'application/json',\n    maxSize: MAX_FILE_SIZE,\n    multiple: false,\n    onDrop: async (acceptedFiles, rejectedFiles) => {\n      if (rejectedFiles.length) {\n        if (acceptedFiles.length || rejectedFiles.length > 1) {\n          setErrorMessage('Only one session at a time may be imported')\n        } else if (rejectedFiles[0].size > MAX_FILE_SIZE) {\n          setErrorMessage(\n            `File size is too large (${Math.round(\n              rejectedFiles[0].size / 1024 ** 2,\n            )} MiB), max size is ${MAX_FILE_SIZE / 1024 ** 2} MiB`,\n          )\n        } else if (rejectedFiles[0].type !== 'application/json') {\n          setErrorMessage('File does not appear to be JSON')\n        } else {\n          setErrorMessage('Unknown file import error')\n        }\n        return\n      }\n      const [file] = acceptedFiles\n      const fileHandle = openLocation(storeBlobLocation({ blob: file }))\n      let sessionText\n      try {\n        sessionText = await fileHandle.readFile('utf8')\n      } catch (error) {\n        console.error(error)\n        setErrorMessage(`Problem opening file ${file.path}: ${error}`)\n        return\n      }\n      let sessionContents\n      try {\n        sessionContents = JSON.parse(sessionText).session\n      } catch (error) {\n        console.error(error)\n        sessionContents = { error: `Error parsing ${file.path}: ${error}` }\n      }\n      const session = getSession(model)\n      try {\n        session.setSession(sessionContents)\n      } catch (error) {\n        console.error(error)\n        setErrorMessage(`Error activating session: ${error} `)\n      }\n    },\n  })\n  const classes = useStyles({ isDragActive })\n\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <div {...getRootProps({ className: classes.dropZone })}>\n          <input {...getInputProps()} />\n          <CloudUploadIcon className={classes.uploadIcon} fontSize=\"large\" />\n          <Typography color=\"textSecondary\" align=\"center\" variant=\"body1\">\n            Drag and drop files here\n          </Typography>\n          <Typography color=\"textSecondary\" align=\"center\" variant=\"body2\">\n            or\n          </Typography>\n          <Button color=\"primary\" variant=\"contained\">\n            Browse Files\n          </Button>\n        </div>\n      </Paper>\n      {errorMessage ? (\n        <Paper className={classes.error}>\n          <div className={classes.errorHeader}>\n            <ErrorIcon color=\"inherit\" fontSize=\"large\" />\n            <div>\n              <Typography variant=\"h6\" color=\"inherit\" align=\"center\">\n                Import error\n              </Typography>\n            </div>\n          </div>\n          <Typography className={classes.errorMessage}>\n            {errorMessage}\n          </Typography>\n        </Paper>\n      ) : null}\n    </div>\n  )\n}\n\nImportSession.propTypes = {\n  model: MobxPropTypes.observableObject.isRequired,\n}\n\nexport default observer(ImportSession)\n"],"sourceRoot":""}